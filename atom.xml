<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[狂奔的菜鸟]]></title>
  <subtitle><![CDATA[当你的实力支撑不起你的野心的时候，静下心来好好学习吧！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.cxyteam.com/"/>
  <updated>2019-03-29T10:28:59.725Z</updated>
  <id>http://www.cxyteam.com/</id>
  
  <author>
    <name><![CDATA[狂奔的菜鸟]]></name>
    <email><![CDATA[phpchengxuyuan@sina.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[swagger使用]]></title>
    <link href="http://www.cxyteam.com/2019/03/29/swagger%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2019/03/29/swagger使用/</id>
    <published>2019-03-29T09:29:36.000Z</published>
    <updated>2019-03-29T10:28:59.725Z</updated>
    <content type="html"><![CDATA[<h1 id="安装swagger-editor"><a href="#安装swagger-editor" class="headerlink" title="安装swagger-editor"></a>安装swagger-editor</h1><h6 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h6><h6 id="安装http-server"><a href="#安装http-server" class="headerlink" title="安装http-server"></a>安装http-server</h6><pre><code>npm install -g http-server
</code></pre><h6 id="安装swagger-editor-1"><a href="#安装swagger-editor-1" class="headerlink" title="安装swagger-editor"></a>安装swagger-editor</h6><blockquote>
<p><a href="&quot;https://github.com/swagger-api/swagger-editor/releases&quot;">swagger-editor下载</a><br>解压swagger-editor:tar -zxvf swagger-editor.tar.gz</p>
</blockquote>
<h6 id="启动swagger服务"><a href="#启动swagger服务" class="headerlink" title="启动swagger服务"></a>启动swagger服务</h6><pre><code>http-server -p 8082 swagger-editor
</code></pre><h6 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h6><pre><code>http://127.0.0.1:8082
</code></pre><h1 id="安装swagger-ui"><a href="#安装swagger-ui" class="headerlink" title="安装swagger-ui"></a>安装swagger-ui</h1><h6 id="下载swagger-ui"><a href="#下载swagger-ui" class="headerlink" title="下载swagger-ui"></a>下载swagger-ui</h6><pre><code>git clone https://github.com/swagger-api/swagger-ui.git
</code></pre><h6 id="启动swagger-ui服务"><a href="#启动swagger-ui服务" class="headerlink" title="启动swagger-ui服务"></a>启动swagger-ui服务</h6><pre><code>http-server -p 8004 swagger-ui
</code></pre><h6 id="修改接口地址"><a href="#修改接口地址" class="headerlink" title="修改接口地址"></a>修改接口地址</h6><pre><code>vim dist/index.html
将SwaggerUIBundle中的uri换成你的json文件
</code></pre><h1 id="安装go-swagger自动生成接口文档"><a href="#安装go-swagger自动生成接口文档" class="headerlink" title="安装go-swagger自动生成接口文档"></a>安装go-swagger自动生成接口文档</h1><h6 id="安装go-swagger"><a href="#安装go-swagger" class="headerlink" title="安装go-swagger"></a>安装go-swagger</h6><pre><code>brew tap go-swagger/go-swagger
brew install go-swagger
</code></pre><h6 id="进入项目目录，生成文档"><a href="#进入项目目录，生成文档" class="headerlink" title="进入项目目录，生成文档"></a>进入项目目录，生成文档</h6><pre><code>swagger generate spec -o ./swagger.json
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装swagger-editor"><a href="#安装swagger-editor" class="headerlink" title="安装swagger-editor"></a>安装swagger-editor</h1><h6 id="安装npm"><a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker原理介绍]]></title>
    <link href="http://www.cxyteam.com/2019/03/27/docker%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.cxyteam.com/2019/03/27/docker原理介绍/</id>
    <published>2019-03-27T11:12:39.000Z</published>
    <updated>2019-03-27T16:52:06.101Z</updated>
    <content type="html"><![CDATA[<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><h6 id="挂载a目录到b目录（b目录的子目录被隐藏，所有的对b的修改都作用a上）"><a href="#挂载a目录到b目录（b目录的子目录被隐藏，所有的对b的修改都作用a上）" class="headerlink" title="挂载a目录到b目录（b目录的子目录被隐藏，所有的对b的修改都作用a上）"></a>挂载a目录到b目录（b目录的子目录被隐藏，所有的对b的修改都作用a上）</h6><p>mount –bind a b</p>
<h6 id="切换根目录"><a href="#切换根目录" class="headerlink" title="切换根目录"></a>切换根目录</h6><pre><code>privot_root new_root old_root
</code></pre><h1 id="aufs创建容器层"><a href="#aufs创建容器层" class="headerlink" title="aufs创建容器层"></a>aufs创建容器层</h1><h6 id="将pathA和pathB挂载到mount-path目录；默认只有最上面一层是可读写的也就是pathB，其他是只读"><a href="#将pathA和pathB挂载到mount-path目录；默认只有最上面一层是可读写的也就是pathB，其他是只读" class="headerlink" title="将pathA和pathB挂载到mount_path目录；默认只有最上面一层是可读写的也就是pathB，其他是只读"></a>将pathA和pathB挂载到mount_path目录；默认只有最上面一层是可读写的也就是pathB，其他是只读</h6><pre><code>mount -t aufs -o dirs=pathA:pathB none mount_path
</code></pre><h5 id="删除容器信息"><a href="#删除容器信息" class="headerlink" title="删除容器信息"></a>删除容器信息</h5><pre><code>umount mount_path
rm -rf mount_path
</code></pre><h1 id="volume实现"><a href="#volume实现" class="headerlink" title="volume实现"></a>volume实现</h1><pre><code>-v a:b
mount -t aufs -o dirs=a none none b
</code></pre><h1 id="镜像打包"><a href="#镜像打包" class="headerlink" title="镜像打包"></a>镜像打包</h1><pre><code>commit imageName
tar -xzf imageName.tar -C mount_path .
</code></pre><h1 id="容器后台运行"><a href="#容器后台运行" class="headerlink" title="容器后台运行"></a>容器后台运行</h1><h6 id="原理：容器实际就是一个进程，当前运行命令的是主进程，容器是被当前主进程fork出来的子进程。子进程的结束和父进程的运行是一个异步过程。如果创建的子进程的父进程退出，那么子进程就会成为孤儿进程。为了避免孤儿进程退出时无法释放所占用的资源而僵死，进程号为1的进程init就会接受这些孤儿进程"><a href="#原理：容器实际就是一个进程，当前运行命令的是主进程，容器是被当前主进程fork出来的子进程。子进程的结束和父进程的运行是一个异步过程。如果创建的子进程的父进程退出，那么子进程就会成为孤儿进程。为了避免孤儿进程退出时无法释放所占用的资源而僵死，进程号为1的进程init就会接受这些孤儿进程" class="headerlink" title="原理：容器实际就是一个进程，当前运行命令的是主进程，容器是被当前主进程fork出来的子进程。子进程的结束和父进程的运行是一个异步过程。如果创建的子进程的父进程退出，那么子进程就会成为孤儿进程。为了避免孤儿进程退出时无法释放所占用的资源而僵死，进程号为1的进程init就会接受这些孤儿进程"></a>原理：容器实际就是一个进程，当前运行命令的是主进程，容器是被当前主进程fork出来的子进程。子进程的结束和父进程的运行是一个异步过程。如果创建的子进程的父进程退出，那么子进程就会成为孤儿进程。为了避免孤儿进程退出时无法释放所占用的资源而僵死，进程号为1的进程init就会接受这些孤儿进程</h6><pre><code>run -d
docker代码：如果是非&quot;-d&quot;模式，父进程等待子进程执行完成即可：parent.wait()
</code></pre><h1 id="查看运行中的容器"><a href="#查看运行中的容器" class="headerlink" title="查看运行中的容器"></a>查看运行中的容器</h1><pre><code>ps
</code></pre><h5 id="原理：将容器的信息写入一个日志文件中，当执行ps的时候，读取文件中的信息，使用fmt-Fprintf格式化输出到标准输出流缓存区"><a href="#原理：将容器的信息写入一个日志文件中，当执行ps的时候，读取文件中的信息，使用fmt-Fprintf格式化输出到标准输出流缓存区" class="headerlink" title="原理：将容器的信息写入一个日志文件中，当执行ps的时候，读取文件中的信息，使用fmt.Fprintf格式化输出到标准输出流缓存区"></a>原理：将容器的信息写入一个日志文件中，当执行ps的时候，读取文件中的信息，使用fmt.Fprintf格式化输出到标准输出流缓存区</h5><h1 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h1><pre><code>logs
</code></pre><h6 id="原理：如果是-d模式，将标准输出的信息写入到一个文件中，执行logs的时候，读取文件信息，使用fmt-Fprint输出"><a href="#原理：如果是-d模式，将标准输出的信息写入到一个文件中，执行logs的时候，读取文件信息，使用fmt-Fprint输出" class="headerlink" title="原理：如果是-d模式，将标准输出的信息写入到一个文件中，执行logs的时候，读取文件信息，使用fmt.Fprint输出"></a>原理：如果是-d模式，将标准输出的信息写入到一个文件中，执行logs的时候，读取文件信息，使用fmt.Fprint输出</h6><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><pre><code>exec
</code></pre><h6 id="原理：使用setns可以根据提供的pid进入指定的namespace中，需要先打开指定文件"><a href="#原理：使用setns可以根据提供的pid进入指定的namespace中，需要先打开指定文件" class="headerlink" title="原理：使用setns可以根据提供的pid进入指定的namespace中，需要先打开指定文件"></a>原理：使用setns可以根据提供的pid进入指定的namespace中，需要先打开指定文件</h6><h1 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h1><pre><code>stop
</code></pre><h6 id="原理：kill-pid"><a href="#原理：kill-pid" class="headerlink" title="原理：kill pid"></a>原理：kill pid</h6><h1 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h1><pre><code>rm
</code></pre><h6 id="原理：删除所有文件（容器文件，日志文件）"><a href="#原理：删除所有文件（容器文件，日志文件）" class="headerlink" title="原理：删除所有文件（容器文件，日志文件）"></a>原理：删除所有文件（容器文件，日志文件）</h6><h1 id="容器制作镜像"><a href="#容器制作镜像" class="headerlink" title="容器制作镜像"></a>容器制作镜像</h1><pre><code>commit
</code></pre><h6 id="原理：将指定的容器的文件，打包到固定的image-tar"><a href="#原理：将指定的容器的文件，打包到固定的image-tar" class="headerlink" title="原理：将指定的容器的文件，打包到固定的image.tar"></a>原理：将指定的容器的文件，打包到固定的image.tar</h6><pre><code>run --name container imageName
</code></pre><h6 id="原理：将指定的imageName解压，创建可写文件，挂载"><a href="#原理：将指定的imageName解压，创建可写文件，挂载" class="headerlink" title="原理：将指定的imageName解压，创建可写文件，挂载"></a>原理：将指定的imageName解压，创建可写文件，挂载</h6><h1 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h1><h6 id="ubuntu14-04下载"><a href="#ubuntu14-04下载" class="headerlink" title="ubuntu14.04下载"></a>ubuntu14.04下载</h6><p><a href="&quot;http://mirrors.163.com/ubuntu-releases/14.04/ubuntu-14.04.6-server-amd64.iso&quot;">ubuntu14.04下载地址</a></p>
<h6 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h6><pre><code>apt-get install bridge-utils
apt-get install gcc
apt-get install -y linux-tools-$(uname -r)
apt-get install stress
apt-get install cgroup-bin
</code></pre><h6 id="依赖包下载"><a href="#依赖包下载" class="headerlink" title="依赖包下载"></a>依赖包下载</h6><pre><code>go get github.com/Sirupsen/logrus
go get github.com/urfave/cli
go get github.com/vishvananda/netlink
go get github.com/vishvananda/netns
go get github.com/vishvananda/netlink/nl        
</code></pre><h6 id="golang-org-x包下载脚本（log）"><a href="#golang-org-x包下载脚本（log）" class="headerlink" title="golang.org/x包下载脚本（log）"></a>golang.org/x包下载脚本（log）</h6><pre><code>#!/usr/bin/env bash
#为了兼容windows下的bash
cd $GOPATH;
#创建 $GOPATH/src/golang.org/x 目录
mkdir -p $GOPATH/src/golang.org/x;

echo &quot;已经安装的golang.org/x package&quot;;
ls;
echo &quot;下面一行 for in 中包的名字您可以自己来定义&quot;
for name in &quot;glog&quot; &quot;image&quot; &quot;perf&quot; &quot;snappy&quot; &quot;term&quot; &quot;sync&quot; &quot;winstrap&quot; &quot;cwg&quot; &quot;leveldb&quot; &quot;text&quot; &quot;net&quot; &quot;build&quot; &quot;protobuf&quot; &quot;dep&quot; &quot;sys&quot; &quot;crypto&quot; &quot;gddo&quot; &quot;tools&quot; &quot;scratch&quot; &quot;proposal&quot; &quot;mock&quot; &quot;oauth2&quot; &quot;freetype&quot; &quot;debug&quot; &quot;mobile&quot; &quot;gofrontend&quot; &quot;lint&quot; &quot;appengine&quot; &quot;geo&quot; &quot;review&quot; &quot;arch&quot; &quot;vgo&quot; &quot;exp&quot; &quot;time&quot;;do
   cd $GOPATH/src/golang.org/x;
   if [ -d &quot;$name&quot; ]
   then
     cd $name;
     echo $name &quot;包已经存在,使用git pull来更新源码&quot;;
     git pull;
   else
     git_url=&quot;https://github.com/golang/${name}.git&quot;;
     echo &quot;开始clone golang.org/x 在github.com上的镜像代码:${git_url}&quot;;
     git clone --depth 1 &quot;$git_url&quot;;
     cd $name;
   fi
   #go install;
done
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><h6 id="挂载a目录到b目录（b目录的子目录被隐藏，所有的对b的修改都作用a上）"><a href="#挂载a目录到b目录（]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[vue-element-admin学习]]></title>
    <link href="http://www.cxyteam.com/2019/03/10/vue-element-admin%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.cxyteam.com/2019/03/10/vue-element-admin学习/</id>
    <published>2019-03-10T09:14:12.000Z</published>
    <updated>2019-03-10T15:09:15.441Z</updated>
    <content type="html"><![CDATA[<h1 id="基础文档学习"><a href="#基础文档学习" class="headerlink" title="基础文档学习"></a>基础文档学习</h1><ol>
<li><a href="&#39;https://cn.vuejs.org/v2/guide/installation.html&#39;">vue文档</a></li>
<li><a href="&#39;https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/#%E5%8A%9F%E8%83%BD&#39;">vue-element-admin文档</a></li>
</ol>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><a href="&#39;https://github.com/PanJiaChen/vue-element-admin&#39;">源码下载地址</a></li>
</ol>
<h1 id="运行流程（登录为例）"><a href="#运行流程（登录为例）" class="headerlink" title="运行流程（登录为例）"></a>运行流程（登录为例）</h1><ol>
<li><p>初始化(main.js)</p>
</li>
<li><p>查找路由(route/index.js)</p>
</li>
</ol>
<h6 id="定义路由-login-，对应视图-views-login-index"><a href="#定义路由-login-，对应视图-views-login-index" class="headerlink" title="定义路由(login)，对应视图(views/login/index)"></a>定义路由(login)，对应视图(views/login/index)</h6><pre><code>{
    path: &apos;/login&apos;,
    component: () =&gt; import(&apos;@/views/login/index&apos;),
    hidden: true
},
</code></pre><ol>
<li><p>查找’界面’ (views/login/index.vue)</p>
</li>
<li><p>查找store(store/modules/user.js)</p>
</li>
</ol>
<h6 id="调用store中定义的actions"><a href="#调用store中定义的actions" class="headerlink" title="调用store中定义的actions"></a>调用store中定义的actions</h6><pre><code>this.$store.dispatch(&apos;LoginByUsername&apos;, ......
</code></pre><ol>
<li>查找接口调用定义(api/login.js)</li>
</ol>
<h6 id="定义loginByUsername调用的接口地址"><a href="#定义loginByUsername调用的接口地址" class="headerlink" title="定义loginByUsername调用的接口地址"></a>定义loginByUsername调用的接口地址</h6><pre><code>export function loginByUsername(username, password) {
  const data = {
    username,
    password
  }
  return request({
    url: &apos;/user/login&apos;,
    method: &apos;post&apos;,
    data
  })
}
</code></pre><ol>
<li>遍历rule时判断(permission.js)<h6 id="定义遍历rule前具体代码"><a href="#定义遍历rule前具体代码" class="headerlink" title="定义遍历rule前具体代码"></a>定义遍历rule前具体代码</h6> router.beforeEach(……</li>
</ol>
<h1 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h1><h6 id="加载位置-main-js"><a href="#加载位置-main-js" class="headerlink" title="加载位置(main.js)"></a>加载位置(main.js)</h6><pre><code>import &apos;./mock&apos; //不需要mock的话，将这里注释
</code></pre><h6 id="mock的接口"><a href="#mock的接口" class="headerlink" title="mock的接口"></a>mock的接口</h6><pre><code>Mock.mock(/\/login\/login/, &apos;post&apos;, loginAPI.loginByUsername)
</code></pre><h6 id="mock具体数据-mock-login-js"><a href="#mock具体数据-mock-login-js" class="headerlink" title="mock具体数据(mock/login.js)"></a>mock具体数据(mock/login.js)</h6><pre><code>loginByUsername: config =&gt; {
    const { username } = JSON.parse(config.body)
    return userMap[username]
},
</code></pre><h6 id="修改为自己定义的host-dev-env-js"><a href="#修改为自己定义的host-dev-env-js" class="headerlink" title="修改为自己定义的host(dev.env.js)"></a>修改为自己定义的host(dev.env.js)</h6><pre><code>module.exports = {
  NODE_ENV: &apos;&quot;development&quot;&apos;,
  ENV_CONFIG: &apos;&quot;dev&quot;&apos;,
  BASE_API: &apos;&quot;http://demo.com/api&quot;&apos;
}
</code></pre><h6 id="设置跨域信息"><a href="#设置跨域信息" class="headerlink" title="设置跨域信息"></a>设置跨域信息</h6><pre><code>header(&apos;Access-Control-Allow-Origin:*&apos;);//生产环境记得对指定域名添加
header(&apos;Access-Control-Allow-Headers:Origin, Content-Type, Cookie, X-CSRF-TOKEN, Accept, Authorization, X-XSRF-TOKEN&apos;);
header(&apos;Access-Control-Expose-Headers:Authorization, authenticated&apos;);
header(&apos;Access-Control-Allow-Methods:GET, POST, PATCH, PUT, OPTIONS&apos;);
header(&apos;Access-Control-Allow-Credentials:true&apos;);        
</code></pre><blockquote>
<p><a href="https://www.jianshu.com/p/d3e3b21696e4" target="_blank" rel="external">https://www.jianshu.com/p/d3e3b21696e4</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基础文档学习"><a href="#基础文档学习" class="headerlink" title="基础文档学习"></a>基础文档学习</h1><ol>
<li><a href="&#39;https://cn.vuejs.org/v2/guide/inst]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[wayne源码学习]]></title>
    <link href="http://www.cxyteam.com/2019/03/05/wayne%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.cxyteam.com/2019/03/05/wayne源码学习/</id>
    <published>2019-03-05T03:34:43.000Z</published>
    <updated>2019-03-05T11:59:46.130Z</updated>
    <content type="html"><![CDATA[<h1 id="wayne开发环境部署"><a href="#wayne开发环境部署" class="headerlink" title="wayne开发环境部署"></a><a href="https://github.com/Qihoo360/wayne/wiki/Wayne-dev-develop-flow" target="_blank" rel="external">wayne开发环境部署</a></h1><ol>
<li>mac配置mysql的时候，需要配置成本地的ip，如果本地和docker同时启动了同一端口的mysql，需要注意区分好密码</li>
<li><a href="">wayne中使用到的路由规则</a></li>
<li>使用localhost:8080访问后端的接口，过程中进行<a href="https://github.com/dgrijalva/jwt-go" target="_blank" rel="external">jwt token</a>的验证，两种方式跳过验证</li>
</ol>
<ul>
<li>打开后端，查看对应的token值，然后使用postman发送请求<br><img src="/img/wayne/jwt_token.png" alt="Al text" title="查看token值"><br><img src="/img/wayne/postman.png" alt="Al text" title="postman发送请求"> </li>
</ul>
<p>glide<br>Travis CI<br>cobra command</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="wayne开发环境部署"><a href="#wayne开发环境部署" class="headerlink" title="wayne开发环境部署"></a><a href="https://github.com/Qihoo360/wayne/wiki/Wayne]]>
    </summary>
    
      <category term="k8s" scheme="http://www.cxyteam.com/tags/k8s/"/>
    
      <category term="k8s" scheme="http://www.cxyteam.com/categories/k8s/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2019年读书单]]></title>
    <link href="http://www.cxyteam.com/2019/02/18/2019%E5%B9%B4%E8%AF%BB%E4%B9%A6%E5%8D%95/"/>
    <id>http://www.cxyteam.com/2019/02/18/2019年读书单/</id>
    <published>2019-02-18T12:18:17.000Z</published>
    <updated>2019-03-20T05:25:32.592Z</updated>
    <content type="html"><![CDATA[<h1 id="三体"><a href="#三体" class="headerlink" title="三体"></a><a href="https://book.douban.com/subject/2567698/" target="_blank" rel="external">三体</a></h1><h6 id="2019-2-10-2019-2-17"><a href="#2019-2-10-2019-2-17" class="headerlink" title="2019.2.10-2019.2.17"></a><em>2019.2.10-2019.2.17</em></h6><ol>
<li>一本脑洞大开的科幻小说，看完这本书之后，能够理解很多科幻电影中的情节和概念</li>
<li>所有的一切共识，道德，约定，制度，法律都是基于解决了生存的基本问题，一旦生存问题没能解决，所有的一切都将被推翻</li>
<li>书太长了，往往陷入情节之中，一些想法到最后看完再总结就不那么清晰了，后面看书一定要有想法就事先记录</li>
</ol>
<h1 id="韭菜的自我修养"><a href="#韭菜的自我修养" class="headerlink" title="韭菜的自我修养"></a><a href="https://book.douban.com/subject/30314653/" target="_blank" rel="external">韭菜的自我修养</a></h1><h6 id="2019-2-17-2019-2-18"><a href="#2019-2-17-2019-2-18" class="headerlink" title="2019.2.17-2019.2.18"></a><em>2019.2.17-2019.2.18</em></h6><ol>
<li>认同建立止盈止损线，而且不是拍脑袋的</li>
<li>认同投资需要计算收益风险比，不过还是不会计算</li>
<li>股市是一个零和游戏还是一个正和游戏？</li>
<li>认同降低交易频率，频繁交易损耗手续费，不过港股打新好像不是这么回事</li>
<li>长线持有？A股市场真的适合吗？</li>
<li>这本书更多的是在将一些规则，并没有详细的告知为什么会这样，都是点到为止，感兴趣的点需要自己去深入阅读</li>
</ol>
<h1 id="零秒思考"><a href="#零秒思考" class="headerlink" title="零秒思考"></a><a href="https://book.douban.com/subject/26260187/" target="_blank" rel="external">零秒思考</a></h1><h6 id="2019-2-20-2019-2-20"><a href="#2019-2-20-2019-2-20" class="headerlink" title="2019.2.20-2019.2.20"></a><em>2019.2.20-2019.2.20</em></h6><p>最近一直在寻找深度思考，锻炼思维能力的方法，经过检索，找到了这本书，介绍了锻炼思维能力，整理思路的一个方法：”一分钟记笔记”，具体方法：</p>
<ol>
<li>笔记要求：用一页A4纸，横着摆着，在1分钟之内，围绕某一个标题，写4-6条想法，每条8-12个字，每天写10页</li>
<li>笔记格式：在顶部的左侧写上带下划线的标题；右边写上日期；正文出按序记录笔记，每一条开始前面打原点号</li>
<li>深入思考：对一个标题可以记录多次笔记；对于一个标题的笔记，可以作为下一个笔记的标题，深入挖掘</li>
<li>利用笔记：每隔5天对笔记进行分类整理，按主题整理成PPT</li>
</ol>
<h1 id="结构思考力"><a href="#结构思考力" class="headerlink" title="结构思考力"></a><a href="https://book.douban.com/subject/26145094/" target="_blank" rel="external">结构思考力</a></h1><h6 id="2019-2-22-2019-3-4"><a href="#2019-2-22-2019-3-4" class="headerlink" title="2019.2.22-2019.3.4"></a><em>2019.2.22-2019.3.4</em></h6><p>依然是关于思考和思维方面的书籍</p>
<ol>
<li>“汇报工作说结果，检讨工作说流程，请示工作说方案” 这句话说得很精辟</li>
<li>“总分结构”，结论先行</li>
<li>作者给出了很多的方式方法，各种缩写简写应该是想让读者更易记住吧，看到这么多的概念和缩写简写之后，发现好像什么也没看懂，什么也不记得了</li>
<li>财务人员做汇报的时候，被几个问题就问倒了；和我目前的做技术分享讨论的时候，很容易就被人家问倒，很容易就认同人家的说法是否是一个现象？没有站在参会这的角度思考问题？</li>
<li>﻿5w2h原则<br> What：是什么？做什么？目的是什么？<br> Why：为什么？为什么这样做？理由是什么？原因是什么？<br> Who：谁来做？谁来负责？由谁来承担？谁来完成？<br> When：什么时候开始做？什么时候完成？最佳时机是什么时候？﻿<br> Where：何处？在哪儿做？从哪儿入手做？<br> How：如何做？怎么去做？从哪儿入手做？<br> How much：做多少？完成量是多少？合格率是多少？费用是多少？</li>
<li>纵向结构分层次这一章：1、结论先行，才能吸引人，才能在短时间内表达完观点；2、抽象，总结，最后形成结论</li>
<li>值得再次阅读一遍，尤其是后面几章，需要碰到实际的例子来练习</li>
</ol>
<h1 id="金字塔原理"><a href="#金字塔原理" class="headerlink" title="金字塔原理"></a><a href="https://book.douban.com/subject/1020644/" target="_blank" rel="external">金字塔原理</a></h1><h6 id="2019-3-6-2019-3"><a href="#2019-3-6-2019-3" class="headerlink" title="2019.3.6-2019.3."></a><em>2019.3.6-2019.3.</em></h6><p>﻿<br>如果思想的组织方式是演绎推理，那么这些思想的逻辑顺序就是演绎顺序；如果思想按因果关系组织，那么其逻辑顺序就是时间顺序；如果是对某种现有结构进行评论，那么其逻辑顺序就是结构顺序；如果按类别组织思想，那么其逻辑顺序就是程度顺序（重要性顺序）<br>抽象思维、演化思维、分层思维、分治思维</p>
<h1 id="指数基金投资指南"><a href="#指数基金投资指南" class="headerlink" title="指数基金投资指南"></a><a href="https://book.douban.com/subject/27204860/" target="_blank" rel="external">指数基金投资指南</a></h1><h6 id="2019-3-12-2019-3-20"><a href="#2019-3-12-2019-3-20" class="headerlink" title="2019.3.12-2019.3.20"></a><em>2019.3.12-2019.3.20</em></h6><p>一本比较基础的指数基金投资方面的书籍。主要了解了各基金的品种，及特性；其实了解了衡量基金的一些指标。其中两种高估低估的方式，不是太理解。以及后续的基金定投方案不是太认同。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="三体"><a href="#三体" class="headerlink" title="三体"></a><a href="https://book.douban.com/subject/2567698/" target="_blank" rel="external]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[mac搭建《unix环境高级编程》环境]]></title>
    <link href="http://www.cxyteam.com/2019/01/16/mac%E6%90%AD%E5%BB%BA%E3%80%8Aunix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E3%80%8B%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.cxyteam.com/2019/01/16/mac搭建《unix环境高级编程》环境/</id>
    <published>2019-01-16T10:52:11.000Z</published>
    <updated>2019-01-17T03:27:33.762Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p><a href="http://www.apuebook.com/" target="_blank" rel="external">官网下载对应版本的源码</a></p>
</li>
<li><p>解压后，include/apue.h文件中的的最后一个#endif处添加#include “error.c”</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>    <span class="title">WAIT_CHILD</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"error.c"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* _APUE_H */</span></span></div></pre></td></tr></table></figure>
<ol>
<li>复制文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp include/apue.h /usr/include/</div><div class="line">cp lib/error.c /usr/include/</div></pre></td></tr></table></figure>
<ol>
<li><p>编译，运行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure>
</li>
<li><p>移动文件，出现权限不足的问题”Operation not permitted”</p>
</li>
</ol>
<p>a. macOS /usr/include 目录不存在,在终端运行 xcode-select –install,等待软件安装<br>b. 关机重启，按command + r 键进入恢复模式，注意不要被弹出框迷惑，直接在工具中选择命令行，键入 csrutil disable,提示成功后，键入reboot重启,再进行写入，记得修改完之后，设置回csrutil enable</p>
<ol>
<li>推荐博客</li>
</ol>
<p><a href="https://github.com/MeiK-h/apue" target="_blank" rel="external">整理好的随书代码</a>    </p>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p><a href="http://www.apuebook.com/" target="_blank" rel="external">官网下载对应版本的源码</a></p>
</li>
<li><p>解压后，include/apue.h文件中的的最后一个#e]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2018年个人总结]]></title>
    <link href="http://www.cxyteam.com/2019/01/02/2018%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://www.cxyteam.com/2019/01/02/2018年个人总结/</id>
    <published>2019-01-02T12:57:12.000Z</published>
    <updated>2019-01-03T13:14:45.322Z</updated>
    <content type="html"><![CDATA[<p>过去的一年时间里，收获了很多，也多了不少的迷茫。</p>
<ol>
<li>感情上，收获了爱情，并等待猪宝宝的降临</li>
<li>财务上，坚持定投，港股打新，学会看财报，为家人配置保险，信用卡积分</li>
<li>思想上，学会了一些适合自己的学习方法，及思维模式</li>
<li>技术上，应用docker-compose，及kubernetes管理容器，golang实战，redis源码阅读，自动发布文章</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>过去的一年时间里，收获了很多，也多了不少的迷茫。</p>
<ol>
<li>感情上，收获了爱情，并等待猪宝宝的降临</li>
<li>财务上，坚持定投，港股打新，学会看财报，为家人配置保险，信用卡积分</li>
<li>思想上，学会了一些适合自己的学习方法，及思维模式</l]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用kubeadm安装k8s]]></title>
    <link href="http://www.cxyteam.com/2018/12/20/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85k8s/"/>
    <id>http://www.cxyteam.com/2018/12/20/使用kubeadm安装k8s/</id>
    <published>2018-12-20T15:50:52.000Z</published>
    <updated>2018-12-27T14:20:43.326Z</updated>
    <content type="html"><![CDATA[<p>在安装前，最好事先准备好一个干净的环境，不然会浪费更多的时间，尤其是之前折腾过docker的一些环境。我因为之前安装过一个低版本的docker-ce，之后用yum进行升级之后，再去安装kubeadm，kubectl出现各种问题，最后放弃解决了。</p>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol>
<li>CentOS 7.6</li>
<li>Docker 18.06.1-ce</li>
<li>Kubernetes v1.13.1</li>
<li>virtualBox 5.0.38</li>
</ol>
<h3 id="机器"><a href="#机器" class="headerlink" title="机器"></a>机器</h3><ol>
<li>master：hostname：master.localdomain ip: 10.17.3.110</li>
</ol>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol>
<li>设置双核<br>注：k8s要求</li>
</ol>
<p>关闭虚拟机之后，设置-&gt;系统-&gt;处理器-&gt;设置为2</p>
<ol>
<li>关闭防火墙<br>关闭防火墙</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld</div><div class="line">systemctl disable firewalld</div></pre></td></tr></table></figure>
<p>禁用SELINUX</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setenforce 0</div><div class="line">sed -i &apos;s/SELINUX=permissive/SELINUX=disabled/&apos; /etc/sysconfig/selinux</div></pre></td></tr></table></figure>
<ol>
<li>关闭swap分区<br>注：k8s要求</li>
</ol>
<p>临时生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swapoff -a</div></pre></td></tr></table></figure>
<p>永久生效</p>
<p>在文件/etc/fstab中，删除”swap”这一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/mapper/cl-swap     swap                    swap    defaults        0 0</div></pre></td></tr></table></figure></p>
<ol>
<li>修改hostname<br>注： kubernetes 是根据 hostname 来标示各节点的</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo &quot;master.localdomain&quot; &gt; /etc/hostname</div><div class="line">echo &quot;10.17.3.110   master.localdomain&quot; &gt;&gt; /etc/hosts</div><div class="line">sysctl kernel.hostname=master.localdomain</div></pre></td></tr></table></figure>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ol>
<li>添加docker镜像</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/docker.repo</div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
<ol>
<li>安装依赖，添加镜像</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</div><div class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</div></pre></td></tr></table></figure>
<ol>
<li>查看最新的docker版本</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum makecache fast</div><div class="line">yum list docker-ce.x86_64  --showduplicates |sort -r</div></pre></td></tr></table></figure>
<ol>
<li>安装18.06.1<br>注：Kubernetes 1.12已经针对Docker的1.11.1, 1.12.1, 1.13.1, 17.03, 17.06, 17.09, 18.06等版本做了验证，需要注意Kubernetes 1.12最低支持的Docker版本是1.11.1</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y --setopt=obsoletes=0 \</div><div class="line">  docker-ce-18.06.1.ce-3.el7</div></pre></td></tr></table></figure>
<p>启动docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start docker</div><div class="line">systemctl enable docker</div></pre></td></tr></table></figure>
<p>验证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker -v</div></pre></td></tr></table></figure>
<p>确认一下iptables filter表中FOWARD链的默认策略(pllicy)为ACCEPT<br>注：Docker从1.13版本开始调整了默认的防火墙规则，禁用了iptables filter表中FOWARD链，这样会引起Kubernetes集群中跨Node的Pod无法通信</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -nvL</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Chain INPUT (policy ACCEPT 103 packets, 13250 bytes)</div><div class="line"> pkts bytes target     prot opt in     out     source               destination</div><div class="line">22366   18M KUBE-EXTERNAL-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes externally-visible service portals */</div><div class="line"> 817K  176M KUBE-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line"></div><div class="line"># 在这里，注意看</div><div class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</div><div class="line"> pkts bytes target     prot opt in     out     source               destination</div><div class="line">    0     0 KUBE-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */</div><div class="line">    0     0 DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">    0     0 DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">    0     0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</div><div class="line">    0     0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0</div><div class="line">    0     0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0</div><div class="line">    0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0</div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT 128 packets, 19058 bytes)</div><div class="line"> pkts bytes target     prot opt in     out     source               destination</div><div class="line">14698  884K KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes service portals */</div><div class="line"> 809K  159M KUBE-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div></pre></td></tr></table></figure>
<h3 id="安装kubelet-kubeadm-kubectl"><a href="#安装kubelet-kubeadm-kubectl" class="headerlink" title="安装kubelet,kubeadm,kubectl"></a>安装kubelet,kubeadm,kubectl</h3><ol>
<li>添加国内kubelet镜像</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</div><div class="line">[kubernetes]</div><div class="line">name=Kubernetes</div><div class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">repo_gpgcheck=1</div><div class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
<ol>
<li>修改网络开启桥接网络支持，只针对（RHEL/CentOS 7）系统<br>注：配置转发相关参数，否则可能会出错</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</div><div class="line">net.bridge.bridge-nf-call-ip6tables = 1</div><div class="line">net.bridge.bridge-nf-call-iptables = 1</div><div class="line">net.ipv4.ip_forward = 1</div><div class="line">vm.swappiness=0</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>执行命令使其生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">modprobe br_netfilter</div><div class="line">sysctl -p /etc/sysctl.d/k8s.conf</div></pre></td></tr></table></figure>
<ol>
<li>安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y kubelet kubeadm kubectl ipvsadm</div></pre></td></tr></table></figure>
<ol>
<li>配置kubelet和docker的cgroups一致</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DOCKER_CGROUPS=$(docker info | grep &apos;Cgroup&apos; | cut -d&apos; &apos; -f3)</div><div class="line">echo $DOCKER_CGROUPS</div><div class="line">cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF</div><div class="line">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=$DOCKER_CGROUPS --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&quot;</div><div class="line">EOF</div></pre></td></tr></table></figure>
<ol>
<li>启动<br>注：这个时候查看版本或者kubectl都会报错”The connection to the server localhost:8080 was refused<br>“，不要担心，接着走后面的流程</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl enable kubelet &amp;&amp; systemctl restart kubelet</div></pre></td></tr></table></figure>
<h3 id="启动master"><a href="#启动master" class="headerlink" title="启动master"></a>启动master</h3><ol>
<li>kubeadm初始化<br>注：见到这个文字就表示成功了”Your Kubernetes master has initialized successfully!”<br>如果失败了，执行kubeadm reset删除之前的一些文件，再进行kubeadm init</li>
</ol>
<p>因为我们选择flannel作为Pod网络插件，所以上面的命令指定–pod-network-cidr=10.244.0.0/16</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubeadm init --kubernetes-version=v1.13.1 --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.17.3.110</div></pre></td></tr></table></figure>
<ol>
<li>按照successfully提示执行后续命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p $HOME/.kube</div><div class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</div><div class="line">chown $(id -u):$(id -g) $HOME/.kube/config</div></pre></td></tr></table></figure>
<ol>
<li>验证</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kubectl version</div><div class="line">kubectl get nodes</div></pre></td></tr></table></figure>
<h3 id="添加flannel网络"><a href="#添加flannel网络" class="headerlink" title="添加flannel网络"></a>添加flannel网络</h3><ol>
<li><p>下载yml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</div></pre></td></tr></table></figure>
</li>
<li><p>添加iface启动参数<br>注：有多个网卡的话，需要在kube-flannel.yml中使用–iface参数指定集群主机内网网卡的名称，否则可能会出现dns无法解析。比如我是用的virtualBox，存在多个网卡，使用的是enp0s3网卡，所以修改如下（因为yaml文件创建5个针对不同平台的DaemonSet，所以最好是都改了）</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">containers:</span></div><div class="line"><span class="attr">  - name:</span> kube-flannel</div><div class="line"><span class="attr">    image:</span> quay.io/coreos/flannel:v0<span class="number">.10</span><span class="number">.0</span>-amd64</div><div class="line"><span class="attr">    command:</span></div><div class="line"><span class="bullet">    -</span> /opt/bin/flanneld</div><div class="line"><span class="attr">    args:</span></div><div class="line"><span class="bullet">    -</span> --ip-masq</div><div class="line"><span class="bullet">    -</span> --kube-subnet-mgr</div><div class="line"><span class="bullet">    -</span> --iface=enp0s3</div></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl apply -f  kube-flannel.yml</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="添加node节点"><a href="#添加node节点" class="headerlink" title="添加node节点"></a>添加node节点</h3><ol>
<li>添加节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubeadm join 10.17.3.110:6443 --token vh535w.c4abw601jzuxt7su --discovery-token-ca-cert-hash sha256:25bf91dd3e69f0bfe1f5600f0ac56633ed5c58ca89d906b6cad611eb01e04356</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="测试网络"><a href="#测试网络" class="headerlink" title="测试网络"></a>测试网络</h3><ol>
<li><p>创建测试development</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl run curl --image=radial/busyboxplus:curl -it</div></pre></td></tr></table></figure>
</li>
<li><p>在容器中执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup kubernetes.default</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Server:    10.96.0.10</div><div class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</div><div class="line"></div><div class="line">Name:      kubernetes.default</div><div class="line">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</div><div class="line"></div><div class="line">kubectl delete deployment curl</div></pre></td></tr></table></figure>
<ol>
<li>删除<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl delete deployment curl</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h3><ol>
<li>查看集群状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl get cs</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NAME                 STATUS    MESSAGE              ERROR</div><div class="line">scheduler            Healthy   ok</div><div class="line">controller-manager   Healthy   ok</div><div class="line">etcd-0               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>查看node状态<br>注：刚执行完添加节点命令后，可以稍等下再去查看<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl get nodes</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NAME                 STATUS   ROLES    AGE     VERSION</div><div class="line">kubeadm-node1        Ready    &lt;none&gt;   8m36s   v1.13.1</div><div class="line">master.localdomain   Ready    master   15m     v1.13.1</div></pre></td></tr></table></figure></p>
<ol>
<li>查看pod状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl -n kube-system get pod --all-namespaces</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">NAMESPACE     NAME                                         READY   STATUS    RESTARTS   AGE</div><div class="line">kube-system   coredns-86c58d9df4-tjcdl                     1/1     Running   0          12m</div><div class="line">kube-system   coredns-86c58d9df4-vzf95                     1/1     Running   0          12m</div><div class="line">kube-system   etcd-master.localdomain                      1/1     Running   0          12m</div><div class="line">kube-system   kube-apiserver-master.localdomain            1/1     Running   0          12m</div><div class="line">kube-system   kube-controller-manager-master.localdomain   1/1     Running   0          12m</div><div class="line">kube-system   kube-flannel-ds-amd64-6zvwg                  1/1     Running   5          6m2s</div><div class="line">kube-system   kube-flannel-ds-amd64-q62rd                  1/1     Running   0          9m47s</div><div class="line">kube-system   kube-proxy-8dlpf                             1/1     Running   0          12m</div><div class="line">kube-system   kube-proxy-xcwhj                             1/1     Running   0          6m2s</div><div class="line">kube-system   kube-scheduler-master.localdomain            1/1     Running   0          12m</div></pre></td></tr></table></figure></p>
<h3 id="其他注意项"><a href="#其他注意项" class="headerlink" title="其他注意项"></a>其他注意项</h3><ol>
<li><p>初始化master节点（kubeadm init）失败后，使用”kubeadm reset”回到初始化之前的状态，再次进行初始化</p>
</li>
<li><p>master初始化成功后，没有记录node加入集群的命令（kubectl join）<br>简单方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubeadm token create --print-join-command</div></pre></td></tr></table></figure>
</li>
</ol>
<p>第二种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">token=$(kubeadm token generate)</div><div class="line">kubeadm token create $token --print-join-command --ttl=0</div></pre></td></tr></table></figure></p>
<p>token 是使用指令 kubeadm token generate 生成的，执行过程如有异常，用命令kubeadm reset 初始化后重试，生成的 token 有效时间为 24 小时，超过 24 小时后需要重新使用命令 kubeadm token create 创建新的 token。<br>discovery-token-ca-cert-hash 的值可以使用命令查看，命令：openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed ‘s/^.* //‘</p>
<ol>
<li>查看kube-system日志</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl -n kube-system logs kube-controller-manager-master.localdomain</div></pre></td></tr></table></figure>
<ol>
<li>重新部署node</li>
</ol>
<p>在集群中删除node信息（在master执行）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kubectl drain &lt;node_name&gt; --delete-local-data --force --ignore-daemonsets</div><div class="line">kubectl delete node &lt;node_name&gt;</div></pre></td></tr></table></figure></p>
<p>node删除flannel网段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">kubeadm reset</div><div class="line">ifconfig cni0 down</div><div class="line">ip link delete cni0</div><div class="line">ifconfig flannel.1 down</div><div class="line">ip link delete flannel.1</div><div class="line">rm -rf /var/lib/cni/</div></pre></td></tr></table></figure></p>
<ol>
<li>节点状态不正确<br>查看日志</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">journalctl -u kubelet</div></pre></td></tr></table></figure>
<p>查看kubelet状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status kubelet</div></pre></td></tr></table></figure></p>
<ol>
<li>其他节点管理集群<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp root@&lt;master_ip&gt;:/etc/kubernetes/admin.conf .</div><div class="line">kubectl --kubeconfig ./admin.conf get nodes</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：<br>当使用systemctl start kubelet失败的时候，可以使用”systemctl status kubelet -l”，”journalctl -xeu kubelet<br>“查看详细信息</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://github.com/youngperson/study-100/wiki/kubeadm%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4" title="亮亮的k8s搭建" target="_blank" rel="external">亮亮的k8s搭建</a><br><a href="https://github.com/HikoQiu/kubeadm-install-k8s" title="kubeadm-install-k8s" target="_blank" rel="external">kubeadm-install-k8s</a><br><a href="https://www.kubernetes.org.cn/4256.html" title="centos7使用kubeadm安装kubernetes 1.11版本多主高可用" target="_blank" rel="external">centos7使用kubeadm安装kubernetes 1.11版本多主高可用</a><br><a href="https://www.kubernetes.org.cn/4619.html" title="使用kubeadm安装Kubernetes 1.12" target="_blank" rel="external">使用kubeadm安装Kubernetes 1.12</a><br><a href="https://blog.csdn.net/aixiaoyang168/article/details/78411511" title="国内使用 kubeadm 在 Centos 7 搭建 Kubernetes 集群" target="_blank" rel="external">国内使用 kubeadm 在 Centos 7 搭建 Kubernetes 集群</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在安装前，最好事先准备好一个干净的环境，不然会浪费更多的时间，尤其是之前折腾过docker的一些环境。我因为之前安装过一个低版本的docker-ce，之后用yum进行升级之后，再去安装kubeadm，kubectl出现各种问题，最后放弃解决了。</p>
<h3 id="搭建]]>
    </summary>
    
      <category term="k8s" scheme="http://www.cxyteam.com/tags/k8s/"/>
    
      <category term="k8s" scheme="http://www.cxyteam.com/categories/k8s/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yaml的使用]]></title>
    <link href="http://www.cxyteam.com/2018/12/09/yaml%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2018/12/09/yaml的使用/</id>
    <published>2018-12-09T09:15:04.000Z</published>
    <updated>2018-12-09T10:08:53.190Z</updated>
    <content type="html"><![CDATA[<p>Yaml是专门用来编写配置文件的，非常的简洁强大</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>大小写敏感</p>
<p>使用缩进表示层级关系</p>
<p>缩进时不允许使用Tab键，只允许使用空格。</p>
<p>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</p>
<p>使用#表示注释，从这个字符一直到行尾，都会被解析器忽略</p>
<p>yaml一共三种结构</p>
<ol>
<li>Lists（数组）</li>
<li>Maps（对象）</li>
<li>scalars（存量）</li>
</ol>
<h1 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h1><p>一组连线开头的行，构成一个数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">command</div><div class="line">    - &apos;sh&apos;</div><div class="line">    - &apos;cmd&apos;</div></pre></td></tr></table></figure></p>
<p>用json表示则是<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"command"</span>:['sh', 'cmd']</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h1><p>一组键值对，使用冒号结构表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kind:Pod</div></pre></td></tr></table></figure></p>
<p>使用json表示则是<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"kind"</span>:<span class="string">"pod"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="组合方式"><a href="#组合方式" class="headerlink" title="组合方式"></a>组合方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">spec:</div><div class="line">  restartPolicy: Always</div><div class="line">  nodeSelector:</div><div class="line">    zone: node1</div><div class="line">  containers:</div><div class="line">  - name: web01-pod</div><div class="line">    image: sunnysmilez/php</div><div class="line">    imagePullPolicy: Never</div></pre></td></tr></table></figure>
<p>使用json表示<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"spec"</span> : &#123;</div><div class="line">    <span class="attr">"restartPolicy"</span>:<span class="string">"Always"</span>,</div><div class="line">    <span class="attr">"nodeSelector"</span>:&#123;</div><div class="line">      <span class="attr">"zone"</span>:<span class="string">"node1"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"containers"</span>:[&#123;</div><div class="line">        <span class="attr">"name"</span>:<span class="string">"web01-pod"</span>,</div><div class="line">        <span class="attr">"image"</span>:<span class="string">"sunnysmilez/php"</span>,</div><div class="line">        <span class="attr">"imagePullPolicy"</span>:<span class="string">"Never"</span></div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Yaml是专门用来编写配置文件的，非常的简洁强大</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>大小写敏感</p>
<p>使用缩进表示层级关系</p>
<p]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[k8s使用yaml搭建lnmp]]></title>
    <link href="http://www.cxyteam.com/2018/12/07/k8s%E4%BD%BF%E7%94%A8yaml%E6%90%AD%E5%BB%BAlnmp/"/>
    <id>http://www.cxyteam.com/2018/12/07/k8s使用yaml搭建lnmp/</id>
    <published>2018-12-07T05:31:44.000Z</published>
    <updated>2019-04-17T16:10:16.398Z</updated>
    <content type="html"><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>「mac+minikube」</p>
<ol>
<li>mac10.13.6</li>
<li>minikube version:v0.30.0</li>
<li>kubectl version</li>
</ol>
<pre><code>Client Version: version.Info{Major:&quot;1&quot;, Minor:&quot;10&quot;, GitVersion:&quot;v1.10.3&quot;, GitCommit:&quot;2bba0127d85d5a46ab4b778548be28623b32d0b0&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2018-05-21T09:17:39Z&quot;, GoVersion:&quot;go1.9.3&quot;, Compiler:&quot;gc&quot;, Platform:&quot;darwin/amd64&quot;}
</code></pre><h1 id="搭建架构图"><a href="#搭建架构图" class="headerlink" title="搭建架构图"></a>搭建架构图</h1><p><a href="https://github.com/SunnySmilez/k8s/tree/master/lnmp" target="_blank" rel="external">项目搭建源码</a></p>
<p><img src="/img/k8s/lnmp.png" alt="k8s搭建lnmp服务架构图" title="lnmp"></p>
<p>在搭建之前先了解几个知识点：</p>
<ul>
<li>pod节点通过service暴露端口提供外部访问<br>可以设置type=”NodePort”，访问：<a href="http://nodeip:nodePort" target="_blank" rel="external">http://nodeip:nodePort</a></li>
</ul>
<p>「nodeip可以使用minikube ip获得；nodePort在service中指定」</p>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types" target="_blank" rel="external">service type文档</a></p>
<ul>
<li>内部服务之间通信，使用服务名称即可，最终转换成cluster ip</li>
</ul>
<p>「服务名称在service中设置；cluster ip 可以使用kubectl get service获取」</p>
<ul>
<li><p>service通过selector关联到对应的pod</p>
</li>
<li><p>deployment中可以设置image地址来指定镜像</p>
</li>
</ul>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ul>
<li><p>创建php镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -f  ./php/build/Dockerfile -t test-php .</div></pre></td></tr></table></figure>
</li>
<li><p>创建nginx镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd nginx/build</div><div class="line">docker build -t test-nginx .</div></pre></td></tr></table></figure>
</li>
<li><p>创建php服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kubectl create -f lnmp/php/deployment.yaml </div><div class="line">kubectl create -f lnmp/php/serverce.yaml</div></pre></td></tr></table></figure>
</li>
<li><p>创建nginx服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kubectl create -f lnmp/nginx/deployment.yaml</div><div class="line">kubectl create -f lnmp/nginx/serverce.yaml</div></pre></td></tr></table></figure>
</li>
<li><p>测试服务连通性</p>
</li>
</ul>
<p>获取本地ip</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">minikube ip</div></pre></td></tr></table></figure>
<p>编辑/etc/hosts文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test.com minikube输出的ip值</div></pre></td></tr></table></figure>
<p>访问输出hello world</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export NODE_PORT=$(kubectl get services/test-nginx  -o go-template=&apos;&#123;&#123;(index .spec.ports 0).nodePort&#125;&#125;&apos;)</div><div class="line">echo NODE_PORT=$NODE_PORT</div><div class="line">curl test.com:$NODE_PORT</div></pre></td></tr></table></figure>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h3 id="pod启动问题"><a href="#pod启动问题" class="headerlink" title="pod启动问题"></a>pod启动问题</h3><ul>
<li>定位pod问题</li>
</ul>
<p>查看pod日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl logs &#123;pod name&#125;</div></pre></td></tr></table></figure></p>
<p>查看pod的event日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl describe pods &#123;pod-name&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>镜像拉取失败<br>登录到虚拟主机，拉取镜像进行测试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">minikube ssh</div><div class="line">docker pull image_name</div></pre></td></tr></table></figure>
<ul>
<li>实例化镜像失败<br>登录到虚拟主机，创建容器，查看具体信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">minikube ssh</div><div class="line">docker run -itd --name=test test_nginx /bin/bash</div></pre></td></tr></table></figure>
<h3 id="外部访问不通"><a href="#外部访问不通" class="headerlink" title="外部访问不通"></a>外部访问不通</h3><ul>
<li>确认访问地址正确，上图3位置</li>
</ul>
<p>查看访问日志，确认请求达到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl exec -it &#123;pod name&#125; /bin/bash</div></pre></td></tr></table></figure>
<ul>
<li>确认service，deployment关联正确，上图2位置</li>
</ul>
<p>确认service能选择到pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl get pod --selector=&quot;app=test-nginx&quot;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>确认nginx和php服务通信正常，上图4位置</p>
<p>  登录nginx的pod节点，ping service_name</p>
<p>  如果不通，对比ping显示的ip和php服务的service对应的cluster ip</p>
<p>  如果对应不上，重新走一遍创建整个服务流程</p>
</li>
<li><p>调试过程中，需要安装一些软件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install -y &#123;soft name&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>「mac+minikube」</p>
<ol>
<li>mac10.13.6</li>
<li>minikube versi]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[beego使用示例]]></title>
    <link href="http://www.cxyteam.com/2018/11/28/beego%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://www.cxyteam.com/2018/11/28/beego使用示例/</id>
    <published>2018-11-28T12:43:25.000Z</published>
    <updated>2018-11-28T16:25:56.036Z</updated>
    <content type="html"><![CDATA[<h1 id="安装beego框架"><a href="#安装beego框架" class="headerlink" title="安装beego框架"></a>安装beego框架</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/astaxie/beego</div></pre></td></tr></table></figure>
<h1 id="创建项目：beego"><a href="#创建项目：beego" class="headerlink" title="创建项目：beego"></a>创建项目：beego</h1><ul>
<li>创建</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bee new beego</div></pre></td></tr></table></figure>
<ul>
<li>生成如下目录结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── conf</div><div class="line">│   └── app.conf</div><div class="line">├── controllers</div><div class="line">│   └── default.go</div><div class="line">├── main.go</div><div class="line">├── models</div><div class="line">├── routers</div><div class="line">│   └── router.go</div><div class="line">├── static</div><div class="line">│   ├── css</div><div class="line">│   ├── img</div><div class="line">│   └── js</div><div class="line">│       └── reload.min.js</div><div class="line">├── tests</div><div class="line">│   └── default_test.go</div><div class="line">└── views</div><div class="line">    └── index.tpl</div></pre></td></tr></table></figure>
<h1 id="优雅的使用beego"><a href="#优雅的使用beego" class="headerlink" title="优雅的使用beego"></a>优雅的使用beego</h1><p>注：示例代码见文末链接</p>
<ol>
<li><p>代码分层</p>
<ul>
<li><p>controller：业务流程封装层</p>
</li>
<li><p>service：业务封装层</p>
</li>
<li><p>model：数据层</p>
<ul>
<li><p>data：数据逻辑层</p>
</li>
<li><p>dao：数据操作层</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>举个例子(客服端付款方式)：购买商品分为这么几个业务逻辑：</p>
<ol>
<li><p>本地添加订单记录 </p>
</li>
<li><p>向支付中心发起支付请求 </p>
</li>
<li><p>更新本地订单状态 </p>
</li>
<li><p>下发支付参数</p>
</li>
</ol>
<p>对于三个层要做的事情分别是：</p>
<ul>
<li><p>dao层</p>
<ol>
<li><p>mysql中订单表添加操作 </p>
</li>
<li><p>mysql中订单状态更新操作 </p>
</li>
<li><p>对应缓存操作 </p>
</li>
<li><p>其他附属表及缓存的操作</p>
</li>
</ol>
</li>
<li><p>data层</p>
<ol>
<li><p>提供订单添加操作（mysql+redis） </p>
</li>
<li><p>提供订单表的状态更新操作（mysql+redis）</p>
</li>
</ol>
</li>
<li><p>servic层</p>
<ol>
<li><p>封装一个本地添加订单的逻辑（包含订单表+其他表） </p>
</li>
<li><p>封装一个请求支付成功的业务方法 </p>
</li>
<li><p>封装支付中心请求下单接口</p>
</li>
</ol>
</li>
<li><p>controller层</p>
<ol>
<li>先本地下单（service中的1方法）-&gt; 向支付中心下单 -&gt; 更新订单状态（service中2方法）</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">├── controllers</div><div class="line">│   └── order.go</div><div class="line">├── models</div><div class="line">│   ├── dao</div><div class="line">│   │   ├── mysql</div><div class="line">│   │   │   └── order.go</div><div class="line">│   │   └── redis</div><div class="line">│   │       └── order.go</div><div class="line">│   └── data</div><div class="line">│       └── order.go</div><div class="line">├── service</div><div class="line">│   └── order.go</div></pre></td></tr></table></figure>
<ol>
<li>配置文件的使用<br>注:pro定义线上配置;dev为测试配置;发布代码时定义钩子;用pro替换app</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├── conf</div><div class="line">│   ├── app.conf</div><div class="line">│   ├── dev.conf</div><div class="line">│   └── pro.conf</div></pre></td></tr></table></figure>
<ol>
<li>使用定时脚本</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">├── tasks</div><div class="line">│   └── test.go</div></pre></td></tr></table></figure>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bee run</div></pre></td></tr></table></figure>
<h1 id="部署及发布"><a href="#部署及发布" class="headerlink" title="部署及发布"></a>部署及发布</h1><ol>
<li>编译beego</li>
</ol>
<ul>
<li>使用go build，最后会生成一个main的二进制文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build main.go</div></pre></td></tr></table></figure>
<ul>
<li>使用beego，最后生成和项目名称相同的二进制文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">beego run</div></pre></td></tr></table></figure>
<p>注意：如果是在mac环境开发编译，在linux运行会报错，需要使用以下方式在mac编译<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</div></pre></td></tr></table></figure></p>
<ol>
<li>部署beego</li>
</ol>
<ul>
<li><p>go编译生产的的二进制文件</p>
</li>
<li><p>静态文件</p>
<ul>
<li>conf</li>
<li>static</li>
<li>views</li>
</ul>
</li>
<li><p>假设data是待发布目录</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cp -R main  data</div><div class="line"></div><div class="line">cp -R beego/conf data</div><div class="line"></div><div class="line">cp -R beego/static data</div><div class="line"></div><div class="line">cp -R beego/views data</div><div class="line"></div><div class="line">tar -zcvf data.tar.gz data</div><div class="line"></div><div class="line">scp data.tar.gz online:/tmp</div></pre></td></tr></table></figure>
<ol>
<li>运行go</li>
</ol>
<ul>
<li><p>后台运行</p>
<ul>
<li>go进程down掉，无法监控重启<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup ./main &amp;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用supervisor</p>
<ul>
<li>可对go进程进行监控并重启等</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://beego.me/docs" target="_blank" rel="external">beego文档</a></p>
<p><a href="https://github.com/SunnySmilez/Golang/tree/master/beego" target="_blank" rel="external">代码示例</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装beego框架"><a href="#安装beego框架" class="headerlink" title="安装beego框架"></a>安装beego框架</h1><figure class="highlight bash"><table><tr><td]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[k8s]]></title>
    <link href="http://www.cxyteam.com/2018/11/26/k8s/"/>
    <id>http://www.cxyteam.com/2018/11/26/k8s/</id>
    <published>2018-11-26T05:10:16.000Z</published>
    <updated>2019-04-23T16:13:37.457Z</updated>
    <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><pre><code>https://github.com/kubernetes/kubernetes
https://github.com/kubernetes/minikube
http://docs.kubernetes.org.cn/475.html
</code></pre><h1 id="安装minikube"><a href="#安装minikube" class="headerlink" title="安装minikube"></a>安装minikube</h1><pre><code>https://github.com/kubernetes/minikube
</code></pre><p>查看版本号    </p>
<pre><code>kubectl version
</code></pre><p>启动minikube</p>
<pre><code>minikube start
</code></pre><p>查看集群信息</p>
<pre><code>kubectl cluster-info
</code></pre><p>查看集群下的所有节点</p>
<pre><code>kubectl get nodes

错误：
    The connection to the server 192.168.99.100:8443 was refused - did you specify the right host or port?

    先启动：minikube start
</code></pre><p>创建一个节点</p>
<pre><code>kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080
</code></pre><p>查看节点</p>
<pre><code>kubectl get deployments
</code></pre><p>启动应用？</p>
<pre><code>kubectl proxy
</code></pre><p>环境变量设置POD_NAME</p>
<pre><code>export POD_NAME=$(kubectl get pods -o go-template --template &apos;{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}&apos;)
echo Name of the Pod: $POD_NAME
http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/
</code></pre><p>获取所有的pod信息</p>
<pre><code>kubectl get pods
kubectl get services
</code></pre><p>查看pod的详情信息</p>
<pre><code>kubectl describe pods
kubectl describe services
kubectl describe deployment
</code></pre><p>查看pod的日志</p>
<pre><code>kubectl logs $POD_NAME
</code></pre><p>pod中执行命令</p>
<pre><code>kubectl exec $POD_NAME env
</code></pre><p>进入pod</p>
<pre><code>kubectl exec -it $POD_NAME bash
</code></pre><p>发布对外提供服务的service</p>
<pre><code>kubectl expose deployment/kubernetes-bootcamp --type=&quot;NodePort&quot; --port 8080
查看服务详细信息        
kubectl describe services/kubernetes-bootcamp
export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template=&apos;{{(index .spec.ports 0).nodePort}}&apos;)
echo $NODE_PORT
curl $(minikube ip):$NODE_PORT
</code></pre><h1 id="生成pod的yaml文件"><a href="#生成pod的yaml文件" class="headerlink" title="生成pod的yaml文件"></a>生成pod的yaml文件</h1><pre><code>kubectl get pod web01 -o yaml
</code></pre><h1 id="给pod打标签"><a href="#给pod打标签" class="headerlink" title="给pod打标签"></a>给pod打标签</h1><p>通过标签，查看指定的pods</p>
<pre><code>kubectl get pods -l run=kubernetes-bootcamp
kubectl get service -l run=kubernetes-bootcamp
</code></pre><p>pod的name写入环境变量</p>
<pre><code>export POD_NAME=$(kubectl get pods -o go-template --template &apos;{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}&apos;)
echo Name of the Pod: $POD_NAME
</code></pre><p>打新标签    </p>
<pre><code>kubectl label pod $POD_NAME app=v1
</code></pre><p>查看标签是否生效</p>
<pre><code>kubectl describe pods $POD_NAME
</code></pre><p>用新标签获取信息</p>
<pre><code>kubectl get pods -l app=v1
</code></pre><p>通过标签删除service</p>
<pre><code>kubectl delete services -l  run=kubernetes-bootcamp            
</code></pre><h1 id="扩展应用程序"><a href="#扩展应用程序" class="headerlink" title="扩展应用程序"></a>扩展应用程序</h1><p>查看deployments</p>
<pre><code>kubectl get deployments
</code></pre><p>扩展4个deployment</p>
<pre><code>kubectl scale deployments/kubernetes-bootcamp --replicas=4
</code></pre><p>验证</p>
<pre><code>kubectl get deployments         
</code></pre><p>查看pod</p>
<pre><code>kubectl get pods -o wide    
</code></pre><p>查看所有的命名空间下的pods</p>
<pre><code>kubectl get pods --all-namespaces
</code></pre><p>查看deployment日志</p>
<pre><code>kubectl describe deployments/kubernetes-bootcamp
</code></pre><h1 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h1><p>查看ip信息</p>
<pre><code>kubectl describe services/kubernetes-bootcamp
</code></pre><p>端口信息写入环境变量</p>
<pre><code>export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template=&apos;{{(index .spec.ports 0).nodePort}}&apos;)
echo NODE_PORT=$NODE_PORT    
</code></pre><p>查看是否Load Balancing</p>
<pre><code>curl $(minikube ip):$NODE_PORT
</code></pre><h1 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h1><p>查看pod信息（主要看Image选项）</p>
<pre><code>kubectl describe pods    
</code></pre><p>设置image为新版本</p>
<pre><code>kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
</code></pre><p>查看pod信息（已使用新的image）</p>
<pre><code>kubectl describe pods    
</code></pre><p>请求应用，看是否都更新完成    </p>
<pre><code>kubectl describe services/kubernetes-bootcamp
export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template=&apos;{{(index .spec.ports 0).nodePort}}&apos;)
echo NODE_PORT=$NODE_PORT
curl $(minikube ip):$NODE_PORT
</code></pre><p>通过命令确认</p>
<pre><code>kubectl rollout status deployments/kubernetes-bootcamp
</code></pre><h1 id="回滚更新"><a href="#回滚更新" class="headerlink" title="回滚更新"></a>回滚更新</h1><p>更新错误版本</p>
<pre><code>kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=gcr.io/google-samples/kubernetes-bootcamp:v10
</code></pre><p>查看deployments</p>
<pre><code>kubectl get deployments
</code></pre><p>查看pod状态（ErrImagePull）</p>
<pre><code>kubectl get pods
</code></pre><p>查看详情（image不对，但是还是这个images地址）</p>
<pre><code>kubectl describe pods
</code></pre><p>回滚更新</p>
<pre><code>kubectl rollout undo deployments/kubernetes-bootcamp
</code></pre><p>查看pod状态（Running）</p>
<pre><code>kubectl get pods        
</code></pre><p>查看pod版本（v2）</p>
<pre><code>kubectl describe pods
</code></pre><h1 id="deployments操作"><a href="#deployments操作" class="headerlink" title="deployments操作"></a>deployments操作</h1><p>通过文件创建deployments</p>
<pre><code>kubectl apply -f ngnix_deployment.yaml

nginx_deployment.yaml内容：

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
</code></pre><p>列出deployment创建的pod</p>
<pre><code>kubectl get pods -l app=nginx            
</code></pre><p>查出指定pod信息</p>
<pre><code>kubectl describe pod &lt;pod_name&gt;
</code></pre><p>删除deployment</p>
<pre><code>kubectl delete deployment nginx-deployment        
</code></pre><h1 id="service进行负载均衡"><a href="#service进行负载均衡" class="headerlink" title="service进行负载均衡"></a>service进行负载均衡</h1><p>创建deployments</p>
<pre><code>kubectl run hello-world --replicas=2 --labels=&quot;run=load-balancer-example&quot; --image=gcr.io/google-samples/node-hello:1.0  --port=8080
</code></pre><p>查看deployments信息</p>
<pre><code>kubectl get deployments hello-world
kubectl describe deployments hello-world
</code></pre><p>显示ReplicaSet信息</p>
<pre><code>kubectl get replicasets
kubectl describe replicasets
</code></pre><p>创建暴露deployments的service</p>
<pre><code>kubectl expose deployment hello-world --type=NodePort --name=example-service
</code></pre><p>列出运行Hello World应用程序的pod</p>
<pre><code>kubectl get pods --selector=&quot;run=load-balancer-example&quot; --output=wide
</code></pre><p>查看公网ip</p>
<pre><code>export NODE_PORT=$(kubectl get services/example-service  -o go-template=&apos;{{(index .spec.ports 0).nodePort}}&apos;)
echo NODE_PORT=$NODE_PORT
curl $(minikube ip):$NODE_PORT
</code></pre><h1 id="查看集群中所有的Container"><a href="#查看集群中所有的Container" class="headerlink" title="查看集群中所有的Container"></a>查看集群中所有的Container</h1><p>方法一</p>
<pre><code>kubectl get pods --all-namespaces -o jsonpath=&quot;{..image}&quot; |\
tr -s &apos;[[:space:]]&apos; &apos;\n&apos; |\
sort |\
uniq -c
</code></pre><p>方法二</p>
<pre><code>kubectl get pods --all-namespaces -o jsonpath=&quot;{.items[*].spec.containers[*].image}&quot;
</code></pre><p>方法三</p>
<pre><code>kubectl get pods --all-namespaces -o=jsonpath=&apos;{range .items[*]}{&quot;\n&quot;}{.metadata.name}{&quot;:\t&quot;}{range .spec.containers[*]}{.image}{&quot;, &quot;}{end}{end}&apos; |\
sort
</code></pre><p>方法五</p>
<pre><code>kubectl get pods --all-namespaces -o=jsonpath=&quot;{..image}&quot; -l app=nginx
</code></pre><p>方法六</p>
<pre><code>kubectl get pods --namespace kube-system -o jsonpath=&quot;{..image}&quot;
</code></pre><p>方法七</p>
<pre><code>kubectl get pods --all-namespaces -o go-template --template=&quot;{{range .items}}{{range .spec.containers}}{{.image}} {{end}}{{end}}&quot;            
</code></pre><h1 id="pod启动失败"><a href="#pod启动失败" class="headerlink" title="pod启动失败"></a>pod启动失败</h1><p>查看pod详情信息</p>
<pre><code>kubectl describe pod/{name}
</code></pre><p>查看pod日志</p>
<pre><code>kubectl logs pod/{name}
</code></pre><h1 id="pod拉取镜像失败-我是使用的mac的minikube"><a href="#pod拉取镜像失败-我是使用的mac的minikube" class="headerlink" title="pod拉取镜像失败(我是使用的mac的minikube)"></a>pod拉取镜像失败(我是使用的mac的minikube)</h1><p>登录虚拟机<br>「minikube是利用virtual box启动了一个虚拟机」</p>
<pre><code>minikube ssh
</code></pre><p>拉取镜像</p>
<pre><code>docker pull {image_name}    
</code></pre><h1 id="node隔离与恢复"><a href="#node隔离与恢复" class="headerlink" title="node隔离与恢复"></a>node隔离与恢复</h1><h3 id="将node脱离k8s集群的调度范围"><a href="#将node脱离k8s集群的调度范围" class="headerlink" title="将node脱离k8s集群的调度范围"></a>将node脱离k8s集群的调度范围</h3><h5 id="修改yaml，添加unschedulable属性"><a href="#修改yaml，添加unschedulable属性" class="headerlink" title="修改yaml，添加unschedulable属性"></a>修改yaml，添加unschedulable属性</h5><pre><code>node.yaml
...
spec:
    unschedulable:true
...        

kubectl replace -f node.yaml
</code></pre><h5 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h5><pre><code>kubectl patch node {node_name} -p &apos;{&quot;spec&quot;:{unschedulable&quot;:true}}&apos;
或者
kubectl cordon {node_name}
</code></pre><h3 id="将node恢复调度"><a href="#将node恢复调度" class="headerlink" title="将node恢复调度"></a>将node恢复调度</h3><pre><code>其余两种方式将unschedulable属性改为false即可
kubectl uncordon {node_name}  
</code></pre><h1 id="更新资源对象的Label"><a href="#更新资源对象的Label" class="headerlink" title="更新资源对象的Label"></a>更新资源对象的Label</h1><h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><pre><code>kubectl label pod {pod_name} role=test
</code></pre><h3 id="查看pod的label"><a href="#查看pod的label" class="headerlink" title="查看pod的label"></a>查看pod的label</h3><pre><code>kubectl get pods -Lrole
</code></pre><h3 id="删除一个Label"><a href="#删除一个Label" class="headerlink" title="删除一个Label"></a>删除一个Label</h3><pre><code>kubectl label pod {pod_name} role-
</code></pre><h3 id="覆盖修改"><a href="#覆盖修改" class="headerlink" title="覆盖修改"></a>覆盖修改</h3><pre><code>kubectl label pod {pod_name} role=test --overwrite
</code></pre><h1 id="context定义"><a href="#context定义" class="headerlink" title="context定义"></a>context定义</h1><h3 id="定义两个context，即运行环境，这个运行环境属于某个特定的命名空间"><a href="#定义两个context，即运行环境，这个运行环境属于某个特定的命名空间" class="headerlink" title="定义两个context，即运行环境，这个运行环境属于某个特定的命名空间"></a>定义两个context，即运行环境，这个运行环境属于某个特定的命名空间</h3><pre><code>kubectl config set-context ctx-dev --namespace=development --cluster=kubernets-cluster --user=dev
kubectl config set-context ctx-prod --namespace=production --cluster=kubernets-cluster --user=prod
</code></pre><h3 id="查看已定义的context"><a href="#查看已定义的context" class="headerlink" title="查看已定义的context"></a>查看已定义的context</h3><pre><code>kubectl config view
</code></pre><h3 id="设定工作组在特定context环境中工作"><a href="#设定工作组在特定context环境中工作" class="headerlink" title="设定工作组在特定context环境中工作"></a>设定工作组在特定context环境中工作</h3><pre><code>kubectl config use-context ctx-dev
</code></pre><blockquote>
<p><a href="https://k8smeetup.github.io/docs/tasks/access-application-cluster/list-all-running-container-images/" target="_blank" rel="external">查看所有 namespace 中所有的 Container</a>    </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><pre><code>https://github.com/kubernetes/kubernetes
https://github.com/ku]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python3+selenium寻找元素]]></title>
    <link href="http://www.cxyteam.com/2018/11/22/python3-selenium%E5%AF%BB%E6%89%BE%E5%85%83%E7%B4%A0/"/>
    <id>http://www.cxyteam.com/2018/11/22/python3-selenium寻找元素/</id>
    <published>2018-11-21T16:06:39.000Z</published>
    <updated>2018-11-22T03:22:51.849Z</updated>
    <content type="html"><![CDATA[<h1 id="打开本地文件"><a href="#打开本地文件" class="headerlink" title="打开本地文件"></a>打开本地文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file_path = <span class="string">'file:///'</span>+os.path.abspath(<span class="string">"1.html"</span>)</div><div class="line">driver = webdriver.Chrome()</div><div class="line">driver.get(file_path)</div></pre></td></tr></table></figure>
<h1 id="暂停3s"><a href="#暂停3s" class="headerlink" title="暂停3s"></a>暂停3s</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">time.sleep(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<h1 id="下拉框选择"><a href="#下拉框选择" class="headerlink" title="下拉框选择"></a>下拉框选择</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</div><div class="line"></div><div class="line">s=Select(driver.find_element_by_id(<span class="string">"catalogDropdown"</span>))</div><div class="line">s.find_element_by_xpath(<span class="string">"//option[@value='424636']"</span>).click()</div><div class="line">s.select_by_visible_text(<span class="string">"工作日志"</span>)</div></pre></td></tr></table></figure>
<h1 id="执行javascript脚本"><a href="#执行javascript脚本" class="headerlink" title="执行javascript脚本"></a>执行javascript脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">js = <span class="string">"document.getElementsByClassName('CodeMirror-activeline')[0].innerHTML='this is test'"</span></div><div class="line">driver.execute_script(js)</div></pre></td></tr></table></figure>
<h1 id="切换iframe"><a href="#切换iframe" class="headerlink" title="切换iframe"></a>切换iframe</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">driver.switch_to.frame(driver.find_element_by_tag_name(<span class="string">"iframe"</span>))</div><div class="line">driver.find_element_by_tag_name(<span class="string">'body'</span>).send_keys(<span class="string">"hello  world！"</span>)</div></pre></td></tr></table></figure>
<h1 id="根据classname查找"><a href="#根据classname查找" class="headerlink" title="根据classname查找"></a>根据classname查找</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_class_name(<span class="string">"write-btn"</span>).click()</div></pre></td></tr></table></figure>
<h1 id="根据tagname查找"><a href="#根据tagname查找" class="headerlink" title="根据tagname查找"></a>根据tagname查找</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_tag_name(<span class="string">"input"</span>).send_keys(<span class="string">"selenium"</span>)</div></pre></td></tr></table></figure>
<h1 id="通过css方式查找"><a href="#通过css方式查找" class="headerlink" title="通过css方式查找"></a>通过css方式查找</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_css_selector(<span class="string">"#kw"</span>).send_keys(<span class="string">"selenium"</span>)</div><div class="line">driver.find_element_by_css_selector(<span class="string">"a[name='tj_news']"</span>).click()</div><div class="line">driver.find_element_by_css_selector(<span class="string">"a[title='web']"</span>).click()</div><div class="line">driver.find_element_by_css_selector(<span class="string">"a.RecycleBin"</span>).click()</div><div class="line">driver.findElement(By.cssSelector(<span class="string">"#J_login_form&gt;dl&gt;dt&gt;input[id=’ J_password’]"</span>));</div><div class="line"><span class="comment">#复合样式</span></div><div class="line"><span class="comment">#&lt;button id="J_sidebar_login" class="btn btn_big btn_submit" type="submit"&gt;登录&lt;/button&gt;</span></div><div class="line">driver.findElement(By.cssSelector(<span class="string">"button.btn.btn_big.btn_submit"</span>))</div></pre></td></tr></table></figure>
<h1 id="浏览器最大化"><a href="#浏览器最大化" class="headerlink" title="浏览器最大化"></a>浏览器最大化</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browser.maximize_window()</div></pre></td></tr></table></figure>
<h1 id="xpath查找"><a href="#xpath查找" class="headerlink" title="xpath查找"></a>xpath查找</h1><h3 id="根据class查找"><a href="#根据class查找" class="headerlink" title="根据class查找"></a>根据class查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_xpath(<span class="string">"//div[@class='user-info']/a"</span>).click()</div></pre></td></tr></table></figure>
<h3 id="根据id查找"><a href="#根据id查找" class="headerlink" title="根据id查找"></a>根据id查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_xpath(<span class="string">"//div[@id='editorTabList']/a[2]"</span>).click()</div><div class="line">driver.find_element_by_xpath(<span class="string">'//*[@id="account_login"]/form/div/div[5]/button'</span>).click()</div></pre></td></tr></table></figure>
<h3 id="根据元素位置查找"><a href="#根据元素位置查找" class="headerlink" title="根据元素位置查找"></a>根据元素位置查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_xpath(<span class="string">'/html/body/section/div/div[2]/div[2]/div/div[2]/a[4]'</span>).click()</div></pre></td></tr></table></figure>
<h3 id="根据name查找"><a href="#根据name查找" class="headerlink" title="根据name查找"></a>根据name查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_xpath(<span class="string">'//*[@name="title"]'</span>)</div></pre></td></tr></table></figure>
<h3 id="标签文字"><a href="#标签文字" class="headerlink" title="标签文字"></a>标签文字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">driver.findElement(By.linkText(<span class="string">"About Google"</span>));</div><div class="line">driver.findElement(By.partialLinkText(<span class="string">"About"</span>));</div></pre></td></tr></table></figure>
<h1 id="层级查找元素"><a href="#层级查找元素" class="headerlink" title="层级查找元素"></a>层级查找元素</h1><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在/form/span/input 层级标签下有个 div 标签的 id=fm 的元素</span></div><div class="line">driver.find_element_by_xpath(<span class="string">"//div[@id='fm']/form/span/input"</span>).send_keys(<span class="string">"s elenium"</span>)</div><div class="line"></div><div class="line"><span class="comment"># id 为'check' 的 tr ，定位它里面的第2个 td</span></div><div class="line">driver.find_element_by_xpath(<span class="string">"//tr[@id='check']/td[2]"</span>).click()</div><div class="line"></div><div class="line"><span class="comment">#第7个 tr 里面的第2个 td（position）</span></div><div class="line">driver.find_element_by_xpath(<span class="string">"//tr[7]/td[2]"</span>).click()</div><div class="line"></div><div class="line"><span class="comment">#在 a 标签下有个文本(text)包含(contains)'网页' 的元素</span></div><div class="line">driver.find_element_by_xpath(<span class="string">"//a[contains(text(),'网页')]"</span>).click()</div><div class="line"></div><div class="line"><span class="comment">#有个叫 a 的标签，他有个链接 href='http://www.baidu.com/ 的元素</span></div><div class="line">driver.find_element_by_xpath(<span class="string">"//a[@href='http://www.baidu.com/']"</span>).click()</div><div class="line"></div><div class="line">driver.findElement(By.xpath(“//img[@alt=”div1-img1”]”))</div><div class="line"></div><div class="line">driver.find_element_by_xpath(<span class="string">"//div[@name=’div2’]/input[@name=’div2input’]"</span>)</div><div class="line">driver.findElement(By.xpath(<span class="string">"//input[@type='submit'][@name='fuck']"</span>));</div><div class="line">driver.findElement(By.xpath(<span class="string">"//input[@type='submit' or @name='fuck']"</span>));</div><div class="line">driver.findElement(By.xpath(<span class="string">"//input[@type='submit' and @name='fuck']"</span>));</div><div class="line"><span class="comment">#匹配id以fuck开头的元素，id='fuckyou'</span></div><div class="line">WebElement ele = driver.findElement(By.xpath(<span class="string">"//input[start-with(@id,'fuck')]"</span>));</div><div class="line"><span class="comment">#匹配id以fuck结尾的元素，id='youfuck'</span></div><div class="line">WebElement ele = driver.findElement(By.xpath(<span class="string">"//input[ends-with(@id,'fuck')]"</span>));</div><div class="line"><span class="comment">#匹配id中含有fuck的元素，id='youfuckyou'</span></div><div class="line">WebElement ele = driver.findElement(By.xpath(<span class="string">"//input[contains(@id,'fuck')]"</span>));</div><div class="line"><span class="comment">#匹配所有input元素中含有属性的值为fuck的元素</span></div><div class="line">driver.findElement(By.xpath(<span class="string">"//input[@*='fuck']"</span>));</div></pre></td></tr></table></figure>
<h3 id="根据标签文案查找"><a href="#根据标签文案查找" class="headerlink" title="根据标签文案查找"></a>根据标签文案查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_id(<span class="string">'xx'</span>).find_element_by_link_text(<span class="string">'Another_action'</span>)</div></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/qingchunjun/p/4208159.html" target="_blank" rel="external">https://www.cnblogs.com/qingchunjun/p/4208159.html</a><br><a href="https://www.cnblogs.com/yufeihlf/p/5689042.html" target="_blank" rel="external">https://www.cnblogs.com/yufeihlf/p/5689042.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="打开本地文件"><a href="#打开本地文件" class="headerlink" title="打开本地文件"></a>打开本地文件</h1><figure class="highlight python"><table><tr><td class="gu]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[go数组,切片,map]]></title>
    <link href="http://www.cxyteam.com/2018/11/09/go%E6%95%B0%E7%BB%84-%E5%88%87%E7%89%87-map/"/>
    <id>http://www.cxyteam.com/2018/11/09/go数组-切片-map/</id>
    <published>2018-11-09T06:50:33.000Z</published>
    <updated>2018-11-09T09:08:53.948Z</updated>
    <content type="html"><![CDATA[<p>在写go的时候，对数组，切片和map的概念感觉很模糊，重新把这三个数据类型进行了整理</p>
<p>在了解这三个数据类型之前，得先了解几个概念</p>
<p>值类型：所有的值类型变量是在赋值和作为参数传递时都将产生一次赋值动作</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol>
<li><p>声明</p>
</li>
<li><p>取值</p>
</li>
<li><p>遍历</p>
</li>
</ol>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><ol>
<li><p>声明</p>
</li>
<li><p>取值/赋值</p>
</li>
</ol>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><ol>
<li><p>声明</p>
</li>
<li><p>取值/赋值</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在写go的时候，对数组，切片和map的概念感觉很模糊，重新把这三个数据类型进行了整理</p>
<p>在了解这三个数据类型之前，得先了解几个概念</p>
<p>值类型：所有的值类型变量是在赋值和作为参数传递时都将产生一次赋值动作</p>
<h1 id="数组"><a href]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[lldb调试redis]]></title>
    <link href="http://www.cxyteam.com/2018/11/06/lldb%E8%B0%83%E8%AF%95redis/"/>
    <id>http://www.cxyteam.com/2018/11/06/lldb调试redis/</id>
    <published>2018-11-05T16:00:52.000Z</published>
    <updated>2018-11-05T16:22:08.547Z</updated>
    <content type="html"><![CDATA[<p>lldb调试redis步骤</p>
<p>1、编译redis并启动redis服务<br>「目前位于redis源码目录」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; ./src/redis-server &amp;</div></pre></td></tr></table></figure>
<p>2、lldb调试redis-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lldb src/redis-cli</div><div class="line">(lldb) target create &quot;src/redis-cli&quot;</div><div class="line">Current executable set to &apos;src/redis-cli&apos; (x86_64).</div></pre></td></tr></table></figure>
<p>4、设置断点<br>注：「redis-cli.c文件的第986行，redis版本为：3.0.2」，第986行代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-&gt; 986	        if (line[0] != &apos;\0&apos;) &#123;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) b redis-cli.c:986</div><div class="line">Breakpoint 1: where = redis-cli`main + 11728 [inlined] repl + 74 at redis-cli.c:2288, address = 0x00000001000081b0</div></pre></td></tr></table></figure>
<p>5、运行redis-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(lldb) process launch</div><div class="line">P</div><div class="line">Process 7181 launched: &apos;/Users/sunnysmilez/Desktop/code/redis-3.0.2/src/redis-cli&apos; (x86_64)</div><div class="line">P</div></pre></td></tr></table></figure>
<p>6、执行redis命令<br>注「使用ctrl+c进去信号处理器」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SET KEY MS</div><div class="line">                           Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = signal SIGSTOP</div><div class="line">    frame #0: 0x00007fff52bf4142 libsystem_kernel.dylib`read + 10</div><div class="line">libsystem_kernel.dylib`read:</div><div class="line">-&gt;  0x7fff52bf4142 &lt;+10&gt;: jae    0x7fff52bf414c            ; &lt;+20&gt;</div><div class="line">    0x7fff52bf4144 &lt;+12&gt;: movq   %rax, %rdi</div><div class="line">    0x7fff52bf4147 &lt;+15&gt;: jmp    0x7fff52be9b0e            ; cerror</div><div class="line">    0x7fff52bf414c &lt;+20&gt;: retq</div><div class="line">Target 1: (redis-cli) stopped.</div></pre></td></tr></table></figure>
<p>7、使用c命令进入断点<br>注：「c也就是continue命令」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(lldb) c</div><div class="line">Process 7181 resuming</div><div class="line"></div><div class="line">redis-cli was compiled with optimization - stepping may behave oddly; variables may not be available.</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class="line">    frame #0: 0x00000001000081b0 redis-cli`main [inlined] repl at redis-cli.c:986 [opt]</div><div class="line">   983</div><div class="line">   984 	    cliRefreshPrompt();</div><div class="line">   985 	    while((line = linenoise(context ? config.prompt : &quot;not connected&gt; &quot;)) != NULL) &#123;</div><div class="line">-&gt; 986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">   987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">Target 1: (redis-cli) stopped.</div></pre></td></tr></table></figure>
<p>8、使用n向下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081bb redis-cli`main [inlined] repl at redis-cli.c:987 [opt]</div><div class="line">   984 	    cliRefreshPrompt();</div><div class="line">   985 	    while((line = linenoise(context ? config.prompt : &quot;not connected&gt; &quot;)) != NULL) &#123;</div><div class="line">   986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">-&gt; 987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">Target 1: (redis-cli) stopped.</div><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081d2 redis-cli`main [inlined] repl at redis-cli.c:988 [opt]</div><div class="line">   985 	    while((line = linenoise(context ? config.prompt : &quot;not connected&gt; &quot;)) != NULL) &#123;</div><div class="line">   986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">   987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">-&gt; 988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">   991 	            if (argv == NULL) &#123;</div><div class="line">Target 1: (redis-cli) stopped.</div><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081df redis-cli`main [inlined] repl at redis-cli.c:989 [opt]</div><div class="line">   986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">   987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">-&gt; 989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">   991 	            if (argv == NULL) &#123;</div><div class="line">   992 	                printf(&quot;Invalid argument(s)\n&quot;);</div><div class="line">Target 1: (redis-cli) stopped.</div><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081e7 redis-cli`main [inlined] repl at redis-cli.c:991 [opt]</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">-&gt; 991 	            if (argv == NULL) &#123;</div><div class="line">   992 	                printf(&quot;Invalid argument(s)\n&quot;);</div><div class="line">   993 	                free(line);</div><div class="line">   994 	                continue;</div><div class="line">Target 1: (redis-cli) stopped.</div></pre></td></tr></table></figure>
<p>9、使用p打印值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(lldb) p *argv</div><div class="line">(sds) $0 = 0x0000000100203e88 &quot;SET&quot;</div><div class="line">(lldb) p *(argv+1)</div><div class="line">(sds) $1 = 0x0000000100203ed8 &quot;KEY&quot;</div><div class="line">(lldb) p *(argv+2)</div><div class="line">(sds) $2 = 0x0000000100203ee8 &quot;MS&quot;</div><div class="line">(lldb) p line</div><div class="line">(char *) $3 = 0x0000000100202ef0 &quot;SET KEY MS\n&quot;</div></pre></td></tr></table></figure>
<p>10、结束</p>
<p>使用n和p去查看你想要看到的一切值吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>lldb调试redis步骤</p>
<p>1、编译redis并启动redis服务<br>「目前位于redis源码目录」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div c]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang使用beego进行mvc]]></title>
    <link href="http://www.cxyteam.com/2018/11/01/golang%E4%BD%BF%E7%94%A8beego%E8%BF%9B%E8%A1%8Cmvc/"/>
    <id>http://www.cxyteam.com/2018/11/01/golang使用beego进行mvc/</id>
    <published>2018-11-01T05:30:09.000Z</published>
    <updated>2018-11-01T05:30:44.543Z</updated>
    <content type="html"><![CDATA[<ol>
<li>beego如何在controller引用models</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>beego如何在controller引用models</li>
</ol>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang的func如何传入关联数组]]></title>
    <link href="http://www.cxyteam.com/2018/11/01/golang%E7%9A%84func%E5%A6%82%E4%BD%95%E4%BC%A0%E5%85%A5%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84/"/>
    <id>http://www.cxyteam.com/2018/11/01/golang的func如何传入关联数组/</id>
    <published>2018-11-01T05:10:03.000Z</published>
    <updated>2018-11-01T05:21:48.221Z</updated>
    <content type="html"><![CDATA[<p>最近项目中使用golang，在封装函数的时候，想到传入php的数组概念，记录一下</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"name"</span>				: <span class="string">"hello"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	demo(Params)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(param <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	fmt.Printf(param[<span class="string">"name"</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目中使用golang，在封装函数的时候，想到传入php的数组概念，记录一下</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang使用net/http]]></title>
    <link href="http://www.cxyteam.com/2018/11/01/golang%E4%BD%BF%E7%94%A8net-http/"/>
    <id>http://www.cxyteam.com/2018/11/01/golang使用net-http/</id>
    <published>2018-11-01T04:54:09.000Z</published>
    <updated>2018-11-13T02:07:25.449Z</updated>
    <content type="html"><![CDATA[<p>在使用golang的net/http发送http请求的时候，碰到了不少问题，总结了http的常见使用方式</p>
<h3 id="json格式传参"><a href="#json格式传参" class="headerlink" title="json格式传参"></a>json格式传参</h3><p>优点：传参方式用json，代码简洁<br>缺点：Content-Type为application/json发送，php中获取不到post数据，只能从输入流获取；不能设置request的header信息</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">	path := <span class="string">"http://test.com"</span></div><div class="line">	values := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"username"</span>:<span class="string">"username"</span>,<span class="string">"passwd"</span>:<span class="string">"passwd"</span>&#125;</div><div class="line">	jsonvalue, _ := json.Marshal(values)</div><div class="line">	resp,err := http.Post(path, <span class="string">"application/json"</span>, bytes.NewBuffer(jsonvalue))</div><div class="line">	<span class="keyword">defer</span>  resp.Body.Close()</div><div class="line"></div><div class="line">	respBody,_:=ioutil.ReadAll(resp.Body)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(respBody), err)</div><div class="line">&#125;</div><div class="line"><span class="comment">//$_POST['username']获取不到；只能file_get_contents("php://input")</span></div></pre></td></tr></table></figure>
<h3 id="postform模拟表单"><a href="#postform模拟表单" class="headerlink" title="postform模拟表单"></a>postform模拟表单</h3><p>优点：php中能获取post数据，代码简洁<br>缺点：不能设置request的header信息</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"net/url"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	UserName := <span class="string">"username"</span></div><div class="line">	PassWD := <span class="string">"passwd"</span></div><div class="line"></div><div class="line">	v := url.Values&#123;&#125;</div><div class="line">	v.Set(<span class="string">"username"</span>, UserName)</div><div class="line">	v.Set(<span class="string">"password"</span>, PassWD)</div><div class="line"></div><div class="line">	resp, err := http.PostForm(<span class="string">"http://test.com"</span>, v)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line"></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	    fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="request方式"><a href="#request方式" class="headerlink" title="request方式"></a>request方式</h3><p>优点：能设置header<br>缺点：代码稍微复杂</p>
<p>发送普通post请求示例</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"is_init"</span> 			: <span class="string">"1"</span>,</div><div class="line">		<span class="string">"name"</span>				: <span class="string">"a.mp4"</span>,</div><div class="line">		<span class="string">"size"</span>				: <span class="string">"111"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	body, _ := json.Marshal(Params)</div><div class="line"></div><div class="line">	client := &amp;http.Client&#123;&#125;<span class="comment">//客户端,被Get,Head以及Post使用</span></div><div class="line">	reqest, err := http.NewRequest(<span class="string">"POST"</span>, <span class="string">"http://test.com"</span>, bytes.NewBuffer(body))</div><div class="line">	fmt.Println(Params, body, bytes.NewBuffer(body))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	reqest.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>) <span class="comment">//必须设定该参数,POST参数才能正常提交</span></div><div class="line"></div><div class="line">	resp, err := client.Do(reqest)<span class="comment">//发送请求</span></div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()<span class="comment">//一定要关闭resp.Body</span></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置request的header信息示例</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"net/url"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">	v := url.Values&#123;&#125;</div><div class="line">	v.Set(<span class="string">"name"</span>, <span class="string">"name"</span>)</div><div class="line">	v.Set(<span class="string">"is_init"</span>, <span class="string">"1"</span>)</div><div class="line"></div><div class="line">	body := ioutil.NopCloser(strings.NewReader(v.Encode()))</div><div class="line">	client := &amp;http.Client&#123;&#125;<span class="comment">//客户端,被Get,Head以及Post使用</span></div><div class="line">	reqest, err := http.NewRequest(<span class="string">"POST"</span>, <span class="string">"http://test.com"</span>, body)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	reqest.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded;param=value"</span>) <span class="comment">//必须设定该参数,POST参数才能正常提交</span></div><div class="line">    reqest.Header.Set(<span class="string">"test"</span>, <span class="string">"hello"</span>)<span class="comment">//设置header</span></div><div class="line">    </div><div class="line">	resp, err := client.Do(reqest)<span class="comment">//发送请求</span></div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()<span class="comment">//一定要关闭resp.Body</span></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"response=&gt;"</span>, <span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="普通上传图片"><a href="#普通上传图片" class="headerlink" title="普通上传图片"></a>普通上传图片</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"mime/multipart"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Upload(<span class="string">"http://test.com/upload"</span>, <span class="string">"/tmp/upload.png"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span>  <span class="title">Upload</span><span class="params">(request_url, file_path <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	file, err := os.Open(file_path)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error opening file"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line">	<span class="comment">//创建一个模拟的form中</span></div><div class="line">	bodyBuf := &amp;bytes.Buffer&#123;&#125;</div><div class="line">	bodyWriter := multipart.NewWriter(bodyBuf)</div><div class="line"></div><div class="line">	<span class="comment">//通过$_FILE['file']获取</span></div><div class="line">	fileWriter, err := bodyWriter.CreateFormFile(<span class="string">"file"</span>, file_path)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error writing to buffer"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//这里相当于选择了文件,将文件放到form中</span></div><div class="line">	_, err = io.Copy(fileWriter, file)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//获取上传文件的类型,multipart/form-data; boundary=...</span></div><div class="line">	contentType := bodyWriter.FormDataContentType()</div><div class="line"></div><div class="line">	<span class="comment">//这个很关键,必须这样写关闭,不能使用defer关闭,不然会导致错误</span></div><div class="line">	bodyWriter.Close()</div><div class="line"></div><div class="line">	<span class="comment">//上传的其他参数设置</span></div><div class="line">	params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"desc"</span>: <span class="string">"这里可以传入别的参数"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> key, val := <span class="keyword">range</span> params &#123;</div><div class="line">		_ = bodyWriter.WriteField(key, val)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	resp, err := http.Post(request_url, contentType, bodyBuf)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error writing to buffer"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line">	resp_body, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error writing to buffer"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(resp_body))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="上传图片，并设置header"><a href="#上传图片，并设置header" class="headerlink" title="上传图片，并设置header"></a>上传图片，并设置header</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"mime/multipart"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Upload(<span class="string">"http://test.com/upload"</span>, <span class="string">"/tmp/upload.png"</span>, <span class="string">"this is code"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(request_url, img_path, code <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	file, err := os.Open(img_path)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line"></div><div class="line">	body := &amp;bytes.Buffer&#123;&#125;</div><div class="line">	writer := multipart.NewWriter(body)</div><div class="line">	<span class="comment">//通过$_FILE['common']获取</span></div><div class="line">	part, err := writer.CreateFormFile(<span class="string">"common"</span>, filepath.Base(img_path))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line">	_, err = io.Copy(part, file)</div><div class="line"></div><div class="line">	err = writer.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	req, err := http.NewRequest(<span class="string">"POST"</span>, request_url, body)</div><div class="line">	req.Header.Set(<span class="string">"Content-Type"</span>, writer.FormDataContentType())</div><div class="line">	<span class="comment">//业务需要进行auth，通过$_SERVER['HTTP_AUTHORIZATION']获取</span></div><div class="line">	req.Header.Set(<span class="string">"authorization"</span>, <span class="string">"Bearer "</span>+code)</div><div class="line"></div><div class="line">	client := &amp;http.Client&#123;&#125;</div><div class="line">	resp, err := client.Do(req)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	resp.Body.Close()</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是常见的几种方式，在使用过程中，可以把request的方式再封装一层，简化代码再调用<br>「注：封装的不是很好，可以按照自己的需求来」</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"net/url"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">	params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"name"</span>: <span class="string">"name"</span>,</div><div class="line">		<span class="string">"is_init"</span>:<span class="string">"1"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	headers := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"Content-Type"</span> : <span class="string">"application/x-www-form-urlencoded;param=value"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Http(<span class="string">"http://test.com"</span>, params, headers)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Http</span><span class="params">(request_url <span class="keyword">string</span>, params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, header <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	v := url.Values&#123;&#125;</div><div class="line">	<span class="keyword">for</span> key, val := <span class="keyword">range</span> params &#123;</div><div class="line">		v.Set(key, val)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	body := ioutil.NopCloser(strings.NewReader(v.Encode()))</div><div class="line">	client := &amp;http.Client&#123;&#125;</div><div class="line">	reqest, err := http.NewRequest(<span class="string">"POST"</span>, request_url, body)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> key, val := <span class="keyword">range</span> header &#123;</div><div class="line">		reqest.Header.Set(key, val)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	resp, err := client.Do(reqest)</div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">	<span class="keyword">return</span> <span class="keyword">string</span>(content)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>在使用golang的net/http发送http请求的时候，碰到了不少问题，总结了http的常见使用方式</p>
<h3 id="json格式传参"><a href="#json格式传参" class="headerlink" title="json格式传参"></a>js]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang执行定时脚本]]></title>
    <link href="http://www.cxyteam.com/2018/10/30/golang%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.cxyteam.com/2018/10/30/golang执行定时脚本/</id>
    <published>2018-10-30T15:22:55.000Z</published>
    <updated>2018-11-01T05:30:28.453Z</updated>
    <content type="html"><![CDATA[<p>第一次拿golang写业务的代码，其中需要使用定时脚本<br>注:「用的beego开发」</p>
<h3 id="如何执行定时脚本"><a href="#如何执行定时脚本" class="headerlink" title="如何执行定时脚本"></a>如何执行定时脚本</h3><p>注：「项目名称为api，在api/tasks/first_task.go文件写入如下代码」</p>
<p>使用toolbox的task及robfig/cron进行定时任务编写</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> tasks</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"github.com/astaxie/beego"</span></div><div class="line">    <span class="string">"github.com/astaxie/beego/toolbox"</span></div><div class="line">    <span class="string">"github.com/robfig/cron"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">//beego/toolbox/task实现</span></div><div class="line">	first_task := toolbox.NewTask(<span class="string">"first_task"</span>, <span class="string">"* * * * * *"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">        log.Printf(<span class="string">"\nNotification task ran at: %s\n"</span>, time.Now())</div><div class="line">        fmt.Print(time.Now())</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    err := first_task.Run()</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        beego.Error(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    toolbox.AddTask(<span class="string">"first_task"</span>, first_task)</div><div class="line">    toolbox.StartTask()</div><div class="line"></div><div class="line">    <span class="keyword">defer</span> toolbox.StopTask()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//robfig/cron实现</span></div><div class="line">    i := <span class="number">0</span></div><div class="line">    c := cron.New()</div><div class="line">    spec := <span class="string">"* * * * * *"</span></div><div class="line">    c.AddFunc(spec, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        i++</div><div class="line">        log.Println(<span class="string">"start"</span>, i)</div><div class="line">    &#125;)</div><div class="line">    c.Start()</div><div class="line">    <span class="keyword">select</span>&#123;&#125; <span class="comment">//阻塞主线程不退出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在main.go引入tasks<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    _ <span class="string">"api/routers"</span></div><div class="line">    <span class="string">"github.com/astaxie/beego"</span></div><div class="line">    _ <span class="string">"api/tasks"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    beego.Run()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次拿golang写业务的代码，其中需要使用定时脚本<br>注:「用的beego开发」</p>
<h3 id="如何执行定时脚本"><a href="#如何执行定时脚本" class="headerlink" title="如何执行定时脚本"></a>如何执行定时脚本</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用tcpdump排查zRangeByScore参数无效问题]]></title>
    <link href="http://www.cxyteam.com/2018/10/29/%E4%BD%BF%E7%94%A8tcpdump%E6%8E%92%E6%9F%A5zRangeByScore%E5%8F%82%E6%95%B0%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://www.cxyteam.com/2018/10/29/使用tcpdump排查zRangeByScore参数无效问题/</id>
    <published>2018-10-29T15:47:12.000Z</published>
    <updated>2018-11-01T13:07:59.226Z</updated>
    <content type="html"><![CDATA[<p>在做列表数据分页的时候，是将数据存储在redis的有序集合中实现的</p>
<p>核心代码如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zRangeByScore($key, <span class="string">'-inf'</span>, <span class="string">'+inf'</span>, <span class="keyword">array</span>(<span class="string">'limit'</span> =&gt; <span class="keyword">array</span>($start, $size)));</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在进行翻页的时候，传入start=10，size=10，没有获取到新一页的数据，而是返回有序集合所有的数据</p>
<h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><h3 id="排查命令是否写错"><a href="#排查命令是否写错" class="headerlink" title="排查命令是否写错"></a>排查命令是否写错</h3><p>注：「将start和size写成定值」</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zRangeByScore($key, <span class="string">'-inf'</span>, <span class="string">'+inf'</span>, <span class="keyword">array</span>(<span class="string">'limit'</span> =&gt; <span class="keyword">array</span>(<span class="number">10</span>, <span class="number">10</span>)));</div></pre></td></tr></table></figure>
<p>数据正常返回，排查传参问题</p>
<h3 id="打印start，size"><a href="#打印start，size" class="headerlink" title="打印start，size"></a>打印start，size</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</div><div class="line">  [<span class="string">"limit"</span>]=&gt;</div><div class="line">  <span class="keyword">array</span>(<span class="number">2</span>) &#123;</div><div class="line">    [<span class="number">0</span>]=&gt;</div><div class="line">    string(<span class="number">2</span>) <span class="string">"10"</span></div><div class="line">    [<span class="number">1</span>]=&gt;</div><div class="line">    string(<span class="number">2</span>) <span class="string">"10"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果出乎意料，start，size传入没有问题<br>可是传入的都是page=10，size=10<br>为什么两种方式的结果会不一样，redis最终执行的是什么命令呢？</p>
<h3 id="查看redis最终执行的命令"><a href="#查看redis最终执行的命令" class="headerlink" title="查看redis最终执行的命令"></a>查看redis最终执行的命令</h3><p>在服务器用tcpdump抓取redis的网络包<br>注：「在开发服务器执行tcpdump命令；redis端口为6379」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@test01v /]# tcpdump port 6379 and tcp -X -s 0</div></pre></td></tr></table></figure>
<p>当走传参的方式的时候，最终redis执行的命令是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">02:46:46.220417 IP local_host.45816 &gt; redis_host.6379: Flags [P.], seq 38:129, ack 6, win 29200, length 91</div><div class="line">	0x0000:  4500 0083 d940 4000 4006 32a2 ac11 0005  E....@@.@.2.....</div><div class="line">	0x0010:  0a83 77f9 b2f8 1875 e8b6 5ad8 4953 9e07  ..w....u..Z.IS..</div><div class="line">	0x0020:  5018 7210 2f08 0000 2a35 0d0a 2431 330d  P.r./...*5..$13.</div><div class="line">	0x0030:  0a5a 5241 4e47 4542 5953 434f 5245 0d0a  .ZRANGEBYSCORE..</div><div class="line">	0x0040:  2432 330d 0a70 6572 6665 6374 5f63 6f6d  $23..perfect_com</div><div class="line">	0x0050:  6d65 6e74 5f69 645f 6c69 7374 0d0a 2434  ment_id_list..$4</div><div class="line">	0x0060:  0d0a 2d69 6e66 0d0a 2434 0d0a 2b69 6e66  ..-inf..$4..+inf</div><div class="line">	0x0070:  0d0a 2431 300d 0a57 4954 4853 434f 5245  ..$10..WITHSCORE</div><div class="line">	0x0080:  530d 0a                                  S..</div></pre></td></tr></table></figure>
<p>可以看出传输的redis的命令为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZRANGEBYSCORE perfect_comment_id_list -inf +inf WITHSCORES</div></pre></td></tr></table></figure>
<p>没有limit参数信息，当然会返回有序集合所有的数据</p>
<p>对比传入数据后发现：<br>定值的时候传入的是数字类型，传参的方式传入的是字符串类型</p>
<p>猜测是因为php连接redis的拓展的问题<br>当传入的start，size参数为字符串类型的时候会被过滤掉</p>
<p>为什么要这样做呢，难道是redis不支持吗<br>测试后发现redis是支持的</p>
<p>愉快的将参数做了类型转换，问题得到解决</p>
<p>最后也没忘记给phpredis提了一个issue</p>
<p>「注：phpredis的版本为3.0.0」</p>
<p>后记：在tcpdump使用的时候，也可以用来查询执行的MySQL语句<br>比如说，当我需要去熟悉一个新业务或者排查bug的时候，我会将该业务的sql语句都抓取出来<br>命令如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -A -s 0 port 3306 and tcp &gt; ~/sql.log</div></pre></td></tr></table></figure>
<p>感兴趣的朋友可以试试</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做列表数据分页的时候，是将数据存储在redis的有序集合中实现的</p>
<p>核心代码如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1<]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
</feed>