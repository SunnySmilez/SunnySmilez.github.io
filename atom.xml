<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[狂奔的菜鸟]]></title>
  <subtitle><![CDATA[当你的实力支撑不起你的野心的时候，静下心来好好学习吧！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.cxyteam.com/"/>
  <updated>2018-11-09T09:08:53.948Z</updated>
  <id>http://www.cxyteam.com/</id>
  
  <author>
    <name><![CDATA[狂奔的菜鸟]]></name>
    <email><![CDATA[phpchengxuyuan@sina.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[go数组,切片,map]]></title>
    <link href="http://www.cxyteam.com/2018/11/09/go%E6%95%B0%E7%BB%84-%E5%88%87%E7%89%87-map/"/>
    <id>http://www.cxyteam.com/2018/11/09/go数组-切片-map/</id>
    <published>2018-11-09T06:50:33.000Z</published>
    <updated>2018-11-09T09:08:53.948Z</updated>
    <content type="html"><![CDATA[<p>在写go的时候，对数组，切片和map的概念感觉很模糊，重新把这三个数据类型进行了整理</p>
<p>在了解这三个数据类型之前，得先了解几个概念</p>
<p>值类型：所有的值类型变量是在赋值和作为参数传递时都将产生一次赋值动作</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol>
<li><p>声明</p>
</li>
<li><p>取值</p>
</li>
<li><p>遍历</p>
</li>
</ol>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><ol>
<li><p>声明</p>
</li>
<li><p>取值/赋值</p>
</li>
</ol>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><ol>
<li><p>声明</p>
</li>
<li><p>取值/赋值</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在写go的时候，对数组，切片和map的概念感觉很模糊，重新把这三个数据类型进行了整理</p>
<p>在了解这三个数据类型之前，得先了解几个概念</p>
<p>值类型：所有的值类型变量是在赋值和作为参数传递时都将产生一次赋值动作</p>
<h1 id="数组"><a href]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[lldb调试redis]]></title>
    <link href="http://www.cxyteam.com/2018/11/06/lldb%E8%B0%83%E8%AF%95redis/"/>
    <id>http://www.cxyteam.com/2018/11/06/lldb调试redis/</id>
    <published>2018-11-05T16:00:52.000Z</published>
    <updated>2018-11-05T16:22:08.547Z</updated>
    <content type="html"><![CDATA[<p>lldb调试redis步骤</p>
<p>1、编译redis并启动redis服务<br>「目前位于redis源码目录」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; ./src/redis-server &amp;</div></pre></td></tr></table></figure>
<p>2、lldb调试redis-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lldb src/redis-cli</div><div class="line">(lldb) target create &quot;src/redis-cli&quot;</div><div class="line">Current executable set to &apos;src/redis-cli&apos; (x86_64).</div></pre></td></tr></table></figure>
<p>4、设置断点<br>注：「redis-cli.c文件的第986行，redis版本为：3.0.2」，第986行代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-&gt; 986	        if (line[0] != &apos;\0&apos;) &#123;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) b redis-cli.c:986</div><div class="line">Breakpoint 1: where = redis-cli`main + 11728 [inlined] repl + 74 at redis-cli.c:2288, address = 0x00000001000081b0</div></pre></td></tr></table></figure>
<p>5、运行redis-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(lldb) process launch</div><div class="line">P</div><div class="line">Process 7181 launched: &apos;/Users/sunnysmilez/Desktop/code/redis-3.0.2/src/redis-cli&apos; (x86_64)</div><div class="line">P</div></pre></td></tr></table></figure>
<p>6、执行redis命令<br>注「使用ctrl+c进去信号处理器」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SET KEY MS</div><div class="line">                           Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = signal SIGSTOP</div><div class="line">    frame #0: 0x00007fff52bf4142 libsystem_kernel.dylib`read + 10</div><div class="line">libsystem_kernel.dylib`read:</div><div class="line">-&gt;  0x7fff52bf4142 &lt;+10&gt;: jae    0x7fff52bf414c            ; &lt;+20&gt;</div><div class="line">    0x7fff52bf4144 &lt;+12&gt;: movq   %rax, %rdi</div><div class="line">    0x7fff52bf4147 &lt;+15&gt;: jmp    0x7fff52be9b0e            ; cerror</div><div class="line">    0x7fff52bf414c &lt;+20&gt;: retq</div><div class="line">Target 1: (redis-cli) stopped.</div></pre></td></tr></table></figure>
<p>7、使用c命令进入断点<br>注：「c也就是continue命令」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(lldb) c</div><div class="line">Process 7181 resuming</div><div class="line"></div><div class="line">redis-cli was compiled with optimization - stepping may behave oddly; variables may not be available.</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class="line">    frame #0: 0x00000001000081b0 redis-cli`main [inlined] repl at redis-cli.c:986 [opt]</div><div class="line">   983</div><div class="line">   984 	    cliRefreshPrompt();</div><div class="line">   985 	    while((line = linenoise(context ? config.prompt : &quot;not connected&gt; &quot;)) != NULL) &#123;</div><div class="line">-&gt; 986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">   987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">Target 1: (redis-cli) stopped.</div></pre></td></tr></table></figure>
<p>8、使用n向下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081bb redis-cli`main [inlined] repl at redis-cli.c:987 [opt]</div><div class="line">   984 	    cliRefreshPrompt();</div><div class="line">   985 	    while((line = linenoise(context ? config.prompt : &quot;not connected&gt; &quot;)) != NULL) &#123;</div><div class="line">   986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">-&gt; 987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">Target 1: (redis-cli) stopped.</div><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081d2 redis-cli`main [inlined] repl at redis-cli.c:988 [opt]</div><div class="line">   985 	    while((line = linenoise(context ? config.prompt : &quot;not connected&gt; &quot;)) != NULL) &#123;</div><div class="line">   986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">   987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">-&gt; 988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">   991 	            if (argv == NULL) &#123;</div><div class="line">Target 1: (redis-cli) stopped.</div><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081df redis-cli`main [inlined] repl at redis-cli.c:989 [opt]</div><div class="line">   986 	        if (line[0] != &apos;\0&apos;) &#123;</div><div class="line">   987 	            argv = sdssplitargs(line,&amp;argc);</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">-&gt; 989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">   991 	            if (argv == NULL) &#123;</div><div class="line">   992 	                printf(&quot;Invalid argument(s)\n&quot;);</div><div class="line">Target 1: (redis-cli) stopped.</div><div class="line">(lldb) n</div><div class="line">Process 7181 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step over</div><div class="line">    frame #0: 0x00000001000081e7 redis-cli`main [inlined] repl at redis-cli.c:991 [opt]</div><div class="line">   988 	            if (history) linenoiseHistoryAdd(line);</div><div class="line">   989 	            if (historyfile) linenoiseHistorySave(historyfile);</div><div class="line">   990</div><div class="line">-&gt; 991 	            if (argv == NULL) &#123;</div><div class="line">   992 	                printf(&quot;Invalid argument(s)\n&quot;);</div><div class="line">   993 	                free(line);</div><div class="line">   994 	                continue;</div><div class="line">Target 1: (redis-cli) stopped.</div></pre></td></tr></table></figure>
<p>9、使用p打印值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(lldb) p *argv</div><div class="line">(sds) $0 = 0x0000000100203e88 &quot;SET&quot;</div><div class="line">(lldb) p *(argv+1)</div><div class="line">(sds) $1 = 0x0000000100203ed8 &quot;KEY&quot;</div><div class="line">(lldb) p *(argv+2)</div><div class="line">(sds) $2 = 0x0000000100203ee8 &quot;MS&quot;</div><div class="line">(lldb) p line</div><div class="line">(char *) $3 = 0x0000000100202ef0 &quot;SET KEY MS\n&quot;</div></pre></td></tr></table></figure>
<p>10、结束</p>
<p>使用n和p去查看你想要看到的一切值吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>lldb调试redis步骤</p>
<p>1、编译redis并启动redis服务<br>「目前位于redis源码目录」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div c]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang使用beego进行mvc]]></title>
    <link href="http://www.cxyteam.com/2018/11/01/golang%E4%BD%BF%E7%94%A8beego%E8%BF%9B%E8%A1%8Cmvc/"/>
    <id>http://www.cxyteam.com/2018/11/01/golang使用beego进行mvc/</id>
    <published>2018-11-01T05:30:09.000Z</published>
    <updated>2018-11-01T05:30:44.543Z</updated>
    <content type="html"><![CDATA[<ol>
<li>beego如何在controller引用models</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>beego如何在controller引用models</li>
</ol>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang的func如何传入关联数组]]></title>
    <link href="http://www.cxyteam.com/2018/11/01/golang%E7%9A%84func%E5%A6%82%E4%BD%95%E4%BC%A0%E5%85%A5%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84/"/>
    <id>http://www.cxyteam.com/2018/11/01/golang的func如何传入关联数组/</id>
    <published>2018-11-01T05:10:03.000Z</published>
    <updated>2018-11-01T05:21:48.221Z</updated>
    <content type="html"><![CDATA[<p>最近项目中使用golang，在封装函数的时候，想到传入php的数组概念，记录一下</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"name"</span>				: <span class="string">"hello"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	demo(Params)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(param <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	fmt.Printf(param[<span class="string">"name"</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目中使用golang，在封装函数的时候，想到传入php的数组概念，记录一下</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang使用net/http]]></title>
    <link href="http://www.cxyteam.com/2018/11/01/golang%E4%BD%BF%E7%94%A8net-http/"/>
    <id>http://www.cxyteam.com/2018/11/01/golang使用net-http/</id>
    <published>2018-11-01T04:54:09.000Z</published>
    <updated>2018-11-13T02:07:25.449Z</updated>
    <content type="html"><![CDATA[<p>在使用golang的net/http发送http请求的时候，碰到了不少问题，总结了http的常见使用方式</p>
<h3 id="json格式传参"><a href="#json格式传参" class="headerlink" title="json格式传参"></a>json格式传参</h3><p>优点：传参方式用json，代码简洁<br>缺点：Content-Type为application/json发送，php中获取不到post数据，只能从输入流获取；不能设置request的header信息</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">	path := <span class="string">"http://test.com"</span></div><div class="line">	values := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"username"</span>:<span class="string">"username"</span>,<span class="string">"passwd"</span>:<span class="string">"passwd"</span>&#125;</div><div class="line">	jsonvalue, _ := json.Marshal(values)</div><div class="line">	resp,err := http.Post(path, <span class="string">"application/json"</span>, bytes.NewBuffer(jsonvalue))</div><div class="line">	<span class="keyword">defer</span>  resp.Body.Close()</div><div class="line"></div><div class="line">	respBody,_:=ioutil.ReadAll(resp.Body)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(respBody), err)</div><div class="line">&#125;</div><div class="line"><span class="comment">//$_POST['username']获取不到；只能file_get_contents("php://input")</span></div></pre></td></tr></table></figure>
<h3 id="postform模拟表单"><a href="#postform模拟表单" class="headerlink" title="postform模拟表单"></a>postform模拟表单</h3><p>优点：php中能获取post数据，代码简洁<br>缺点：不能设置request的header信息</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"net/url"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	UserName := <span class="string">"username"</span></div><div class="line">	PassWD := <span class="string">"passwd"</span></div><div class="line"></div><div class="line">	v := url.Values&#123;&#125;</div><div class="line">	v.Set(<span class="string">"username"</span>, UserName)</div><div class="line">	v.Set(<span class="string">"password"</span>, PassWD)</div><div class="line"></div><div class="line">	resp, err := http.PostForm(<span class="string">"http://test.com"</span>, v)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line"></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	    fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="request方式"><a href="#request方式" class="headerlink" title="request方式"></a>request方式</h3><p>优点：能设置header<br>缺点：代码稍微复杂</p>
<p>发送普通post请求示例</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"is_init"</span> 			: <span class="string">"1"</span>,</div><div class="line">		<span class="string">"name"</span>				: <span class="string">"a.mp4"</span>,</div><div class="line">		<span class="string">"size"</span>				: <span class="string">"111"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	body, _ := json.Marshal(Params)</div><div class="line"></div><div class="line">	client := &amp;http.Client&#123;&#125;<span class="comment">//客户端,被Get,Head以及Post使用</span></div><div class="line">	reqest, err := http.NewRequest(<span class="string">"POST"</span>, <span class="string">"http://test.com"</span>, bytes.NewBuffer(body))</div><div class="line">	fmt.Println(Params, body, bytes.NewBuffer(body))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	reqest.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>) <span class="comment">//必须设定该参数,POST参数才能正常提交</span></div><div class="line"></div><div class="line">	resp, err := client.Do(reqest)<span class="comment">//发送请求</span></div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()<span class="comment">//一定要关闭resp.Body</span></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置request的header信息示例</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"net/url"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">	v := url.Values&#123;&#125;</div><div class="line">	v.Set(<span class="string">"name"</span>, <span class="string">"name"</span>)</div><div class="line">	v.Set(<span class="string">"is_init"</span>, <span class="string">"1"</span>)</div><div class="line"></div><div class="line">	body := ioutil.NopCloser(strings.NewReader(v.Encode()))</div><div class="line">	client := &amp;http.Client&#123;&#125;<span class="comment">//客户端,被Get,Head以及Post使用</span></div><div class="line">	reqest, err := http.NewRequest(<span class="string">"POST"</span>, <span class="string">"http://test.com"</span>, body)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	reqest.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded;param=value"</span>) <span class="comment">//必须设定该参数,POST参数才能正常提交</span></div><div class="line">    reqest.Header.Set(<span class="string">"test"</span>, <span class="string">"hello"</span>)<span class="comment">//设置header</span></div><div class="line">    </div><div class="line">	resp, err := client.Do(reqest)<span class="comment">//发送请求</span></div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()<span class="comment">//一定要关闭resp.Body</span></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"response=&gt;"</span>, <span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="普通上传图片"><a href="#普通上传图片" class="headerlink" title="普通上传图片"></a>普通上传图片</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"mime/multipart"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Upload(<span class="string">"http://test.com/upload"</span>, <span class="string">"/tmp/upload.png"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span>  <span class="title">Upload</span><span class="params">(request_url, file_path <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	file, err := os.Open(file_path)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error opening file"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line">	<span class="comment">//创建一个模拟的form中</span></div><div class="line">	bodyBuf := &amp;bytes.Buffer&#123;&#125;</div><div class="line">	bodyWriter := multipart.NewWriter(bodyBuf)</div><div class="line"></div><div class="line">	<span class="comment">//通过$_FILE['file']获取</span></div><div class="line">	fileWriter, err := bodyWriter.CreateFormFile(<span class="string">"file"</span>, file_path)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error writing to buffer"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//这里相当于选择了文件,将文件放到form中</span></div><div class="line">	_, err = io.Copy(fileWriter, file)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//获取上传文件的类型,multipart/form-data; boundary=...</span></div><div class="line">	contentType := bodyWriter.FormDataContentType()</div><div class="line"></div><div class="line">	<span class="comment">//这个很关键,必须这样写关闭,不能使用defer关闭,不然会导致错误</span></div><div class="line">	bodyWriter.Close()</div><div class="line"></div><div class="line">	<span class="comment">//上传的其他参数设置</span></div><div class="line">	params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"desc"</span>: <span class="string">"这里可以传入别的参数"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> key, val := <span class="keyword">range</span> params &#123;</div><div class="line">		_ = bodyWriter.WriteField(key, val)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	resp, err := http.Post(request_url, contentType, bodyBuf)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error writing to buffer"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line">	resp_body, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"error writing to buffer"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(resp_body))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="上传图片，并设置header"><a href="#上传图片，并设置header" class="headerlink" title="上传图片，并设置header"></a>上传图片，并设置header</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"mime/multipart"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Upload(<span class="string">"http://test.com/upload"</span>, <span class="string">"/tmp/upload.png"</span>, <span class="string">"this is code"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(request_url, img_path, code <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	file, err := os.Open(img_path)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line"></div><div class="line">	body := &amp;bytes.Buffer&#123;&#125;</div><div class="line">	writer := multipart.NewWriter(body)</div><div class="line">	<span class="comment">//通过$_FILE['common']获取</span></div><div class="line">	part, err := writer.CreateFormFile(<span class="string">"common"</span>, filepath.Base(img_path))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line">	_, err = io.Copy(part, file)</div><div class="line"></div><div class="line">	err = writer.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	req, err := http.NewRequest(<span class="string">"POST"</span>, request_url, body)</div><div class="line">	req.Header.Set(<span class="string">"Content-Type"</span>, writer.FormDataContentType())</div><div class="line">	<span class="comment">//业务需要进行auth，通过$_SERVER['HTTP_AUTHORIZATION']获取</span></div><div class="line">	req.Header.Set(<span class="string">"authorization"</span>, <span class="string">"Bearer "</span>+code)</div><div class="line"></div><div class="line">	client := &amp;http.Client&#123;&#125;</div><div class="line">	resp, err := client.Do(req)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	resp.Body.Close()</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是常见的几种方式，在使用过程中，可以把request的方式再封装一层，简化代码再调用<br>「注：封装的不是很好，可以按照自己的需求来」</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"net/url"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">	params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"name"</span>: <span class="string">"name"</span>,</div><div class="line">		<span class="string">"is_init"</span>:<span class="string">"1"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	headers := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"Content-Type"</span> : <span class="string">"application/x-www-form-urlencoded;param=value"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Http(<span class="string">"http://test.com"</span>, params, headers)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Http</span><span class="params">(request_url <span class="keyword">string</span>, params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, header <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	v := url.Values&#123;&#125;</div><div class="line">	<span class="keyword">for</span> key, val := <span class="keyword">range</span> params &#123;</div><div class="line">		v.Set(key, val)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	body := ioutil.NopCloser(strings.NewReader(v.Encode()))</div><div class="line">	client := &amp;http.Client&#123;&#125;</div><div class="line">	reqest, err := http.NewRequest(<span class="string">"POST"</span>, request_url, body)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> key, val := <span class="keyword">range</span> header &#123;</div><div class="line">		reqest.Header.Set(key, val)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	resp, err := client.Do(reqest)</div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line">	content, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"Fatal error "</span>, err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="keyword">string</span>(content))</div><div class="line">	<span class="keyword">return</span> <span class="keyword">string</span>(content)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>在使用golang的net/http发送http请求的时候，碰到了不少问题，总结了http的常见使用方式</p>
<h3 id="json格式传参"><a href="#json格式传参" class="headerlink" title="json格式传参"></a>js]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang执行定时脚本]]></title>
    <link href="http://www.cxyteam.com/2018/10/30/golang%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.cxyteam.com/2018/10/30/golang执行定时脚本/</id>
    <published>2018-10-30T15:22:55.000Z</published>
    <updated>2018-11-01T05:30:28.453Z</updated>
    <content type="html"><![CDATA[<p>第一次拿golang写业务的代码，其中需要使用定时脚本<br>注:「用的beego开发」</p>
<h3 id="如何执行定时脚本"><a href="#如何执行定时脚本" class="headerlink" title="如何执行定时脚本"></a>如何执行定时脚本</h3><p>注：「项目名称为api，在api/tasks/first_task.go文件写入如下代码」</p>
<p>使用toolbox的task及robfig/cron进行定时任务编写</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> tasks</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"github.com/astaxie/beego"</span></div><div class="line">    <span class="string">"github.com/astaxie/beego/toolbox"</span></div><div class="line">    <span class="string">"github.com/robfig/cron"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">//beego/toolbox/task实现</span></div><div class="line">	first_task := toolbox.NewTask(<span class="string">"first_task"</span>, <span class="string">"* * * * * *"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">        log.Printf(<span class="string">"\nNotification task ran at: %s\n"</span>, time.Now())</div><div class="line">        fmt.Print(time.Now())</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    err := first_task.Run()</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        beego.Error(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    toolbox.AddTask(<span class="string">"first_task"</span>, first_task)</div><div class="line">    toolbox.StartTask()</div><div class="line"></div><div class="line">    <span class="keyword">defer</span> toolbox.StopTask()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//robfig/cron实现</span></div><div class="line">    i := <span class="number">0</span></div><div class="line">    c := cron.New()</div><div class="line">    spec := <span class="string">"* * * * * *"</span></div><div class="line">    c.AddFunc(spec, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        i++</div><div class="line">        log.Println(<span class="string">"start"</span>, i)</div><div class="line">    &#125;)</div><div class="line">    c.Start()</div><div class="line">    <span class="keyword">select</span>&#123;&#125; <span class="comment">//阻塞主线程不退出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在main.go引入tasks<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    _ <span class="string">"api/routers"</span></div><div class="line">    <span class="string">"github.com/astaxie/beego"</span></div><div class="line">    _ <span class="string">"api/tasks"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    beego.Run()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次拿golang写业务的代码，其中需要使用定时脚本<br>注:「用的beego开发」</p>
<h3 id="如何执行定时脚本"><a href="#如何执行定时脚本" class="headerlink" title="如何执行定时脚本"></a>如何执行定时脚本</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用tcpdump排查zRangeByScore参数无效问题]]></title>
    <link href="http://www.cxyteam.com/2018/10/29/%E4%BD%BF%E7%94%A8tcpdump%E6%8E%92%E6%9F%A5zRangeByScore%E5%8F%82%E6%95%B0%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://www.cxyteam.com/2018/10/29/使用tcpdump排查zRangeByScore参数无效问题/</id>
    <published>2018-10-29T15:47:12.000Z</published>
    <updated>2018-11-01T13:07:59.226Z</updated>
    <content type="html"><![CDATA[<p>在做列表数据分页的时候，是将数据存储在redis的有序集合中实现的</p>
<p>核心代码如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zRangeByScore($key, <span class="string">'-inf'</span>, <span class="string">'+inf'</span>, <span class="keyword">array</span>(<span class="string">'limit'</span> =&gt; <span class="keyword">array</span>($start, $size)));</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在进行翻页的时候，传入start=10，size=10，没有获取到新一页的数据，而是返回有序集合所有的数据</p>
<h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><h3 id="排查命令是否写错"><a href="#排查命令是否写错" class="headerlink" title="排查命令是否写错"></a>排查命令是否写错</h3><p>注：「将start和size写成定值」</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zRangeByScore($key, <span class="string">'-inf'</span>, <span class="string">'+inf'</span>, <span class="keyword">array</span>(<span class="string">'limit'</span> =&gt; <span class="keyword">array</span>(<span class="number">10</span>, <span class="number">10</span>)));</div></pre></td></tr></table></figure>
<p>数据正常返回，排查传参问题</p>
<h3 id="打印start，size"><a href="#打印start，size" class="headerlink" title="打印start，size"></a>打印start，size</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</div><div class="line">  [<span class="string">"limit"</span>]=&gt;</div><div class="line">  <span class="keyword">array</span>(<span class="number">2</span>) &#123;</div><div class="line">    [<span class="number">0</span>]=&gt;</div><div class="line">    string(<span class="number">2</span>) <span class="string">"10"</span></div><div class="line">    [<span class="number">1</span>]=&gt;</div><div class="line">    string(<span class="number">2</span>) <span class="string">"10"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果出乎意料，start，size传入没有问题<br>可是传入的都是page=10，size=10<br>为什么两种方式的结果会不一样，redis最终执行的是什么命令呢？</p>
<h3 id="查看redis最终执行的命令"><a href="#查看redis最终执行的命令" class="headerlink" title="查看redis最终执行的命令"></a>查看redis最终执行的命令</h3><p>在服务器用tcpdump抓取redis的网络包<br>注：「在开发服务器执行tcpdump命令；redis端口为6379」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@test01v /]# tcpdump port 6379 and tcp -X -s 0</div></pre></td></tr></table></figure>
<p>当走传参的方式的时候，最终redis执行的命令是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">02:46:46.220417 IP local_host.45816 &gt; redis_host.6379: Flags [P.], seq 38:129, ack 6, win 29200, length 91</div><div class="line">	0x0000:  4500 0083 d940 4000 4006 32a2 ac11 0005  E....@@.@.2.....</div><div class="line">	0x0010:  0a83 77f9 b2f8 1875 e8b6 5ad8 4953 9e07  ..w....u..Z.IS..</div><div class="line">	0x0020:  5018 7210 2f08 0000 2a35 0d0a 2431 330d  P.r./...*5..$13.</div><div class="line">	0x0030:  0a5a 5241 4e47 4542 5953 434f 5245 0d0a  .ZRANGEBYSCORE..</div><div class="line">	0x0040:  2432 330d 0a70 6572 6665 6374 5f63 6f6d  $23..perfect_com</div><div class="line">	0x0050:  6d65 6e74 5f69 645f 6c69 7374 0d0a 2434  ment_id_list..$4</div><div class="line">	0x0060:  0d0a 2d69 6e66 0d0a 2434 0d0a 2b69 6e66  ..-inf..$4..+inf</div><div class="line">	0x0070:  0d0a 2431 300d 0a57 4954 4853 434f 5245  ..$10..WITHSCORE</div><div class="line">	0x0080:  530d 0a                                  S..</div></pre></td></tr></table></figure>
<p>可以看出传输的redis的命令为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZRANGEBYSCORE perfect_comment_id_list -inf +inf WITHSCORES</div></pre></td></tr></table></figure>
<p>没有limit参数信息，当然会返回有序集合所有的数据</p>
<p>对比传入数据后发现：<br>定值的时候传入的是数字类型，传参的方式传入的是字符串类型</p>
<p>猜测是因为php连接redis的拓展的问题<br>当传入的start，size参数为字符串类型的时候会被过滤掉</p>
<p>为什么要这样做呢，难道是redis不支持吗<br>测试后发现redis是支持的</p>
<p>愉快的将参数做了类型转换，问题得到解决</p>
<p>最后也没忘记给phpredis提了一个issue</p>
<p>「注：phpredis的版本为3.0.0」</p>
<p>后记：在tcpdump使用的时候，也可以用来查询执行的MySQL语句<br>比如说，当我需要去熟悉一个新业务或者排查bug的时候，我会将该业务的sql语句都抓取出来<br>命令如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -A -s 0 port 3306 and tcp &gt; ~/sql.log</div></pre></td></tr></table></figure>
<p>感兴趣的朋友可以试试</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做列表数据分页的时候，是将数据存储在redis的有序集合中实现的</p>
<p>核心代码如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1<]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tcpdump查看redis连接过程]]></title>
    <link href="http://www.cxyteam.com/2018/10/28/tcpdump%E6%9F%A5%E7%9C%8Bredis%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/"/>
    <id>http://www.cxyteam.com/2018/10/28/tcpdump查看redis连接过程/</id>
    <published>2018-10-28T13:06:28.000Z</published>
    <updated>2018-10-28T13:19:22.918Z</updated>
    <content type="html"><![CDATA[<p>在看tcpdump的手册的时候，突然想起tcp的三次握手，四次挥手；心血来潮，就用tcpdump抓取redis的连接过程。</p>
<p>操作如下：「redis的服务器是host_redis,端口为6379」</p>
<p>1、在redis的服务器，抓取6379及tcp的网络协议包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@test01v /]# tcpdump port 6379 and tcp -X -s 0</div></pre></td></tr></table></figure>
<p>2、在客户端使用telnet连接redis</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ telnet host_redis 6379</div><div class="line"></div><div class="line">    Trying host_redis...</div><div class="line"></div><div class="line">    Connected to host_redis</div><div class="line"></div><div class="line">    Escape character is &apos;^]&apos;.</div><div class="line"></div><div class="line">    ^]</div><div class="line"></div><div class="line">    telnet&gt; quit</div></pre></td></tr></table></figure>
<h3 id="tcpdump参数介绍"><a href="#tcpdump参数介绍" class="headerlink" title="tcpdump参数介绍"></a>tcpdump参数介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">port</div><div class="line"></div><div class="line">    指定端口号</div><div class="line"></div><div class="line">tcp</div><div class="line"></div><div class="line">    指定协议为tcp</div><div class="line"></div><div class="line">-X</div><div class="line"></div><div class="line">    以16进制和ASCII码形式显示每个报文</div><div class="line"></div><div class="line">-s</div><div class="line"></div><div class="line">    从每个分组中读取最开始的snaplen个字节，而不是默认的68个字节</div></pre></td></tr></table></figure>
<h3 id="tcpdump输出介绍"><a href="#tcpdump输出介绍" class="headerlink" title="tcpdump输出介绍"></a>tcpdump输出介绍</h3><p>注：「本机服务器为host_local」<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">02:45:1.622225 IP host_local.55638 &gt; host_redis.6379: Flags [S], seq 1105795559, win 29200, options [mss 1460,sackOK,TS val 43986276 ecr 0,nop,wscale 7], length 0</div></pre></td></tr></table></figure></p>
<h3 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">02:45:1.622225是时间</div><div class="line"></div><div class="line">host_local.55638 &gt; 是发送端主机和端口，符号‘ &gt;’ 表明数据的传输方向</div><div class="line"></div><div class="line">host_redis.6379接收端的主机名和端口</div><div class="line"></div><div class="line">Flags [S]TCP包中的标志信息</div><div class="line"></div><div class="line">    [S] 表示这是一个SYN请求</div><div class="line"></div><div class="line">    [S.] 表示这是一个SYN+ACK确认包: </div><div class="line">    </div><div class="line">    [.] 表示这是一个ACT确认包， (client)SYN-&gt;(server)SYN-&gt;(client)ACT 就是3次握手过程</div><div class="line">    </div><div class="line">    [P] 表示这个是一个数据推送，可以是从服务器端向客户端推送，也可以从客户端向服务器端推</div><div class="line">    </div><div class="line">    [F] 表示这是一个FIN包，是关闭连接操作，client/server都有可能发起</div><div class="line">    </div><div class="line">    [R] 表示这是一个RST包，与F包作用相同，但RST表示连接关闭时，仍然有数据未被处理。可以理解为是强制切断连接</div><div class="line"></div><div class="line">seq 1105795559 序列号</div><div class="line"></div><div class="line">win 29200 指滑动窗口的大小</div><div class="line"></div><div class="line">option </div><div class="line"></div><div class="line">length 0 指数据包的大小为0</div></pre></td></tr></table></figure>
<h3 id="tcp三次握手，四次挥手图示："><a href="#tcp三次握手，四次挥手图示：" class="headerlink" title="tcp三次握手，四次挥手图示："></a>tcp三次握手，四次挥手图示：</h3><p><img src="/img/redis/tcp.jpeg" alt="Al text" title="tcp"></p>
<h1 id="三次握手流程"><a href="#三次握手流程" class="headerlink" title="三次握手流程"></a>三次握手流程</h1><h3 id="client向server发送SYN"><a href="#client向server发送SYN" class="headerlink" title="client向server发送SYN"></a>client向server发送SYN</h3><p>注：「seq=x=2440373000」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23:32:26.882139 IP host_local.55638 &gt; host_redis.6379: Flags [SEW], seq 2440373000, win 65535, options [mss 1366,nop,wscale 5,nop,nop,TS val 776806643 ecr 0,sackOK,eol], length 0</div></pre></td></tr></table></figure>
<h3 id="server向client发送一个SYN，ACK包"><a href="#server向client发送一个SYN，ACK包" class="headerlink" title="server向client发送一个SYN，ACK包"></a>server向client发送一个SYN，ACK包</h3><p>注：「ack=x+1=2440373001；seq=y=3103132894」<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23:32:26.882181 IP host_redis.6379 &gt; host_local.55638: Flags [S.E], seq 3103132894, ack 2440373001, win 14480, options [mss 1460,sackOK,TS val 3145177219 ecr 776806643,nop,wscale 7], length 0</div></pre></td></tr></table></figure></p>
<h3 id="client向server响应一个ACK"><a href="#client向server响应一个ACK" class="headerlink" title="client向server响应一个ACK"></a>client向server响应一个ACK</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23:32:26.922149 IP host_local.55638 &gt; host_redis.6379: Flags [.], ack 1, win 4104, options [nop,nop,TS val 776806681 ecr 3145177219], length 0</div></pre></td></tr></table></figure>
<h1 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h1><h3 id="client向server发送FIN结束命令"><a href="#client向server发送FIN结束命令" class="headerlink" title="client向server发送FIN结束命令"></a>client向server发送FIN结束命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23:32:31.490726 IP host_local.55638 &gt; host_redis.6379: Flags [F.], seq 1, ack 1, win 4104, options [nop,nop,TS val 776811227 ecr 3145177219], length 0</div></pre></td></tr></table></figure>
<h3 id="server向client发送响应信息，"><a href="#server向client发送响应信息，" class="headerlink" title="server向client发送响应信息，"></a>server向client发送响应信息，</h3><p>注：表示收到client的结束信号，即将关闭连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23:32:31.490893 IP host_redis.6379 &gt; host_local.55638: Flags [.], ack 2, win 114, options [nop,nop,TS val 3145181828 ecr 776811227], length 0</div></pre></td></tr></table></figure></p>
<h3 id="server关闭连接，并发送FIN给client"><a href="#server关闭连接，并发送FIN给client" class="headerlink" title="server关闭连接，并发送FIN给client"></a>server关闭连接，并发送FIN给client</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23:32:31.490929 IP host_redis.6379 &gt; host_local.55638: Flags [F.], seq 1, ack 2, win 114, options [nop,nop,TS val 3145181828 ecr 776811227], length 0</div></pre></td></tr></table></figure>
<h3 id="client发送ACK给server进行确认"><a href="#client发送ACK给server进行确认" class="headerlink" title="client发送ACK给server进行确认"></a>client发送ACK给server进行确认</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23:32:31.533767 IP host_local.55638 &gt; host_redis.6379: Flags [.], ack 2, win 4104, options [nop,nop,TS val 776811267 ecr 3145181828], length 0</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在看tcpdump的手册的时候，突然想起tcp的三次握手，四次挥手；心血来潮，就用tcpdump抓取redis的连接过程。</p>
<p>操作如下：「redis的服务器是host_redis,端口为6379」</p>
<p>1、在redis的服务器，抓取6379及tcp的网]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis对象]]></title>
    <link href="http://www.cxyteam.com/2018/10/24/redis%E5%AF%B9%E8%B1%A1/"/>
    <id>http://www.cxyteam.com/2018/10/24/redis对象/</id>
    <published>2018-10-24T12:28:34.000Z</published>
    <updated>2018-10-24T13:00:17.554Z</updated>
    <content type="html"><![CDATA[<h1 id="redis对象"><a href="#redis对象" class="headerlink" title="redis对象"></a>redis对象</h1><pre><code>对象包含三部分：type，encoding，ptr
type：记录对象的类型
encoding：记录对象底层的数据结构
ptr：指向底层实现的数据结构的指针
</code></pre><p><img src="/img/redis/redis_object.png" alt="Alt text" title="redis-object"></p>
<h3 id="查看key的type类型"><a href="#查看key的type类型" class="headerlink" title="查看key的type类型"></a>查看key的type类型</h3><pre><code>type key
</code></pre><h3 id="查看key的encoding的值"><a href="#查看key的encoding的值" class="headerlink" title="查看key的encoding的值"></a>查看key的encoding的值</h3><pre><code>object encoding key
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="redis对象"><a href="#redis对象" class="headerlink" title="redis对象"></a>redis对象</h1><pre><code>对象包含三部分：type，encoding，ptr
type：记录对象的类型
enc]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2018年年中总结]]></title>
    <link href="http://www.cxyteam.com/2018/08/06/2018%E5%B9%B4%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <id>http://www.cxyteam.com/2018/08/06/2018年年中总结/</id>
    <published>2018-08-06T12:57:12.000Z</published>
    <updated>2018-08-06T12:58:29.891Z</updated>
    <content type="html"><![CDATA[<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><h1 id]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[设置disable_functions失效]]></title>
    <link href="http://www.cxyteam.com/2018/08/01/%E8%AE%BE%E7%BD%AEdisable-functions%E5%A4%B1%E6%95%88/"/>
    <id>http://www.cxyteam.com/2018/08/01/设置disable-functions失效/</id>
    <published>2018-08-01T12:51:50.000Z</published>
    <updated>2018-08-01T13:08:28.198Z</updated>
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><pre><code>使用docker-compose搭建了一套环境，在运行larveral框架的时候，报错&quot;get_cfg_var() has been disabled for security reasons in...&quot;
</code></pre><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><ol>
<li><p>登录php的docker容器</p>
</li>
<li><p>找到php.ini文件路径<br> php -i | grep php.ini</p>
</li>
<li><p>注释disable_functions<br> ;disable_functions = system,passthru,popen,phpinfo,proc_close,proc_open,dl,show_source,get_cfg_var</p>
</li>
<li><p>重启容器<br> docker-compose restart    </p>
</li>
<li><p>运行，依然报错</p>
</li>
<li><p>确认disable_functions选项<br> php -i| grep php.ini</p>
</li>
<li><p>php-fpm.conf的锅,果断注释<br> ;php_admin_value[disable_functions] = system,passthru,shell_exec,exec,popen,phpinfo,proc_close,proc_open,dl,show_source,get_cfg_var</p>
</li>
<li><p>完美解决</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><pre><code>使用docker-compose搭建了一套环境，在运行larveral框架的时候，报错&quot;get_cfg_var()]]>
    </summary>
    
      <category term="PHP" scheme="http://www.cxyteam.com/tags/PHP/"/>
    
      <category term="PHP" scheme="http://www.cxyteam.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git查看某人的提交文件列表]]></title>
    <link href="http://www.cxyteam.com/2018/07/31/git%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%BA%BA%E7%9A%84%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8/"/>
    <id>http://www.cxyteam.com/2018/07/31/git查看某人的提交文件列表/</id>
    <published>2018-07-31T11:13:30.000Z</published>
    <updated>2018-07-31T11:19:30.458Z</updated>
    <content type="html"><![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><pre><code>想查看很久以前的某一次提交所改动的文件列表
</code></pre><h1 id="查看某人所有的提交"><a href="#查看某人所有的提交" class="headerlink" title="查看某人所有的提交"></a>查看某人所有的提交</h1><pre><code>git log --author=sunnysmilez
</code></pre><h1 id="查看某次提交的文件列表"><a href="#查看某次提交的文件列表" class="headerlink" title="查看某次提交的文件列表"></a>查看某次提交的文件列表</h1><pre><code>git whatchanged | grep -A 10  commitid(这里为上一个步骤查出来的commitid)
</code></pre><h1 id="查看某次提交具体改的内容"><a href="#查看某次提交具体改的内容" class="headerlink" title="查看某次提交具体改的内容"></a>查看某次提交具体改的内容</h1><pre><code>git show commitid
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><pre><code>想查看很久以前的某一次提交所改动的文件列表
</code></pre><h1 id="查看某人所有的提交">]]>
    </summary>
    
      <category term="GIT" scheme="http://www.cxyteam.com/tags/GIT/"/>
    
      <category term="GIT" scheme="http://www.cxyteam.com/categories/GIT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何阅读一本书]]></title>
    <link href="http://www.cxyteam.com/2018/07/10/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>http://www.cxyteam.com/2018/07/10/如何阅读一本书/</id>
    <published>2018-07-09T17:22:30.000Z</published>
    <updated>2018-07-09T17:31:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="《如何阅读一本书》"><a href="#《如何阅读一本书》" class="headerlink" title="《如何阅读一本书》"></a>《如何阅读一本书》</h1><pre><code>再次读起这本书的时候，依然觉得自己欠缺很多，决定书中的步骤给记录下来，下次读书的时候，按照步骤来进行练习
</code></pre><h1 id="检视阅读"><a href="#检视阅读" class="headerlink" title="检视阅读"></a>检视阅读</h1><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>阅读书名页，在看序</li>
<li>研究目录页</li>
<li>书中索引</li>
<li>出版者介绍</li>
<li>挑几个和主题相关的章节看看</li>
<li>随意翻翻</li>
</ol>
<h3 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h3><ol>
<li>在阅读的时候别陷入细节，尽量做到完整的读完</li>
<li>抓住主旨，不必每个字都细看</li>
</ol>
<h3 id="阅读时需要找的问题答案"><a href="#阅读时需要找的问题答案" class="headerlink" title="阅读时需要找的问题答案"></a>阅读时需要找的问题答案</h3><ol>
<li>这是一本怎样的书</li>
<li>这本书都说了什么</li>
<li>作者借着怎样的整体架构来发展他的观点和陈序他的理解</li>
<li>这本书说的有道理吗</li>
<li>这本书和我有什么关系</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="《如何阅读一本书》"><a href="#《如何阅读一本书》" class="headerlink" title="《如何阅读一本书》"></a>《如何阅读一本书》</h1><pre><code>再次读起这本书的时候，依然觉得自己欠缺很多，决定书中的步骤给记录下来]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker部署mysql的疑问]]></title>
    <link href="http://www.cxyteam.com/2018/07/02/docker%E9%83%A8%E7%BD%B2mysql%E7%9A%84%E7%96%91%E9%97%AE/"/>
    <id>http://www.cxyteam.com/2018/07/02/docker部署mysql的疑问/</id>
    <published>2018-07-02T12:52:34.000Z</published>
    <updated>2018-07-02T17:34:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="mysql的初始密码是什么"><a href="#mysql的初始密码是什么" class="headerlink" title="mysql的初始密码是什么"></a>mysql的初始密码是什么</h1><pre><code>设置环境变量：MYSQL_ROOT_PASSWORD
eg:
   docker run --name=mysql  -e MYSQL_ROOT_PASSWORD=123123 -e MYSQL_DATABASE=test1 -p 3307:3306 -d mysql_image_name
   注释：
     --name 指定容器名称
     -e 设置环境变量
        MYSQL_ROOT_PASSWORD   设置root的初始密码
        MYSQL_USER，MYSQL_PASSWORD  设置新用户及密码
        MYSQL_DATABASE 指定镜像启动容器时创建的数据库
     -p 设置端口映射，将宿主机端口3307映射到容器端口3306
     -d 后台运行
     mysql_image_name  镜像的名称
</code></pre><h1 id="mysql的数据会不会因为docker重启就消失了"><a href="#mysql的数据会不会因为docker重启就消失了" class="headerlink" title="mysql的数据会不会因为docker重启就消失了"></a>mysql的数据会不会因为docker重启就消失了</h1><pre><code>进行数据卷的挂载
eg:
    docker run --namee=mysql -e MYSQL_ROOT_PASSWORD=123123 -p 3307:3306 -v /data/mysql:/var/lib/mysql -d mysql_image_name
    注释：
        -v 设置挂载卷 将宿主机的/data/mysql挂载到容器的/var/lib/mysql
        这样重启的时候数据不会丢失，因为在宿主机上
</code></pre><h1 id="如何初始mysql数据"><a href="#如何初始mysql数据" class="headerlink" title="如何初始mysql数据"></a>如何初始mysql数据</h1><pre><code>将sql文件复制到mysql容器
    docker cp a.sql mysql_docker:/tmp

登录mysql容器
    docker exec -it mysql_docker /bin/bash

进入mysql    
    mysql -uroot -p

选择库，导入sql文件
    use database_name;
    source /tmp/a.sql
</code></pre><h1 id="乱码问题解决"><a href="#乱码问题解决" class="headerlink" title="乱码问题解决"></a>乱码问题解决</h1><pre><code>挂载my.cnf
mysql的配置文件在：/var/lib/mysql/my.cnf
eg：
    docker run -d --name=mysql -e MYSQL_ROOT_PASSWORD=123123 -e MYSQL_DATABASE=test1 -p 3308:3306 -v /data/htdocs/mysql/data:/var/lib/mysql -v /data/htdocs/mysql/conf/my.cnf:/var/lib/mysql/my.cnf eromero/mysql5.1.73

my.cnf 内容如下：    
    # Example MySQL config file for medium systems.
    #
    # This is for a system with little memory (32M - 64M) where MySQL plays
    # an important part, or systems up to 128M where MySQL is used together with
    # other programs (such as a web server)
    #
    # MySQL programs look for option files in a set of
    # locations which depend on the deployment platform.
    # You can copy this option file to one of those
    # locations. For information about these locations, see:
    # http://dev.mysql.com/doc/mysql/en/option-files.html
    #
    # In this file, you can use all long options that a program supports.
    # If you want to know which options a program supports, run the program
    # with the &quot;--help&quot; option.
    # The following options will be passed to all MySQL clients
    [client]
    default-character-set=utf8
    #password = your_password
    port = 3306
    socket = /tmp/mysql.sock
    # Here follows entries for some specific programs
    # The MySQL server
    [mysqld]
    character-set-server=utf8
    init_connect=&apos;SET NAMES utf8&apos;
    port = 3306
    socket = /tmp/mysql.sock
    skip-external-locking
    key_buffer_size = 16M
    max_allowed_packet = 1M
    table_open_cache = 64
    sort_buffer_size = 512K
    net_buffer_length = 8K
    read_buffer_size = 256K
    read_rnd_buffer_size = 512K
    myisam_sort_buffer_size = 8M
    character-set-server=utf8
    secure_file_priv=&apos;&apos;
    init_connect=&apos;SET NAMES utf8&apos;
    # Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement,
    # if all processes that need to connect to mysqld run on the same host.
    # All interaction with mysqld must be made via Unix sockets or named pipes.
    # Note that using this option without enabling named pipes on Windows
    # (via the &quot;enable-named-pipe&quot; option) will render mysqld useless!
    #
    #skip-networking

    # Replication Master Server (default)
    # binary logging is required for replication
    log-bin=mysql-bin

    # binary logging format - mixed recommended
    binlog_format=mixed

    # required unique id between 1 and 2^32 - 1
    # defaults to 1 if master-host is not set
    # but will not function as a master if omitted
    server-id = 1    
    # Replication Slave (comment out master section to use this)
    #
    # To configure this host as a replication slave, you can choose between
    # two methods :
    #
    # 1) Use the CHANGE MASTER TO command (fully described in our manual) -
    # the syntax is:
    #
    # CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;,
    # MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ;
    #
    # where you replace &lt;host&gt;, &lt;user&gt;, &lt;password&gt; by quoted strings and
    # &lt;port&gt; by the master&apos;s port number (3306 by default).
    #
    # Example:
    #
    # CHANGE MASTER TO MASTER_HOST=&apos;125.564.12.1&apos;, MASTER_PORT=3306,
    # MASTER_USER=&apos;joe&apos;, MASTER_PASSWORD=&apos;secret&apos;;
    #
    # OR
    #
    # 2) Set the variables below. However, in case you choose this method, then
    # start replication for the first time (even unsuccessfully, for example
    # if you mistyped the password in master-password and the slave fails to
    # connect), the slave will create a master.info file, and any later
    # change in this file to the variables&apos; values below will be ignored and
    # overridden by the content of the master.info file, unless you shutdown
    # the slave server, delete master.info and restart the slaver server.
    # For that reason, you may want to leave the lines below untouched
    # (commented) and instead use CHANGE MASTER TO (see above)
    #
    # required unique id between 2 and 2^32 - 1
    # (and different from the master)
    # defaults to 2 if master-host is set
    # but will not function as a slave if omitted
    #server-id = 2
    #
    # The replication master for this slave - required
    #master-host = &lt;hostname&gt;
    #
    # The username the slave will use for authentication when connecting
    # to the master - required
    #master-user = &lt;username&gt;
    #
    # The password the slave will authenticate with when connecting to
    # the master - required
    #master-password = &lt;password&gt;
    #
    # The port the master is listening on.
    # optional - defaults to 3306
    #master-port = &lt;port&gt;
    #
    # binary logging - not required for slaves, but recommended
    #log-bin=mysql-bin

    # Uncomment the following if you are using InnoDB tables
    #innodb_data_home_dir = /usr/local/mysql/data
    #innodb_data_file_path = ibdata1:10M:autoextend
    #innodb_log_group_home_dir = /usr/local/mysql/data
    # You can set .._buffer_pool_size up to 50 - 80 %
    # of RAM but beware of setting memory usage too high
    #innodb_buffer_pool_size = 16M
    #innodb_additional_mem_pool_size = 2M
    # Set .._log_file_size to 25 % of buffer pool size
    #innodb_log_file_size = 5M
    #innodb_log_buffer_size = 8M
    #innodb_flush_log_at_trx_commit = 1
    #innodb_lock_wait_timeout = 50

    [mysqldump]
    quick
    max_allowed_packet = 16M

    [mysql]
    no-auto-rehash
    # Remove the next comment character if you are not familiar with SQL
    #safe-updates
    default-character-set=utf8

    [myisamchk]
    key_buffer_size = 20M
    sort_buffer_size = 20M
    read_buffer = 2M
    write_buffer = 2M

    [mysqlhotcopy]
    interactive-timeout
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="mysql的初始密码是什么"><a href="#mysql的初始密码是什么" class="headerlink" title="mysql的初始密码是什么"></a>mysql的初始密码是什么</h1><pre><code>设置环境变量：MYSQL_ROOT_]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PhantomJS截图工具]]></title>
    <link href="http://www.cxyteam.com/2018/06/28/PhantomJS%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.cxyteam.com/2018/06/28/PhantomJS截图工具/</id>
    <published>2018-06-28T12:41:52.000Z</published>
    <updated>2018-07-02T13:41:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="安装PhantomJS"><a href="#安装PhantomJS" class="headerlink" title="安装PhantomJS"></a>安装PhantomJS</h1><pre><code>直接在官网下载编译好的包就行
http://phantomjs.org/download.html
</code></pre><h1 id="截图使用介绍"><a href="#截图使用介绍" class="headerlink" title="截图使用介绍"></a>截图使用介绍</h1><pre><code>1、写一个需要被截图的页面
    用www.baidu.com做例子

2、写截图的js（test.js）
    var page = require(&apos;webpage&apos;).create(),
        system = require(&apos;system&apos;),
        address;

    page.viewportSize = { width: 720, height: 1247 };

    // 如果命令行没有给出网址
    if (system.args.length === 1) {
        console.log(&apos;Usage: page.js &lt;some URL&gt;&apos;);
        phantom.exit();
    }

    address = system.args[1];
    id = system.args[2];

    page.open(address, function (status) {
        page.evaluate(function() {
            document.body.bgColor = &apos;white&apos;;
        });

        page.render(&apos;/tmp/&apos;+id+&apos;.jpeg&apos;, {format: &apos;jpeg&apos;, quality: &apos;70&apos;});

        phantom.exit();
    });

3、运行phantomjs的服务端代码(a.php)
    $str = &apos;/usr/local/phantomjs/bin/phantomjs test.js http://www.baidu.com &apos;.$id;
    shell_exec($str);
    注释：
        /usr/local/phantomjs/bin/phantomjs是我的命令安装路径
        test.js 是js地址
        http://www.baidu.com 是需要截图的网站
        $id     是传入的参数
</code></pre><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><pre><code>官网
    http://phantomjs.org/

中文
    http://javascript.ruanyifeng.com/tool/phantomjs.html
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装PhantomJS"><a href="#安装PhantomJS" class="headerlink" title="安装PhantomJS"></a>安装PhantomJS</h1><pre><code>直接在官网下载编译好的包就行
http://phan]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos安装docker]]></title>
    <link href="http://www.cxyteam.com/2018/06/27/centos%E5%AE%89%E8%A3%85docker/"/>
    <id>http://www.cxyteam.com/2018/06/27/centos安装docker/</id>
    <published>2018-06-27T13:48:57.000Z</published>
    <updated>2018-06-27T13:53:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="更新epel第三方软件库"><a href="#更新epel第三方软件库" class="headerlink" title="更新epel第三方软件库"></a>更新epel第三方软件库</h1><pre><code>yum install epel-release
</code></pre><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><pre><code>yum install docker-io
</code></pre><h1 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h1><pre><code>docker version 或者docker -h    
</code></pre><h1 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h1><pre><code>sevice docker start
</code></pre><h1 id="更改镜像源"><a href="#更改镜像源" class="headerlink" title="更改镜像源"></a>更改镜像源</h1><pre><code>vim /etc/docker/daemon.json
添加如下内容：
    {
      &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]
    }    
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="更新epel第三方软件库"><a href="#更新epel第三方软件库" class="headerlink" title="更新epel第三方软件库"></a>更新epel第三方软件库</h1><pre><code>yum install epel-relea]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vm搭建docker-swarm]]></title>
    <link href="http://www.cxyteam.com/2018/06/27/vm%E6%90%AD%E5%BB%BAdocker-swarm/"/>
    <id>http://www.cxyteam.com/2018/06/27/vm搭建docker-swarm/</id>
    <published>2018-06-27T02:38:52.000Z</published>
    <updated>2018-07-11T17:08:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="安装vm"><a href="#安装vm" class="headerlink" title="安装vm"></a>安装vm</h1><h1 id="安装cento7-0（至少7-0以上才行）"><a href="#安装cento7-0（至少7-0以上才行）" class="headerlink" title="安装cento7.0（至少7.0以上才行）"></a>安装cento7.0（至少7.0以上才行）</h1><h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><h3 id="静态网络"><a href="#静态网络" class="headerlink" title="静态网络"></a>静态网络</h3><pre><code>1、关闭防火墙
    systemctl stop firewalld.service #停止firewall
    systemctl disable firewalld.service #禁止firewall开机启动

2、配置网络
    设置vm为桥接
        在vm-&gt;审核之后-&gt;网络-&gt;连接方式选择桥接网卡-&gt;界面名称（看你希望桥接你本机电脑的哪个网络，en0一般是wifi）

    vim /etc/sysconfig/network-scripts/ifcfg-eth0
        DEVICE=eth0
        HWADDR=08:00:27:D8:2C:F8
        TYPE=Ethernet
        UUID=fd397c03-6719-4cf3-8e88-e6df26256ba1
        ONBOOT=yes
        NM_CONTROLLED=yes
        BOOTPROTO=static
        IPADDR=10.17.8.108
        NETMASK=255.255.192.0
        GATEWAY=10.17.0.1
        USERCTL=no
        DNS1=10.16.0.222
        DNS2=114.114.114.114

    注意：
        IPADDR保持和主机在同一个网段
        netmask，GATEWAY保持和你的主机一致

    vim /etc/sysconfig/network
        NETWORKING=yes
        HOSTNAME=swarm-node1
        GATEWAY=10.17.0.1

    重启
        service network restart
</code></pre><h3 id="动态网络"><a href="#动态网络" class="headerlink" title="动态网络"></a>动态网络</h3><pre><code>比较坑的地方，公司的网线各种代理，但是吧，网线又能翻墙，wifi不能翻墙，各种折腾桥接到usb网线不通，直接换成网络地址转换NAT
vim /etc/sysconfig/network-scripts/ifcfg-eth0    
    DEVICE=eth0
    HWADDR=08:00:27:D8:2C:F8
    TYPE=Ethernet
    UUID=fd397c03-6719-4cf3-8e88-e6df26256ba1
    ONBOOT=yes
    NM_CONTROLLED=yes
    BOOTPROTO=dhcp
    USERCTL=no
重启，ping www.baidu.com 果断能上网还能翻墙，爽歪歪
</code></pre><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><ol>
<li><p>安装需要的依赖包<br> yum install -y yum-utils device-mapper-persistent-data</p>
</li>
<li><p>配置稳定仓库</p>
<pre><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre></li>
<li><p>安装指定版本<br> 查看版本</p>
<pre><code>yum list docker-ce --showduplicates | sort -r
</code></pre><p> 安装18.03.1.ce-1.el7版本(这里可以在上面的列表中查询自己需要的版本)</p>
<pre><code>yum -y install docker-ce-18.03.1.ce-1.el7.centos.x86_64
</code></pre></li>
<li><p>查看版本<br> docker version</p>
</li>
<li><p>启动docker<br> systemctl start docker</p>
</li>
<li><p>docker开机自启动<br> systemctl enable docker</p>
</li>
</ol>
<h1 id="测试docker-swarm"><a href="#测试docker-swarm" class="headerlink" title="测试docker swarm"></a>测试docker swarm</h1><pre><code>docker swarm
</code></pre><h1 id="设置国内镜像源"><a href="#设置国内镜像源" class="headerlink" title="设置国内镜像源"></a>设置国内镜像源</h1><h3 id="设置镜像源"><a href="#设置镜像源" class="headerlink" title="设置镜像源"></a>设置镜像源</h3><ol>
<li>daocloud curl -sSL <a href="https://get.daocloud.io/daotools/set_mirror.sh" target="_blank" rel="external">https://get.daocloud.io/daotools/set_mirror.sh</a> | sh -s 你的地址  在daocloud能看到这个命令</li>
<li>编辑这个文件：/etc/docker/daemon.json，内容如下<pre><code>{&quot;registry-mirrors&quot;: [&quot;镜像地址&quot;]}
</code></pre></li>
</ol>
<h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><pre><code>sudo systemctl restart docker
</code></pre><h1 id="设置主机名称"><a href="#设置主机名称" class="headerlink" title="设置主机名称"></a>设置主机名称</h1><pre><code>hostnamectl set-hostname swarm-node-1       swarm-node-1为我要设置的主机的名称   
</code></pre><h1 id="重启机器"><a href="#重启机器" class="headerlink" title="重启机器"></a>重启机器</h1><h1 id="安装swarm"><a href="#安装swarm" class="headerlink" title="安装swarm"></a>安装swarm</h1><pre><code>我的docker版本里面自带的，不需要安装
</code></pre><h1 id="设置mannage，ip为当前机器的ip（添加主节点）"><a href="#设置mannage，ip为当前机器的ip（添加主节点）" class="headerlink" title="设置mannage，ip为当前机器的ip（添加主节点）"></a>设置mannage，ip为当前机器的ip（添加主节点）</h1><pre><code>docker swarm init --advertise-addr 192.168.1.110

显示如下信息：
Swarm initialized: current node (dbpnzm7m57nc060ws4of92uh2) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-0mph6qu3756p99i2hl1soaxxy6zl6h0jnpu07pf2b46q8x5s1u-8nizhk0z629pbe4rfjskdjx97 192.168.1.110:2377

To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.
</code></pre><h1 id="在节点机器执行如下命令（加入主节点）"><a href="#在节点机器执行如下命令（加入主节点）" class="headerlink" title="在节点机器执行如下命令（加入主节点）"></a>在节点机器执行如下命令（加入主节点）</h1><pre><code>docker swarm join --token SWMTKN-1-0mph6qu3756p99i2hl1soaxxy6zl6h0jnpu07pf2b46q8x5s1u-8nizhk0z629pbe4rfjskdjx97 192.168.1.110:2377
</code></pre><h1 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h1><pre><code>docker node ls
</code></pre><h1 id="安装docker-swarm图形化界面"><a href="#安装docker-swarm图形化界面" class="headerlink" title="安装docker swarm图形化界面"></a>安装docker swarm图形化界面</h1><ol>
<li><p>在manage机器执行命令<br> docker service create \<br> –name portainer \<br> –publish 9000:9000 \<br> –constraint ‘node.role == manager’ \<br> –mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \<br> portainer/portainer \<br> -H unix:///var/run/docker.sock</p>
</li>
<li><p>访问地址<br> ip:9000   ip为manage的ip地址，eg：192.168.1.110:9000 我的manage地址是192.168.1.110</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装vm"><a href="#安装vm" class="headerlink" title="安装vm"></a>安装vm</h1><h1 id="安装cento7-0（至少7-0以上才行）"><a href="#安装cento7-0（至少7-0以上才行）" c]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git服务搭建]]></title>
    <link href="http://www.cxyteam.com/2018/06/26/git%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.cxyteam.com/2018/06/26/git服务搭建/</id>
    <published>2018-06-26T13:02:45.000Z</published>
    <updated>2018-06-26T14:06:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><pre><code>yum install git
</code></pre><h1 id="初始化git库（在-data目录下）"><a href="#初始化git库（在-data目录下）" class="headerlink" title="初始化git库（在/data目录下）"></a>初始化git库（在/data目录下）</h1><pre><code>git init --bare test.git
</code></pre><h1 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="修改目录权限"></a>修改目录权限</h1><pre><code>chmod -R 755 /data
</code></pre><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><pre><code>useradd test
</code></pre><h1 id="创建密码"><a href="#创建密码" class="headerlink" title="创建密码"></a>创建密码</h1><pre><code>passwd test
</code></pre><h1 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h1><pre><code>git clone test@ip:/data/test.git
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><pre><code>yum install git
</code></pre><h1 id="初始化git库（在-dat]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker-compose配置laravel环境]]></title>
    <link href="http://www.cxyteam.com/2018/06/21/docker-compose%E9%85%8D%E7%BD%AElaravel%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.cxyteam.com/2018/06/21/docker-compose配置laravel环境/</id>
    <published>2018-06-21T02:43:07.000Z</published>
    <updated>2018-06-25T16:34:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="docker-compose搭建lareval环境遇到的坑"><a href="#docker-compose搭建lareval环境遇到的坑" class="headerlink" title="docker-compose搭建lareval环境遇到的坑"></a>docker-compose搭建lareval环境遇到的坑</h1><h3 id="images不存在"><a href="#images不存在" class="headerlink" title="images不存在"></a>images不存在</h3><pre><code>1、修改docker的镜像源
2、docker search 确认是否存在
</code></pre><h1 id="ENTRYPOINT脚本路径"><a href="#ENTRYPOINT脚本路径" class="headerlink" title="ENTRYPOINT脚本路径"></a>ENTRYPOINT脚本路径</h1><pre><code>1、先复制到/usr/local/bin目录下
2、在填入绝对路径
eg：（dockerfile文件中）
    COPY ./docker-entrypoint.sh /usr/local/bin/
    ENTRYPOINT [&quot;/usr/local/bin/docker-entrypoint.sh&quot;]
</code></pre><h1 id="ENTRYPOINT脚本权限"><a href="#ENTRYPOINT脚本权限" class="headerlink" title="ENTRYPOINT脚本权限"></a>ENTRYPOINT脚本权限</h1><pre><code>1、脚本记得给权限（dockerfile文件中）
eg: RUN chmod 755 /usr/local/bin/docker-entrypoint.sh
</code></pre><h1 id="mysql默认密码及库"><a href="#mysql默认密码及库" class="headerlink" title="mysql默认密码及库"></a>mysql默认密码及库</h1><pre><code>设置两个环境：（docker-compose.yaml文件中）
1、mysql初始密码：MYSQL_ROOT_PASSWORD
2、mysql初始化创建的数据库：MYSQL_DATABASE
eg: 
    MYSQL_ROOT_PASSWORD: 123123
    MYSQL_DATABASE: laravel_tet
</code></pre><h1 id="初始化sql"><a href="#初始化sql" class="headerlink" title="初始化sql"></a>初始化sql</h1><pre><code>1、搭建开发环境的时候，肯定会有已有的数据结果和数据，需要进行初始化
2、在docker mysql的官方镜像中，镜像首次启动时，会自动执行这个目录（/docker-entrypoint-initdb.d）下的脚本
3、所以我们直接把需要执行的脚本挂载到执行的目录中去
eg：
    volumes:
        - ./build/sql:/docker-entrypoint-initdb.d
</code></pre><h1 id="修改image名称"><a href="#修改image名称" class="headerlink" title="修改image名称"></a>修改image名称</h1><pre><code>1、设置image的值；如果是根据dockerfile来build，那么就是image的值；如果image是dockerhub中的镜像名称，那么就是这个镜像名称
eg:（docker-compose.yaml文件中）
    第一种：(名称为test_laravel_nginx)
        build: ./build/docker/nginx
        image: test_laravel_nginx

    第二种：（名称为redis）
        image: redis:latest
</code></pre><h1 id="修改容器名称"><a href="#修改容器名称" class="headerlink" title="修改容器名称"></a>修改容器名称</h1><pre><code>1、设置container_name的值
eg：（docker-compose.yaml文件中）
    container_name: test_laravel_php
</code></pre><h1 id="nginx日志查看"><a href="#nginx日志查看" class="headerlink" title="nginx日志查看"></a>nginx日志查看</h1><h1 id="php日志查看"><a href="#php日志查看" class="headerlink" title="php日志查看"></a>php日志查看</h1><h1 id="strace使用"><a href="#strace使用" class="headerlink" title="strace使用"></a>strace使用</h1><pre><code>1、使用特权启动：(--privileged)
    在run的时候使用
        docker run -t -i --privileged container_name /bin/bash
    在docker-compose使用
        privileged: true

2、docker-compose中设置权限
    cap_add: 添加linux的部分功能
    cap_drop：删除linux的部分功能
    eg:
        在run的时候使用
            docker run -t -i --cap_add=ALL  --cap_drop=MKNOD container_name /bin/bash

        在docker-compose使用
            cap_add:
              - ALL

            cap_drop:
              - NET_ADMIN
              - SYS_ADMIN
</code></pre><h1 id="如何跑crontab"><a href="#如何跑crontab" class="headerlink" title="如何跑crontab"></a>如何跑crontab</h1><pre><code>1、安装crontab
2、在docker-entrypoint.sh中写入如下语句：
        service crond start
        crontab /data/htdocs/test_laravel/app/Console/crontab
</code></pre><h1 id="nginx的容器如何安装软件"><a href="#nginx的容器如何安装软件" class="headerlink" title="nginx的容器如何安装软件"></a>nginx的容器如何安装软件</h1><pre><code>使用apt-get安装
eg:    
    1、apt-get update
    2、apt-get install vim
    3、apt-get install procps    (安装ps命令工具)
</code></pre><h1 id="容器一启动就退出"><a href="#容器一启动就退出" class="headerlink" title="容器一启动就退出"></a>容器一启动就退出</h1><pre><code>1、查看日志（docker logs container_name）
2、/usr/sbin/sshd -D
3、如果可以启动，登录容器查看
4、查看容器信息（docker inspect container_name）
</code></pre><h1 id="如何对外提供访问"><a href="#如何对外提供访问" class="headerlink" title="如何对外提供访问"></a>如何对外提供访问</h1><pre><code>端口映射
    1、宿主机解析域名
    2、设置端口映射
    3、访问宿主机指定端口
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="docker-compose搭建lareval环境遇到的坑"><a href="#docker-compose搭建lareval环境遇到的坑" class="headerlink" title="docker-compose搭建lareval环境遇到的坑"></a]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker-compose文件语法]]></title>
    <link href="http://www.cxyteam.com/2018/06/20/docker-compose%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95/"/>
    <id>http://www.cxyteam.com/2018/06/20/docker-compose文件语法/</id>
    <published>2018-06-20T02:51:16.000Z</published>
    <updated>2018-06-20T12:58:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><pre><code>以&quot;yml&quot;或者&quot;yaml&quot;为文件后缀
</code></pre><h1 id="version"><a href="#version" class="headerlink" title="version"></a>version</h1><pre><code>设置docker compose解析语法版本号
eg: version: &quot;v1&quot;
</code></pre><h1 id="services"><a href="#services" class="headerlink" title="services"></a>services</h1><pre><code>一个结构体，表示服务配置开始
</code></pre><h1 id="build"><a href="#build" class="headerlink" title="build"></a>build</h1><pre><code>指定dockerfile所在路径，compose将使用该dickerfile构建镜像
eg: build: /dockerfile/path
</code></pre><h1 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h1><pre><code>设置容器名称，注意如果指定了容器名称，必须保证名称唯一
eg：
    container_name: test_php
</code></pre><h1 id="image"><a href="#image" class="headerlink" title="image"></a>image</h1><pre><code>指定要从中启动容器的镜像(如果是通过build方式构建镜像，设置这个参数相当于给镜像重命名)
eg: image: mysql:5.7
</code></pre><h1 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h1><pre><code>暴露端口信息，格式为：(宿主机端口:容器端口)；端口号最好大于60，因为yaml解析xx:yy这种格式为60进制
eg: ports: 
        - 8001:80
</code></pre><h1 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h1><pre><code>暴露端口，不映射到主机，只被链接访问
eg: expose:
        22
</code></pre><h1 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h1><pre><code>设置环境变量
eg : environment:
        - ENV:dev
</code></pre><h1 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h1><pre><code>从文件中获取环境变量，可以单个文件路径或者文件列表；

注意：
    如果docker-compose -f FILE 指定了模板文件，则 env_file 中路径会基于模板文件路径
    如果文件中指定的变量与environment中的变量有冲突，则以后者为准
    env文件中支持&apos;#&apos;好注释，使用ENV=dev这样的格式
eg: env_file:
        - ./build/env/php-fpm.env
        - ./build/env/nginx.env
</code></pre><h1 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h1><pre><code>挂载卷盘；宿主机目录:容器目录
volumes:
    ./public:/data/public
</code></pre><h1 id="links"><a href="#links" class="headerlink" title="links"></a>links</h1><pre><code>链接到其他服务中的容器(使用服务名称)
eg: links: 
        - test_mysql
        - test_redis
</code></pre><h1 id="external-links"><a href="#external-links" class="headerlink" title="external_links"></a>external_links</h1><pre><code>链接到docker-compose.yaml外部的容器，可以说非compose管理的容器
eg: external_links: 
        - test_mysql
        - test_redis
</code></pre><h1 id="command"><a href="#command" class="headerlink" title="command"></a>command</h1><pre><code>覆盖容器启动后默认执行的命令
eg: command: php-fpm
</code></pre><h1 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h1><pre><code>基于已有服务进行他拓展
eg: 我们有个公有的php服务（common-php.yaml）, 内容如下
    common_php:
        build: ./build/common_php
        command: php-fpm
        links:
          - jyd_mysql
          - jyd_redis

这时候有个新的需求，要求搭建一个新的php，需要设置一个环境变量，我们可以这样做（dev_xx.yaml）,内如如下：
    dev_xx:
    extends:
    file: common-php.yaml
    service: common_php
    environment:
        - DEBUG=true

后者的dev_xx.yaml会继承common-php.yaml中的common_php服务
</code></pre><h1 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h1><pre><code>添加主机名映射额
eg: extra_hosts
        - &quot;test.com:10.11.2.12&quot;
        - &quot;demo.com:10.12.22.42&quot;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><pre><code>以&quot;yml&quot;或者&quot;yaml&quot;为文件后缀
</code></pre><]]>
    </summary>
    
  </entry>
  
</feed>