<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[狂奔的菜鸟]]></title>
  <subtitle><![CDATA[当你的实力支撑不起你的野心的时候，静下心来好好学习吧！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.cxyteam.com/"/>
  <updated>2018-01-03T13:40:25.000Z</updated>
  <id>http://www.cxyteam.com/</id>
  
  <author>
    <name><![CDATA[狂奔的菜鸟]]></name>
    <email><![CDATA[phpchengxuyuan@sina.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[redis-sds源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/01/03/redis-sds%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/01/03/redis-sds源码阅读/</id>
    <published>2018-01-03T03:57:42.000Z</published>
    <updated>2018-01-03T13:40:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="sds结构"><a href="#sds结构" class="headerlink" title="sds结构"></a>sds结构</h1><pre><code>struct sdshdr {

    /** buf 中已占用空间的长度*/
    int len;

    /** buf 中剩余可用空间的长度*/
    int free;

    /** 数据空间*/ 
    /** 柔性数组*/
    char buf[];
};
</code></pre><p><img src="/img/redis/sds.jpg" alt="Alt text" title="sds结构"></p>
<h1 id="获取字符串长度复杂度为O-1"><a href="#获取字符串长度复杂度为O-1" class="headerlink" title="获取字符串长度复杂度为O(1)"></a>获取字符串长度复杂度为O(1)</h1><pre><code>在sds的结构中，保存了sds的占用空间的长度，可以使用sdslen进行读取，代码实现如下：

static inline size_t sdslen(const sds s) {
    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));
    return sh-&gt;len;
}
</code></pre><h1 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h1><pre><code>二进制安全：比如说在c语言中，strlen计算长度，是依赖于特殊的字符&apos;\0&apos;来判断是否到达字符串的最末尾，所以对于&quot;aaa\0bbb&quot;来说，它就不是二进制安全的
sds的二进制安全，它不仅仅根据&quot;\0&quot;来判断是否到达字符串的末尾，还根据len的长度来进行计算
</code></pre><h1 id="杜绝缓冲区溢出"><a href="#杜绝缓冲区溢出" class="headerlink" title="杜绝缓冲区溢出"></a>杜绝缓冲区溢出</h1><pre><code>缓冲区溢出，指的是在修改字符串的时候，没有对该字符串分配足够的空间
sds在对字符串进行修改的时候，都会使用（sdsMakeRoomFor）判断是否有足够的空间
sds sdscatlen(sds s, const void *t, size_t len) {
    struct sdshdr *sh;
    // 原有字符串长度
    size_t curlen = sdslen(s);

    // 扩展 sds 空间
    // T = O(N)
    s = sdsMakeRoomFor(s, len);

    // 内存不足？直接返回
    if (s == NULL) {
        return NULL;
    }

    // 复制 t 中的内容到字符串后部
    // T = O(N)
    sh = (void*) (s - (sizeof(struct sdshdr)));
    memcpy(s + curlen, t, len);

    // 更新属性
    sh-&gt;len = curlen + len;
    sh-&gt;free = sh-&gt;free - len;

    // 添加新结尾符号
    s[curlen + len] = &apos;\0&apos;;

    // 返回新 sds
    return s;
}
</code></pre><h1 id="动态扩展，空间预分配"><a href="#动态扩展，空间预分配" class="headerlink" title="动态扩展，空间预分配"></a>动态扩展，空间预分配</h1><pre><code>对字符串进行修改的时候，会判断sds的剩余空间，如果大小不足够会重新进行分配，具体分配逻辑如下：
    1、如果新长度小于SDS_MAX_PREALLOC定义的最大空间，就分配两倍所需空间；
    2、否则在目前的长度上再增加SDS_MAX_PREALLOC定义的最大空间

代码实现如下：
/*
 * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，
 * buf 至少会有 addlen + 1 长度的空余空间
 * （额外的 1 字节是为 \0 准备的）
 *
 * 返回值
 *  sds ：扩展成功返回扩展后的 sds
 *        扩展失败返回 NULL
 *
 * 复杂度
 *  T = O(N)
 */
sds sdsMakeRoomFor(sds s, size_t addlen) {
    struct sdshdr *sh, *newsh;

    // 获取 s 目前的空余空间长度
    size_t free = sdsavail(s);

    size_t len, newlen;

    // s 目前的空余空间已经足够，无须再进行扩展，直接返回
    if (free &gt;= addlen) {
        return s;
    }

    // 获取 s 目前已占用空间的长度
    len = sdslen(s);
    sh = (void*)(s - (sizeof(struct sdshdr)));

    // s 最少需要的长度
    newlen = (len + addlen);

    // 根据新长度，为 s 分配新空间所需的大小
    // 如果当前占用内存小于1M那么就分配两倍于当前长度的内存
    // 如果当前占用内存大于等于1M那么就分配当前长度+1M的内存
    // 内存增长策略*****
    if (newlen &lt; SDS_MAX_PREALLOC) {
        // 如果新长度小于 SDS_MAX_PREALLOC 
        // 那么为它分配两倍于所需长度的空间
        newlen *= 2;
    } else {
        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC
        newlen += SDS_MAX_PREALLOC;
    }

    // T = O(N)
    newsh = zrealloc(sh, sizeof(struct sdshdr) + newlen + 1);

    // 内存不足，分配失败，返回
    if (newsh == NULL) { 
        return NULL;
    }

    // 更新 sds 的空余长度
    newsh-&gt;free = newlen - len;

    // 返回 sds
    return newsh-&gt;buf;
}
</code></pre><h1 id="惰性释放，减少内存分配次数"><a href="#惰性释放，减少内存分配次数" class="headerlink" title="惰性释放，减少内存分配次数"></a>惰性释放，减少内存分配次数</h1><pre><code>对sds字符串进行缩减操作的时候，不会对空间进行释放，仅仅只是改变len属性和free属性的值

void sdsclear(sds s) {

    // 取出 sdshdr
    struct sdshdr *sh = (void*) (s - (sizeof(struct sdshdr)));

    // 重新计算属性
    sh-&gt;free += sh-&gt;len;
    sh-&gt;len = 0;

    // 将结束符放到最前面（相当于惰性地删除 buf 中的内容）
    sh-&gt;buf[0] = &apos;\0&apos;;
}
</code></pre><h1 id="long数值转字符串"><a href="#long数值转字符串" class="headerlink" title="long数值转字符串"></a>long数值转字符串</h1><pre><code>这个函数比较有意思，他将long long类型的数值转换成string类型
    1、将数值按照10取模，取模后的值保存，在除10（相当于是对当前位的上一位进行获取 12345第一次取模的值是5，除10变成1234.5取模的值变成4）（注意101.1与10取模是1不是1.1）
    2、将保存的字符串再进行翻转
    比如：
        12345 取模后得到的值依次是5，4，3，2，1 连接成最后的字符串是54321
        再进行倒转以后变成12345

int sdsll2str(char *s, long long value) {
    char *p, aux;
    unsigned long long v;
    size_t l;

    /* Generate the string representation, this method produces
     * an reversed string. */
    v = (value &lt; 0) ? -value : value;
    p = s;
    do {
        *p++ = &apos;0&apos; + (v%10);
        v /= 10;
    } while(v);
    if (value &lt; 0) *p++ = &apos;-&apos;;

    /* Compute length and add null term. */
    l = p - s;
    *p = &apos;\0&apos;;

    /* Reverse the string. */
    p--;
    while(s &lt; p) {
        aux = *s;
        *s = *p;
        *p = aux;
        s++;
        p--;
    }
    return l;
}

为什么要&apos;0&apos;+单个数字？
参考ascii表，字符串1对应的ascii码是49，&apos;0&apos;对应的ancii值是48，比如说数字3想存储到字符串中表示也为&apos;3&apos;，那么它对应的ascii就是3+48也就是3+&apos;0&apos;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="sds结构"><a href="#sds结构" class="headerlink" title="sds结构"></a>sds结构</h1><pre><code>struct sdshdr {

    /** buf 中已占用空间的长度*/
    int l]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis对象类型及数据结构]]></title>
    <link href="http://www.cxyteam.com/2018/01/02/redis%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://www.cxyteam.com/2018/01/02/redis对象类型及数据结构/</id>
    <published>2018-01-02T09:42:59.000Z</published>
    <updated>2018-01-02T11:06:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="字符创对象（REDIS-STRING-string）"><a href="#字符创对象（REDIS-STRING-string）" class="headerlink" title="字符创对象（REDIS_STRING | string）"></a>字符创对象（REDIS_STRING | string）</h1><h4 id="整数值（int）"><a href="#整数值（int）" class="headerlink" title="整数值（int）"></a>整数值（int）</h4><h4 id="embstr编码的简单动态字符串（SDS）（embstr）"><a href="#embstr编码的简单动态字符串（SDS）（embstr）" class="headerlink" title="embstr编码的简单动态字符串（SDS）（embstr）"></a>embstr编码的简单动态字符串（SDS）（embstr）</h4><h4 id="动态字符串（raw）"><a href="#动态字符串（raw）" class="headerlink" title="动态字符串（raw）"></a>动态字符串（raw）</h4><h6 id="编码存储选择"><a href="#编码存储选择" class="headerlink" title="编码存储选择"></a>编码存储选择</h6><pre><code>如果字符串对象保存的是一个字符串值， 并且这个字符串值的长度大于 39 字节， 那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值， 并将对象的编码设置为 raw
如果字符串对象保存的是一个字符串值， 并且这个字符串值的长度小于等于 39 字节， 那么字符串对象将使用 embstr 编码的方式来保存这个字符串值
可以用 long double 类型表示的浮点数在 Redis 中也是作为字符串值来保存的： 如果我们要保存一个浮点数到字符串对象里面， 那么程序会先将这个浮点数转换成字符串值， 然后再保存起转换所得的字符串值
</code></pre><h6 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>对于 int 编码的字符串对象来说， 如果我们向对象执行了一些命令， 使得这个对象保存的不再是整数值， 而是一个字符串值， 那么字符串对象的编码将从 int 变为 raw
因为 Redis 没有为 embstr 编码的字符串对象编写任何相应的修改程序 （只有 int 编码的字符串对象和 raw 编码的字符串对象有这些程序）， 所以 embstr 编码的字符串对象实际上是只读的： 当我们对 embstr 编码的字符串对象执行任何修改命令时， 程序会先将对象的编码从 embstr 转换成 raw ， 然后再执行修改命令； 因为这个原因， embstr 编码的字符串对象在执行修改命令之后， 总会变成一个 raw 编码的字符串对象    
</code></pre><h1 id="列表对象（REDIS-LIST-list）"><a href="#列表对象（REDIS-LIST-list）" class="headerlink" title="列表对象（REDIS_LIST | list）"></a>列表对象（REDIS_LIST | list）</h1><h4 id="压缩列表（ziplist）"><a href="#压缩列表（ziplist）" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h4><h4 id="双端链表（linkedlist）"><a href="#双端链表（linkedlist）" class="headerlink" title="双端链表（linkedlist）"></a>双端链表（linkedlist）</h4><h6 id="编码存储选择-1"><a href="#编码存储选择-1" class="headerlink" title="编码存储选择"></a>编码存储选择</h6><pre><code>当列表对象可以同时满足以下两个条件时， 列表对象使用 ziplist 编码：
    1、列表对象保存的所有字符串元素的长度都小于 64 字节；
    2、列表对象保存的元素数量小于 512 个
</code></pre><h1 id="哈希对象（REDIS-HASH-hash）"><a href="#哈希对象（REDIS-HASH-hash）" class="headerlink" title="哈希对象（REDIS_HASH | hash）"></a>哈希对象（REDIS_HASH | hash）</h1><h4 id="压缩列表（ziplist）-1"><a href="#压缩列表（ziplist）-1" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h4><h4 id="字典（hashtable）"><a href="#字典（hashtable）" class="headerlink" title="字典（hashtable）"></a>字典（hashtable）</h4><h6 id="编码转换-1"><a href="#编码转换-1" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>当哈希对象可以同时满足以下两个条件时， 哈希对象使用 ziplist 编码：
    1、哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节；
    2、哈希对象保存的键值对数量小于 512 个；
</code></pre><h1 id="集合对象（REDIS-SET-set）"><a href="#集合对象（REDIS-SET-set）" class="headerlink" title="集合对象（REDIS_SET | set）"></a>集合对象（REDIS_SET | set）</h1><h4 id="整数集合（intset）"><a href="#整数集合（intset）" class="headerlink" title="整数集合（intset）"></a>整数集合（intset）</h4><h4 id="字典（hashtable）-1"><a href="#字典（hashtable）-1" class="headerlink" title="字典（hashtable）"></a>字典（hashtable）</h4><h6 id="编码转换-2"><a href="#编码转换-2" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>当集合对象可以同时满足以下两个条件时， 对象使用 intset 编码：
    1、集合对象保存的所有元素都是整数值；
    2、集合对象保存的元素数量不超过 512 个；
</code></pre><h1 id="有序集合对象（REDIS-ZSET-zset）"><a href="#有序集合对象（REDIS-ZSET-zset）" class="headerlink" title="有序集合对象（REDIS_ZSET | zset）"></a>有序集合对象（REDIS_ZSET | zset）</h1><h4 id="压缩列表（ziplist）-2"><a href="#压缩列表（ziplist）-2" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h4><h4 id="跳跃表和字典（skiplist）"><a href="#跳跃表和字典（skiplist）" class="headerlink" title="跳跃表和字典（skiplist）"></a>跳跃表和字典（skiplist）</h4><h6 id="编码转换-3"><a href="#编码转换-3" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>当有序集合对象可以同时满足以下两个条件时， 对象使用 ziplist 编码：
    1、有序集合保存的元素数量小于 128 个；
    2、有序集合保存的所有元素成员的长度都小于 64 字节；
</code></pre><h6 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h6><pre><code>查看一个key的编码类型：OBJECT ENCODING key
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="字符创对象（REDIS-STRING-string）"><a href="#字符创对象（REDIS-STRING-string）" class="headerlink" title="字符创对象（REDIS_STRING | string）"></a>字符创对象（]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用命令]]></title>
    <link href="http://www.cxyteam.com/2017/12/28/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.cxyteam.com/2017/12/28/常用命令/</id>
    <published>2017-12-28T02:29:39.000Z</published>
    <updated>2017-12-28T02:44:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="linux杀死某个程序的多个进程"><a href="#linux杀死某个程序的多个进程" class="headerlink" title="linux杀死某个程序的多个进程"></a>linux杀死某个程序的多个进程</h1><pre><code>ps uax | grep &apos;you project process&apos; | grep -v grep |awk &apos;{print $2}&apos; | xargs kill
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="linux杀死某个程序的多个进程"><a href="#linux杀死某个程序的多个进程" class="headerlink" title="linux杀死某个程序的多个进程"></a>linux杀死某个程序的多个进程</h1><pre><code>ps uax]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis源码断点调试]]></title>
    <link href="http://www.cxyteam.com/2017/12/13/redis%E6%BA%90%E7%A0%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"/>
    <id>http://www.cxyteam.com/2017/12/13/redis源码断点调试/</id>
    <published>2017-12-13T12:37:19.000Z</published>
    <updated>2017-12-13T12:54:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redis断点调试的方式有两种"><a href="#redis断点调试的方式有两种" class="headerlink" title="redis断点调试的方式有两种"></a>redis断点调试的方式有两种</h1><h6 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h6><h6 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h6><h3 id="记录日志-1"><a href="#记录日志-1" class="headerlink" title="记录日志"></a>记录日志</h3><p><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;)</code></p>
<h5 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h5><h6 id="在t-string-c的getCommand方法中添加如下内容"><a href="#在t-string-c的getCommand方法中添加如下内容" class="headerlink" title="在t_string.c的getCommand方法中添加如下内容"></a>在t_string.c的getCommand方法中添加如下内容</h6><p><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;);
return ;</code></p>
<h6 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h6><p><code>make &amp;&amp; src/redis-server</code></p>
<h6 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h6><p><code>src/redis-cli</code></p>
<h6 id="查看结果（注意是在redis-server查看结果）"><a href="#查看结果（注意是在redis-server查看结果）" class="headerlink" title="查看结果（注意是在redis-server查看结果）"></a>查看结果（注意是在redis-server查看结果）</h6><p><code>get name</code></p>
<h6 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h6><pre><code>由于getCommand是定义的get命令的操作，因此get name命令能够触发redisLog记录日志
</code></pre><h3 id="printf-1"><a href="#printf-1" class="headerlink" title="printf"></a>printf</h3><h6 id="在t-string-c的getCommand方法中添加如下内容-1"><a href="#在t-string-c的getCommand方法中添加如下内容-1" class="headerlink" title="在t_string.c的getCommand方法中添加如下内容"></a>在t_string.c的getCommand方法中添加如下内容</h6><p><code>printf(&quot;hello world!&quot;)</code></p>
<h6 id="启动redis，连接redis，查看结果和上述流程一直"><a href="#启动redis，连接redis，查看结果和上述流程一直" class="headerlink" title="启动redis，连接redis，查看结果和上述流程一直"></a>启动redis，连接redis，查看结果和上述流程一直</h6><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><h6 id="每次操作完成之后都要进行编译，并重新启动服务端和连接redis"><a href="#每次操作完成之后都要进行编译，并重新启动服务端和连接redis" class="headerlink" title="每次操作完成之后都要进行编译，并重新启动服务端和连接redis"></a>每次操作完成之后都要进行编译，并重新启动服务端和连接redis</h6><h6 id="执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢"><a href="#执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢" class="headerlink" title="执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢"></a>执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢</h6><h6 id="redisLog在有些文件中不能使用，例如sds-c（也许是我水平有限，反正我是跳过了）"><a href="#redisLog在有些文件中不能使用，例如sds-c（也许是我水平有限，反正我是跳过了）" class="headerlink" title="redisLog在有些文件中不能使用，例如sds.c（也许是我水平有限，反正我是跳过了）"></a>redisLog在有些文件中不能使用，例如sds.c（也许是我水平有限，反正我是跳过了）</h6><h6 id="printf打sizeof类型，使用lu参数。printf-“默认长度：-lu”-sizeof-struct-sdshdr"><a href="#printf打sizeof类型，使用lu参数。printf-“默认长度：-lu”-sizeof-struct-sdshdr" class="headerlink" title="printf打sizeof类型，使用lu参数。printf(“默认长度：%lu”, sizeof(struct sdshdr));"></a>printf打sizeof类型，使用lu参数。printf(“默认长度：%lu”, sizeof(struct sdshdr));</h6>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="redis断点调试的方式有两种"><a href="#redis断点调试的方式有两种" class="headerlink" title="redis断点调试的方式有两种"></a>redis断点调试的方式有两种</h1><h6 id="记录日志"><a href]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis用到的函数]]></title>
    <link href="http://www.cxyteam.com/2017/12/12/redis%E7%94%A8%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://www.cxyteam.com/2017/12/12/redis用到的函数/</id>
    <published>2017-12-12T15:18:48.000Z</published>
    <updated>2017-12-12T15:23:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h1><pre><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;)
触发记录hello world日志
例如：在t_string.c的文件中的getCommand方法中添加：redisLog(REDIS_WARNING, &quot;hello world!&quot;);return ;
当你启动redis-server后，在客户端，执行get name命令，会在redis-server终端输出&quot;hello world！&quot;
</code></pre><p># </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h1><pre><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;)
触发记录]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装laravel环境]]></title>
    <link href="http://www.cxyteam.com/2017/12/04/%E5%AE%89%E8%A3%85laravel%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.cxyteam.com/2017/12/04/安装laravel环境/</id>
    <published>2017-12-04T08:46:07.000Z</published>
    <updated>2017-12-04T10:23:08.000Z</updated>
    <content type="html"><![CDATA[<h6 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h6><pre><code>在mac本地利用homebrew，使用Valet方式安装laravel
</code></pre><h1 id="更新brew"><a href="#更新brew" class="headerlink" title="更新brew"></a>更新brew</h1><pre><code>brew update
</code></pre><h1 id="查看brew-service"><a href="#查看brew-service" class="headerlink" title="查看brew service"></a>查看brew service</h1><pre><code>brew services list
</code></pre><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><pre><code>使用brew安装php，mysql，redis
</code></pre><h1 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h1><pre><code>curl -sS https://getcomposer.org/installer | php 
失败尝试：php -r &quot;readfile(&apos;https://getcomposer.org/installer&apos;);&quot; | php
全局有效：mv composer.phar /usr/local/bin/composer
验证：composer --version
</code></pre><h1 id="通过composer安装valet"><a href="#通过composer安装valet" class="headerlink" title="通过composer安装valet"></a>通过composer安装valet</h1><pre><code>添加环境变量：
    PATH=$PATH:~/.composer/vendor/bin

修改composer源（默认的是国外的，需要翻墙）
    1、查询composer配置文件所在位置
        composer config -l -g

    2、查看显示的home选项（就是composer所在配置的目录）
        [home] /Users/sunnysmilez/.composer

    3、在配置文件添加下载路径
        vim /Users/sunnysmilez/.composer/config.json         
        内容如下：
            {
                &quot;config&quot;: {
                },
                &quot;repositories&quot;: {
                    &quot;packagist&quot;: {
                        &quot;type&quot;: &quot;composer&quot;,
                        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;
                    }
                }
            }

下载安装：valet
    composer global require laravel/valet
</code></pre><h1 id="安装valet"><a href="#安装valet" class="headerlink" title="安装valet"></a>安装valet</h1><pre><code>安装：
    valet install

测试：（127.0.0.1会响应所有*.dev的域名）
    ping foobar.dev
</code></pre><h1 id="设置code目录"><a href="#设置code目录" class="headerlink" title="设置code目录"></a>设置code目录</h1><pre><code>cd code
valet park
</code></pre><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><pre><code>composer create-project laravel/laravel=5.2.* hello --prefer-dist

不知道为什么反正我的laravel new hello 不能使用
项目使用的5.2的版本，如果你需要更高版本请自行更改
</code></pre><h1 id="启动valet"><a href="#启动valet" class="headerlink" title="启动valet"></a>启动valet</h1><pre><code>valet start
</code></pre><h1 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h1><pre><code>http://hello.dev/
</code></pre><h1 id="valet补充"><a href="#valet补充" class="headerlink" title="valet补充"></a>valet补充</h1><pre><code>valet start         启动valet
valet stop          停止valet
valet restart       重启valet
valet share         共享项目（比较有意思）
valet uninstall     卸载valet
valet park          设置代码目录
valet paths         查看代码目录
等
</code></pre><h1 id="各种错误"><a href="#各种错误" class="headerlink" title="各种错误"></a>各种错误</h1><h3 id="composer错误"><a href="#composer错误" class="headerlink" title="composer错误"></a>composer错误</h3><pre><code>类似此种下载不成功的，直接替换composer源
[Composer\Downloader\TransportException]
      The &quot;http://packagist.org/p/laravel/valet%2439296a873ae09b56ed010fd93604f08291f6223ad85ddf3bc5cb02af8a4035f3.json&quot; file could not be downloaded (HTTP/1.1 302 Found)

[Composer\Downloader\TransportException]
       Your configuration does not allow connections to http://pkg.phpcomposer.com/repo/packagist/packages.json. See https://getcomposer.org/doc/06-config.md#secure-http for details. 
[Composer\Downloader\TransportException]
      The &quot;http://pkg.phpcomposer.com/repo/packagist/packages.json&quot; file could not be downloaded (HTTP/1.1 301 Moved Permanently)

[Composer\Downloader\TransportException]
 The &quot;https://pkg.phpcomposer.com/repo/packagist/packages.json&quot; file could not be downloaded (HTTP/1.1 404 Not Found)
</code></pre><h3 id="valet-install错误"><a href="#valet-install错误" class="headerlink" title="valet install错误"></a>valet install错误</h3><pre><code>Brew was unable to install [dnsmasq].
    手动安装dnsmasq：brew install dnsmasq（报下面的错误）

Error: Xcode alone is not sufficient on Sierra.
    执行：xcode-select --install

执行：valet install       
</code></pre><h3 id="valet权限错误（在安装的过程中使用了sudo）"><a href="#valet权限错误（在安装的过程中使用了sudo）" class="headerlink" title="valet权限错误（在安装的过程中使用了sudo）"></a>valet权限错误（在安装的过程中使用了sudo）</h3><pre><code>Warning: file_get_contents(/var/root/.valet/config.json): failed to open stream: Permission denied in /Users/Username/.composer/vendor/laravel/valet/server.php on line 23

Warning: Invalid argument supplied for foreach() in /Users/Username/.composer/vendor/laravel/valet/server.php on line 47
404 - Not Found

修改权限为当前用户：
    cd ~/.composer/
    sudo chown -R $(whoami) vendor
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h6 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h6><pre><code>在mac本地利用homebrew，使用Valet方式安装laravel
</code></pre><h1 i]]>
    </summary>
    
      <category term="laravel" scheme="http://www.cxyteam.com/tags/laravel/"/>
    
      <category term="laravel" scheme="http://www.cxyteam.com/categories/laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[phpsttorm添加laravel代码提示]]></title>
    <link href="http://www.cxyteam.com/2017/11/27/phpsttorm%E6%B7%BB%E5%8A%A0laravel%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA/"/>
    <id>http://www.cxyteam.com/2017/11/27/phpsttorm添加laravel代码提示/</id>
    <published>2017-11-26T16:58:03.000Z</published>
    <updated>2017-12-04T10:29:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><pre><code>preferences-&gt;plugins 搜索laravel plugin
</code></pre><p>   <img src="/img/laravel/phpstorm_larvale.png" alt="Alt text" title="安装插件"></p>
<h1 id="添加”barryvdh-laravel-ide-helper”"><a href="#添加”barryvdh-laravel-ide-helper”" class="headerlink" title="添加”barryvdh/laravel-ide-helper”"></a>添加”barryvdh/laravel-ide-helper”</h1><pre><code>在compose.json中添加如下(在require的数组中添加)：
&quot;require&quot;: {
        &quot;laravel/framework&quot;: &quot;5.5.*&quot;,
        &quot;barryvdh/laravel-ide-helper&quot;: &quot;dev-master&quot;
},
</code></pre><h1 id="composer加载插件"><a href="#composer加载插件" class="headerlink" title="composer加载插件"></a>composer加载插件</h1><pre><code>在项目根目录运行：composer update
</code></pre><h1 id="添加service-provider"><a href="#添加service-provider" class="headerlink" title="添加service provider"></a>添加service provider</h1><pre><code>在项目下的config/app.php在providers中添加一行&quot;&apos;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&apos;&quot;

&apos;providers&apos; =&gt; [
    &apos;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&apos;
    //Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,//具体什么方式添加看版本
]
</code></pre><h1 id="执行artisan命令"><a href="#执行artisan命令" class="headerlink" title="执行artisan命令"></a>执行artisan命令</h1><pre><code>php artisan ide-helper:generate
最终生成_ide_helper.php的文件
</code></pre><h1 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h1><pre><code>如果没效果，重启下编辑器试试
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><pre><code>preferences-&gt;plugins 搜索laravel plugin
</code></pre>]]>
    </summary>
    
      <category term="laravel" scheme="http://www.cxyteam.com/tags/laravel/"/>
    
      <category term="laravel" scheme="http://www.cxyteam.com/categories/laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker创建laravel环境]]></title>
    <link href="http://www.cxyteam.com/2017/11/26/docker%E5%88%9B%E5%BB%BAlaravel%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.cxyteam.com/2017/11/26/docker创建laravel环境/</id>
    <published>2017-11-26T10:39:18.000Z</published>
    <updated>2017-11-26T10:56:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="安装docker环境"><a href="#安装docker环境" class="headerlink" title="安装docker环境"></a>安装docker环境</h1><h1 id="拉取laravel镜像"><a href="#拉取laravel镜像" class="headerlink" title="拉取laravel镜像"></a>拉取laravel镜像</h1><pre><code>docker pull laraedit/laraedit
</code></pre><h1 id="创建laravel容器"><a href="#创建laravel容器" class="headerlink" title="创建laravel容器"></a>创建laravel容器</h1><pre><code>docker run --name laravel -itd -p 8080:80 -v ~/Desktop/laravel:/var/www/html/app laraedit/laraedit
--name 指定新建容器名称
-p 端口映射，指定本地端口8080映射到容器的80端口
-v 目录挂载，本机目录:容器目录
-d 在后台运行
</code></pre><h1 id="登录容器"><a href="#登录容器" class="headerlink" title="登录容器"></a>登录容器</h1><pre><code>docker exec -it laravel /bim/bash
</code></pre><h1 id="创建项目-容器内"><a href="#创建项目-容器内" class="headerlink" title="创建项目(容器内)"></a>创建项目(容器内)</h1><pre><code>cd /var/www/html/
laravel new app
</code></pre><h1 id="查看应用日志（容器内）"><a href="#查看应用日志（容器内）" class="headerlink" title="查看应用日志（容器内）"></a>查看应用日志（容器内）</h1><pre><code>tail -f /var/www/html/app/storage/logs/laravel.log
</code></pre><h1 id="查看容器日志-容器外"><a href="#查看容器日志-容器外" class="headerlink" title="查看容器日志(容器外)"></a>查看容器日志(容器外)</h1><pre><code>docker logs -f laravel
</code></pre><h1 id="创建文件（容器内）"><a href="#创建文件（容器内）" class="headerlink" title="创建文件（容器内）"></a>创建文件（容器内）</h1><pre><code>touch /var/www/html/app/.env
添加内容如下：

APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_LOG_LEVEL=debug
APP_URL=http://localhost

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=homestead
DB_USERNAME=homestead
DB_PASSWORD=secret

BROADCAST_DRIVER=log
CACHE_DRIVER=file
SESSION_DRIVER=file
SESSION_LIFETIME=120
QUEUE_DRIVER=sync

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_DRIVER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
</code></pre><h1 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h1><pre><code>php /var/www/html/app/artisan key:generate
</code></pre><h1 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h1><pre><code>访问127.0.0.1:8080会看到laravel首页，否则的话就查日志看看原因吧
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装docker环境"><a href="#安装docker环境" class="headerlink" title="安装docker环境"></a>安装docker环境</h1><h1 id="拉取laravel镜像"><a href="#拉取laravel镜]]>
    </summary>
    
      <category term="laravel" scheme="http://www.cxyteam.com/tags/laravel/"/>
    
      <category term="laravel" scheme="http://www.cxyteam.com/categories/laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在小公司的成长]]></title>
    <link href="http://www.cxyteam.com/2017/11/01/%E5%9C%A8%E5%B0%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E6%88%90%E9%95%BF/"/>
    <id>http://www.cxyteam.com/2017/11/01/在小公司的成长/</id>
    <published>2017-10-31T16:51:10.000Z</published>
    <updated>2017-10-31T17:10:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><h1 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h1><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><h1 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git钩子介绍]]></title>
    <link href="http://www.cxyteam.com/2017/08/15/git%E9%92%A9%E5%AD%90%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.cxyteam.com/2017/08/15/git钩子介绍/</id>
    <published>2017-08-15T04:03:38.000Z</published>
    <updated>2017-08-15T07:02:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="常用本地钩子"><a href="#常用本地钩子" class="headerlink" title="常用本地钩子"></a>常用本地钩子</h1><h6 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h6><h6 id="prepare-commit-msg"><a href="#prepare-commit-msg" class="headerlink" title="prepare-commit-msg"></a>prepare-commit-msg</h6><h6 id="commit-msg"><a href="#commit-msg" class="headerlink" title="commit-msg"></a>commit-msg</h6><h6 id="post-commit"><a href="#post-commit" class="headerlink" title="post-commit"></a>post-commit</h6><h6 id="post-checkout"><a href="#post-checkout" class="headerlink" title="post-checkout"></a>post-checkout</h6><h6 id="pre-rebase"><a href="#pre-rebase" class="headerlink" title="pre-rebase"></a>pre-rebase</h6><h6 id="前四个钩子让你介入完整的提交生命周期，后两个允许你执行一些额外的操作，分别为git-checkout和git-rebase的安全检查-所有带pre-的钩子允许你修改即将发生的操作，而带post-的钩子只能用于通知"><a href="#前四个钩子让你介入完整的提交生命周期，后两个允许你执行一些额外的操作，分别为git-checkout和git-rebase的安全检查-所有带pre-的钩子允许你修改即将发生的操作，而带post-的钩子只能用于通知" class="headerlink" title="前四个钩子让你介入完整的提交生命周期，后两个允许你执行一些额外的操作，分别为git checkout和git rebase的安全检查.所有带pre-的钩子允许你修改即将发生的操作，而带post-的钩子只能用于通知"></a>前四个钩子让你介入完整的提交生命周期，后两个允许你执行一些额外的操作，分别为git checkout和git rebase的安全检查.所有带pre-的钩子允许你修改即将发生的操作，而带post-的钩子只能用于通知</h6><h1 id="pre-commit-1"><a href="#pre-commit-1" class="headerlink" title="pre-commit"></a>pre-commit</h1><h6 id="在执行git-commit命令时，git向你询问提交信息或生产提交对象时执行。pre-commit不需要任何参数，以非0状态退出时将放弃整个提交。"><a href="#在执行git-commit命令时，git向你询问提交信息或生产提交对象时执行。pre-commit不需要任何参数，以非0状态退出时将放弃整个提交。" class="headerlink" title="在执行git commit命令时，git向你询问提交信息或生产提交对象时执行。pre-commit不需要任何参数，以非0状态退出时将放弃整个提交。"></a>在执行git commit命令时，git向你询问提交信息或生产提交对象时执行。pre-commit不需要任何参数，以非0状态退出时将放弃整个提交。</h6><h1 id="prepare-commit-msg-1"><a href="#prepare-commit-msg-1" class="headerlink" title="prepare-commit-msg"></a>prepare-commit-msg</h1><h6 id="在pre-commit钩子在文本编辑器中生成提交信息之后被调用-prepare-commit-msg脚本的参数可以是下列三个：1-包含提交信息的文件名-2-提交类型-3-相关提交的SHA1哈希字串-和pre-commit一样，以非0状态退出会放弃提交"><a href="#在pre-commit钩子在文本编辑器中生成提交信息之后被调用-prepare-commit-msg脚本的参数可以是下列三个：1-包含提交信息的文件名-2-提交类型-3-相关提交的SHA1哈希字串-和pre-commit一样，以非0状态退出会放弃提交" class="headerlink" title="在pre-commit钩子在文本编辑器中生成提交信息之后被调用.prepare-commit-msg脚本的参数可以是下列三个：1.包含提交信息的文件名 2.提交类型 3.相关提交的SHA1哈希字串.和pre-commit一样，以非0状态退出会放弃提交"></a>在pre-commit钩子在文本编辑器中生成提交信息之后被调用.prepare-commit-msg脚本的参数可以是下列三个：1.包含提交信息的文件名 2.提交类型 3.相关提交的SHA1哈希字串.和pre-commit一样，以非0状态退出会放弃提交</h6><h1 id="commit-msg-1"><a href="#commit-msg-1" class="headerlink" title="commit-msg"></a>commit-msg</h1><h6 id="commit-msg钩子和prepare-commit-msg钩子很像，但它会在用户输入提交信息之后被调用-传入这个钩子唯一的参数是包含提交信息的文件名-也是以非0状态退出会放弃提交"><a href="#commit-msg钩子和prepare-commit-msg钩子很像，但它会在用户输入提交信息之后被调用-传入这个钩子唯一的参数是包含提交信息的文件名-也是以非0状态退出会放弃提交" class="headerlink" title="commit-msg钩子和prepare-commit-msg钩子很像，但它会在用户输入提交信息之后被调用.传入这个钩子唯一的参数是包含提交信息的文件名,也是以非0状态退出会放弃提交"></a>commit-msg钩子和prepare-commit-msg钩子很像，但它会在用户输入提交信息之后被调用.传入这个钩子唯一的参数是包含提交信息的文件名,也是以非0状态退出会放弃提交</h6><h1 id="post-commit-1"><a href="#post-commit-1" class="headerlink" title="post-commit"></a>post-commit</h1><h6 id="post-commit钩子在commit-msg钩子之后立即被运行，它无法更改git-commit的结果，所以这主要用于通知用途，这个脚本没有参数，而且退出状态不会影响提交"><a href="#post-commit钩子在commit-msg钩子之后立即被运行，它无法更改git-commit的结果，所以这主要用于通知用途，这个脚本没有参数，而且退出状态不会影响提交" class="headerlink" title="post-commit钩子在commit-msg钩子之后立即被运行，它无法更改git commit的结果，所以这主要用于通知用途，这个脚本没有参数，而且退出状态不会影响提交"></a>post-commit钩子在commit-msg钩子之后立即被运行，它无法更改git commit的结果，所以这主要用于通知用途，这个脚本没有参数，而且退出状态不会影响提交</h6><h1 id="post-checkout-1"><a href="#post-checkout-1" class="headerlink" title="post-checkout"></a>post-checkout</h1><h6 id="post-checkout钩子和post-commit钩子很像，但它在你用git-checkout查看引用的时候被调用。这个钩子接受三个参数，它的返回状态不影响git-checkout命令。1-HEAD前一次提交的引用-2-新的HEAD的引用-3-1或0，分别代表是分支checkout还是文件checkout"><a href="#post-checkout钩子和post-commit钩子很像，但它在你用git-checkout查看引用的时候被调用。这个钩子接受三个参数，它的返回状态不影响git-checkout命令。1-HEAD前一次提交的引用-2-新的HEAD的引用-3-1或0，分别代表是分支checkout还是文件checkout" class="headerlink" title="post-checkout钩子和post-commit钩子很像，但它在你用git checkout查看引用的时候被调用。这个钩子接受三个参数，它的返回状态不影响git checkout命令。1.HEAD前一次提交的引用 2.新的HEAD的引用 3.1或0，分别代表是分支checkout还是文件checkout"></a>post-checkout钩子和post-commit钩子很像，但它在你用git checkout查看引用的时候被调用。这个钩子接受三个参数，它的返回状态不影响git checkout命令。1.HEAD前一次提交的引用 2.新的HEAD的引用 3.1或0，分别代表是分支checkout还是文件checkout</h6><h1 id="pre-rebase-1"><a href="#pre-rebase-1" class="headerlink" title="pre-rebase"></a>pre-rebase</h1><h6 id="pre-rebase钩子在git-rebase发生更改之前运行。他接受两个参数：1-frok之前的上游分支-2-将要rebase的下游分支。如果rebase当前分支则第二个参数为空。以非0状态退出会放弃这次rebase。"><a href="#pre-rebase钩子在git-rebase发生更改之前运行。他接受两个参数：1-frok之前的上游分支-2-将要rebase的下游分支。如果rebase当前分支则第二个参数为空。以非0状态退出会放弃这次rebase。" class="headerlink" title="pre-rebase钩子在git rebase发生更改之前运行。他接受两个参数：1.frok之前的上游分支 2.将要rebase的下游分支。如果rebase当前分支则第二个参数为空。以非0状态退出会放弃这次rebase。"></a>pre-rebase钩子在git rebase发生更改之前运行。他接受两个参数：1.frok之前的上游分支 2.将要rebase的下游分支。如果rebase当前分支则第二个参数为空。以非0状态退出会放弃这次rebase。</h6><h1 id="服务端钩子"><a href="#服务端钩子" class="headerlink" title="服务端钩子"></a>服务端钩子</h1><h6 id="pre-receive"><a href="#pre-receive" class="headerlink" title="pre-receive"></a>pre-receive</h6><h6 id="update"><a href="#update" class="headerlink" title="update"></a>update</h6><h6 id="post-receive"><a href="#post-receive" class="headerlink" title="post-receive"></a>post-receive</h6><h6 id="服务端钩子和本地钩子几乎一样，只不过它们存在于服务端的仓库中-这些钩子都允许你对git-push的不同阶段做出响应-服务端钩子的输出会传送到客户端的控制台中，所以给开发者发送信息是很容易的"><a href="#服务端钩子和本地钩子几乎一样，只不过它们存在于服务端的仓库中-这些钩子都允许你对git-push的不同阶段做出响应-服务端钩子的输出会传送到客户端的控制台中，所以给开发者发送信息是很容易的" class="headerlink" title="服务端钩子和本地钩子几乎一样，只不过它们存在于服务端的仓库中,这些钩子都允许你对git push的不同阶段做出响应,服务端钩子的输出会传送到客户端的控制台中，所以给开发者发送信息是很容易的"></a>服务端钩子和本地钩子几乎一样，只不过它们存在于服务端的仓库中,这些钩子都允许你对git push的不同阶段做出响应,服务端钩子的输出会传送到客户端的控制台中，所以给开发者发送信息是很容易的</h6><h1 id="pre-receive-1"><a href="#pre-receive-1" class="headerlink" title="pre-receive"></a>pre-receive</h1><h6 id="当运行git-push向仓库推送代码时被执行，这是强制推行开发规范的好地方。这个脚本没有参数。这和其它钩子相比略微有些不同，因为信息是通过标准输入而不是命令行传入的。每一个推送上来的引用都会以下面的格式传入脚本的单独一行："><a href="#当运行git-push向仓库推送代码时被执行，这是强制推行开发规范的好地方。这个脚本没有参数。这和其它钩子相比略微有些不同，因为信息是通过标准输入而不是命令行传入的。每一个推送上来的引用都会以下面的格式传入脚本的单独一行：" class="headerlink" title="当运行git push向仓库推送代码时被执行，这是强制推行开发规范的好地方。这个脚本没有参数。这和其它钩子相比略微有些不同，因为信息是通过标准输入而不是命令行传入的。每一个推送上来的引用都会以下面的格式传入脚本的单独一行："></a>当运行git push向仓库推送代码时被执行，这是强制推行开发规范的好地方。这个脚本没有参数。这和其它钩子相比略微有些不同，因为信息是通过标准输入而不是命令行传入的。每一个推送上来的引用都会以下面的格式传入脚本的单独一行：</h6><pre><code>&lt;old-value&gt; &lt;new-value&gt; &lt;ref-name&gt;
</code></pre><h6 id="常见的应用包含：1-拒绝将上游分支rebase的更改-2-防止错综复杂的合并（非快速向前，会造成项目历史非线性）-3-检查用户是否有正确的权限来做这些更改（大多用于中心化的Git工作流中）-4-如果多个引用被推送，在pre-receive中返回非0状态，拒绝所有提交"><a href="#常见的应用包含：1-拒绝将上游分支rebase的更改-2-防止错综复杂的合并（非快速向前，会造成项目历史非线性）-3-检查用户是否有正确的权限来做这些更改（大多用于中心化的Git工作流中）-4-如果多个引用被推送，在pre-receive中返回非0状态，拒绝所有提交" class="headerlink" title="常见的应用包含：1.拒绝将上游分支rebase的更改 2.防止错综复杂的合并（非快速向前，会造成项目历史非线性） 3.检查用户是否有正确的权限来做这些更改（大多用于中心化的Git工作流中） 4.如果多个引用被推送，在pre-receive中返回非0状态，拒绝所有提交"></a>常见的应用包含：1.拒绝将上游分支rebase的更改 2.防止错综复杂的合并（非快速向前，会造成项目历史非线性） 3.检查用户是否有正确的权限来做这些更改（大多用于中心化的Git工作流中） 4.如果多个引用被推送，在pre-receive中返回非0状态，拒绝所有提交</h6><h1 id="update-1"><a href="#update-1" class="headerlink" title="update"></a>update</h1><h6 id="update钩子在pre-receive之后被调用，用法也差不多。在更新前被调用，但它可以分别被每个推送上来的引用分别调用。也就是说如果用户尝试推送到4个分支，update会被执行4次。和pre-receive不一样，这个钩子不需要读取标准输入。事实上，它接受三个参数：1-更新的引用名称-2-引用中存放的旧的对象名称-3-引用中存放的新的对象名称"><a href="#update钩子在pre-receive之后被调用，用法也差不多。在更新前被调用，但它可以分别被每个推送上来的引用分别调用。也就是说如果用户尝试推送到4个分支，update会被执行4次。和pre-receive不一样，这个钩子不需要读取标准输入。事实上，它接受三个参数：1-更新的引用名称-2-引用中存放的旧的对象名称-3-引用中存放的新的对象名称" class="headerlink" title="update钩子在pre-receive之后被调用，用法也差不多。在更新前被调用，但它可以分别被每个推送上来的引用分别调用。也就是说如果用户尝试推送到4个分支，update会被执行4次。和pre-receive不一样，这个钩子不需要读取标准输入。事实上，它接受三个参数：1.更新的引用名称 2.引用中存放的旧的对象名称 3.引用中存放的新的对象名称"></a>update钩子在pre-receive之后被调用，用法也差不多。在更新前被调用，但它可以分别被每个推送上来的引用分别调用。也就是说如果用户尝试推送到4个分支，update会被执行4次。和pre-receive不一样，这个钩子不需要读取标准输入。事实上，它接受三个参数：1.更新的引用名称 2.引用中存放的旧的对象名称 3.引用中存放的新的对象名称</h6><h1 id="post-receive-1"><a href="#post-receive-1" class="headerlink" title="post-receive"></a>post-receive</h1><h6 id="成功推送后被调用-适合用于发送通知-这个脚本没有参数，但和pre-receive一样通过标准输入读取"><a href="#成功推送后被调用-适合用于发送通知-这个脚本没有参数，但和pre-receive一样通过标准输入读取" class="headerlink" title="成功推送后被调用,适合用于发送通知.这个脚本没有参数，但和pre-receive一样通过标准输入读取"></a>成功推送后被调用,适合用于发送通知.这个脚本没有参数，但和pre-receive一样通过标准输入读取</h6>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="常用本地钩子"><a href="#常用本地钩子" class="headerlink" title="常用本地钩子"></a>常用本地钩子</h1><h6 id="pre-commit"><a href="#pre-commit" class="headerli]]>
    </summary>
    
      <category term="GIT" scheme="http://www.cxyteam.com/tags/GIT/"/>
    
      <category term="GIT" scheme="http://www.cxyteam.com/categories/GIT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[添加git语法检查钩子]]></title>
    <link href="http://www.cxyteam.com/2017/08/15/%E6%B7%BB%E5%8A%A0git%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5%E9%92%A9%E5%AD%90/"/>
    <id>http://www.cxyteam.com/2017/08/15/添加git语法检查钩子/</id>
    <published>2017-08-15T03:13:49.000Z</published>
    <updated>2017-08-15T03:52:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="添加pre-commit钩子"><a href="#添加pre-commit钩子" class="headerlink" title="添加pre-commit钩子"></a>添加pre-commit钩子</h1><pre><code>vim app_code/.git/hooks/pre-commit
备注：在hooks下默认会有pre-commit.sample等文件存在，.sample拓展名防止它们默认被执行
</code></pre><h1 id="添加语法检查内容"><a href="#添加语法检查内容" class="headerlink" title="添加语法检查内容"></a>添加语法检查内容</h1><pre><code>my $commit_id = `git rev-parse --verify HEAD`;
my $against = &quot;4b825dc642cb6eb9a060e54bf8d69288fbee4904&quot;;

if ($commit_id) {
    $against=&quot;HEAD&quot;;
}

my @list = `git diff-index --cached --name-only $against --`;
my $ret = 0;

for my $x (@list) {
    chomp $x;
    if ($x =~ /\.php$/) {
        if (-f &quot;$x&quot;) {
            `php -l $x`;
            if ($? != 0) {
                $ret = 1;
                goto end;
            }
        }
    }
}

end:
exit($ret);
</code></pre><h1 id="添加执行权限"><a href="#添加执行权限" class="headerlink" title="添加执行权限"></a>添加执行权限</h1><pre><code>chmod +x app_code/.git/hooks/pre-commit
</code></pre><h1 id="添加测试"><a href="#添加测试" class="headerlink" title="添加测试"></a>添加测试</h1><p><img src="/img/git/php_check_grammar.png" alt="Alt text" title="php语法检查"></p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><pre><code>然而使用pre-commit脚本存在一个很大的缺陷，钩子脚本需要放置在每个开发者的每个项目中，很容易遗漏，同时代码库重新clone后也需要记得重新放置钩子脚本，没有办法从根源上禁止有语法错误的代码的提交
</code></pre><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><pre><code>统一的在git服务端添加pre-receive钩子，当代码push到中心代码库的时候进行语法检测，如果存在语法错误则拒绝当前的push，这样可以只在服务端配置，不需要在每个人的每个项目中进行配置，Git在接受到push时会调用pre-receive钩子，如果pre-receive返回非0的返回值，则当前的push会被拒绝。在调用pre-receive脚本时，会从标准输入传递三个参数，分别为之前的版本，push的版本和push的分支
</code></pre><h1 id="添加pre-receive钩子"><a href="#添加pre-receive钩子" class="headerlink" title="添加pre-receive钩子"></a>添加pre-receive钩子</h1><pre><code>vim app_code/.git/hooks/pre-receive
</code></pre><h1 id="添加语法检查内容-1"><a href="#添加语法检查内容-1" class="headerlink" title="添加语法检查内容"></a>添加语法检查内容</h1><pre><code>#!/usr/bin/perl
use File::Temp;
use strict;

#从标准输入中读取参数信息
my $line = &lt;&gt;;
#处理后得到旧版本，但前版本和分支
my @argv = split(/\s/, $line);
my $old = $argv[0];
my $new = $argv[1];
my $branch = $argv[2];
#比较两个版本的差异
my @out = `git diff --name-status $old $new`;

for my $x (@out) {
    my @param = split(/\s/, $x);
    #如果文件不是被删除且是php文件，则进行语法检测
    if ($param[0] ne &apos;D&apos; and $param[1] =~ /\.php$/) {
        #取出文件的内容，将其写入到一个临时文件中
        my $content = `git show $new:$param[1]`;
        my $fh = File::Temp-&gt;new(SUFFIX =&gt; &apos;.php&apos;, UNLINK =&gt; 1);
        print $fh $content;
        #进行语法检测
        my $result = `php -l $fh 2&gt;&amp;1`;
        #如果出错则输出错误，输出时需要将临时文件名替换称为原来的文件名，并拒绝push
        if ($? != 0) {
            if ($result =~ s#$fh#$param[1]#g) {
                print $result;
            }
            exit(1);
        }
    }
}
exit(0);
</code></pre><h1 id="添加执行权限-1"><a href="#添加执行权限-1" class="headerlink" title="添加执行权限"></a>添加执行权限</h1><pre><code>chmod +x app_code/.git/hooks/pre-receive  
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="添加pre-commit钩子"><a href="#添加pre-commit钩子" class="headerlink" title="添加pre-commit钩子"></a>添加pre-commit钩子</h1><pre><code>vim app_code/.]]>
    </summary>
    
      <category term="GIT" scheme="http://www.cxyteam.com/tags/GIT/"/>
    
      <category term="GIT" scheme="http://www.cxyteam.com/categories/GIT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装docker-swarm]]></title>
    <link href="http://www.cxyteam.com/2017/08/03/%E5%AE%89%E8%A3%85docker-swarm/"/>
    <id>http://www.cxyteam.com/2017/08/03/安装docker-swarm/</id>
    <published>2017-08-03T02:08:49.000Z</published>
    <updated>2017-08-07T02:17:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="在virtualbox安装centos7"><a href="#在virtualbox安装centos7" class="headerlink" title="在virtualbox安装centos7"></a>在virtualbox安装centos7</h1><pre><code>注意一定要是在centos7及以上的版本
</code></pre><h1 id="centeos安装docker"><a href="#centeos安装docker" class="headerlink" title="centeos安装docker"></a>centeos安装docker</h1><pre><code>curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -
</code></pre><h1 id="启动docker容器"><a href="#启动docker容器" class="headerlink" title="启动docker容器"></a>启动docker容器</h1><pre><code>service docker start
</code></pre><h1 id="安装docker-swarm"><a href="#安装docker-swarm" class="headerlink" title="安装docker swarm"></a>安装docker swarm</h1><pre><code>docker pull swarm
</code></pre><h1 id="获取docker容器ip"><a href="#获取docker容器ip" class="headerlink" title="获取docker容器ip"></a>获取docker容器ip</h1><pre><code>本次我的两个主机的ip是：
    manage：192.168.1.164
    node1：192.168.1.183
    node2：192.168.1.194
</code></pre><h1 id="生产集群token"><a href="#生产集群token" class="headerlink" title="生产集群token"></a>生产集群token</h1><pre><code>docker run --rm swarm create
执行命令后会生产一串集群的token，记录下来（我的token是：6335a310b4fe5b21492bc119a03980d6）
</code></pre><h1 id="添加节点到集群"><a href="#添加节点到集群" class="headerlink" title="添加节点到集群"></a>添加节点到集群</h1><pre><code>docker run -d swarm join --addr=192.168.1.183:2375 token://6335a310b4fe5b21492bc119a03980d6
docker run -d swarm join --addr=192.168.1.194:2375 token://6335a310b4fe5b21492bc119a03980d6
</code></pre><h1 id="在manage上开启管理程序"><a href="#在manage上开启管理程序" class="headerlink" title="在manage上开启管理程序"></a>在manage上开启管理程序</h1><pre><code>docker run -d -p 8888:2375 swarm manage token://6335a310b4fe5b21492bc119a03980d6
</code></pre><h1 id="列出集群中的节点"><a href="#列出集群中的节点" class="headerlink" title="列出集群中的节点"></a>列出集群中的节点</h1><pre><code>docker run --rm swarm list token://6335a310b4fe5b21492bc119a03980d6    
</code></pre><h1 id="在manage上管理node1，node2"><a href="#在manage上管理node1，node2" class="headerlink" title="在manage上管理node1，node2"></a>在manage上管理node1，node2</h1><pre><code>docker -H 192.168.1.164:8888 info
docker -H 192.168.1.164:8888 ps
docker -H 192.168.1.164:8888 logs
</code></pre><h1 id="在集群上运行容器"><a href="#在集群上运行容器" class="headerlink" title="在集群上运行容器"></a>在集群上运行容器</h1><pre><code>docker -H 192.168.1.164:8888 run -d --name web1 nginx
docker -H 192.168.1.164:8888 run -d --name web2 nginx
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="在virtualbox安装centos7"><a href="#在virtualbox安装centos7" class="headerlink" title="在virtualbox安装centos7"></a>在virtualbox安装centos7</h1><]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker实践命令]]></title>
    <link href="http://www.cxyteam.com/2017/08/03/docker%E5%AE%9E%E8%B7%B5%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.cxyteam.com/2017/08/03/docker实践命令/</id>
    <published>2017-08-03T01:56:30.000Z</published>
    <updated>2017-08-07T03:04:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="查看docker容器的ip"><a href="#查看docker容器的ip" class="headerlink" title="查看docker容器的ip"></a>查看docker容器的ip</h1><pre><code>docker inspect --format &apos;{{ .NetworkSettings.IPAddress }}&apos; container_name/names
</code></pre><h1 id="查看docker完整的额容器id"><a href="#查看docker完整的额容器id" class="headerlink" title="查看docker完整的额容器id"></a>查看docker完整的额容器id</h1><pre><code>docker ps --no-trunc
</code></pre><h1 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h1><pre><code>docker logs -f docker_name
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="查看docker容器的ip"><a href="#查看docker容器的ip" class="headerlink" title="查看docker容器的ip"></a>查看docker容器的ip</h1><pre><code>docker inspect --f]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[登录docker容器]]></title>
    <link href="http://www.cxyteam.com/2017/08/02/%E7%99%BB%E5%BD%95docker%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.cxyteam.com/2017/08/02/登录docker容器/</id>
    <published>2017-08-02T13:48:26.000Z</published>
    <updated>2017-08-07T03:02:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h1><h6 id="查看启动的容器"><a href="#查看启动的容器" class="headerlink" title="查看启动的容器"></a>查看启动的容器</h6><pre><code>docker ps
注意：CONTAINER ID，NAMES这两个信息下面命令会用到
</code></pre><h6 id="登录容器"><a href="#登录容器" class="headerlink" title="登录容器"></a>登录容器</h6><pre><code>docker attach contain_id(CONTAINER ID)
docker attach contain_name(NAMES)
</code></pre><h1 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h1><h6 id="查看启动的容器-1"><a href="#查看启动的容器-1" class="headerlink" title="查看启动的容器"></a>查看启动的容器</h6><pre><code>docker ps
</code></pre><h6 id="登录容器-1"><a href="#登录容器-1" class="headerlink" title="登录容器"></a>登录容器</h6><pre><code>docker exec -it  contain_id(CONTAINER ID) /bin/bash
docker exec contain_name(NAMES) /bin/bash
</code></pre><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><h6 id="这应该是很传统的连接方式，但是不建议用这种方式进入容器"><a href="#这应该是很传统的连接方式，但是不建议用这种方式进入容器" class="headerlink" title="这应该是很传统的连接方式，但是不建议用这种方式进入容器"></a>这应该是很传统的连接方式，但是不建议用这种方式进入容器</h6><blockquote>
<p><a href="http://www.oschina.net/translate/why-you-dont-need-to-run-sshd-in-docker?cmp" title="为什么不需要在docker中运行sshd" target="_blank" rel="external">为什么不需要在docker中运行sshd</a></p>
</blockquote>
<h1 id="nesenter"><a href="#nesenter" class="headerlink" title="nesenter"></a>nesenter</h1><h6 id="查看启动的容器-2"><a href="#查看启动的容器-2" class="headerlink" title="查看启动的容器"></a>查看启动的容器</h6><pre><code>docker ps
</code></pre><h6 id="查看容器详细信息"><a href="#查看容器详细信息" class="headerlink" title="查看容器详细信息"></a>查看容器详细信息</h6><pre><code>docker inspect contain_id(CONTAINER ID)
docker inspect contain_name(NAMES)
</code></pre><h6 id="登录容器-2"><a href="#登录容器-2" class="headerlink" title="登录容器"></a>登录容器</h6><pre><code>nsenter --target $pid --mount --uts --ipc --net --pid
$pid是在查看容器详细信息的时候拿到的pid，nsenter是需要安装的，自己去google吧
</code></pre><blockquote>
<p><a href="https://github.com/jpetazzo/nsenter" title="什么是nesenter" target="_blank" rel="external">什么是nesenter</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h1><h6 id="查看启动的容器"><a href="#查看启动的容器" class="headerlink" ti]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mac无法ping通docker容器]]></title>
    <link href="http://www.cxyteam.com/2017/08/01/mac%E6%97%A0%E6%B3%95ping%E9%80%9Adocker%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.cxyteam.com/2017/08/01/mac无法ping通docker容器/</id>
    <published>2017-08-01T02:02:03.000Z</published>
    <updated>2017-08-03T01:34:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="不能ping通的原因"><a href="#不能ping通的原因" class="headerlink" title="不能ping通的原因"></a>不能ping通的原因</h1><pre><code>由于Docker for mac的网络实现方式，不能够创建docker0虚拟网卡，实际上它存在于HyperKit
由于macox的限制，不能将流量转发给容器
</code></pre><blockquote>
<p><a href="https://docs.docker.com/docker-for-mac/networking/#there-is-no-docker0-bridge-on-macos" title="mac不能ping通docker的原因" target="_blank" rel="external">mac不能ping通docker的原因</a></p>
</blockquote>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h5 id="映射端口"><a href="#映射端口" class="headerlink" title="映射端口"></a>映射端口</h5><pre><code>docker run -d -p 80:80 --name webserver nginx
</code></pre><h5 id="注意：需要查看80端口是否被占用"><a href="#注意：需要查看80端口是否被占用" class="headerlink" title="注意：需要查看80端口是否被占用"></a>注意：需要查看80端口是否被占用</h5><pre><code>lsof -P | grep &apos;:80&apos;
</code></pre><h5 id="如果想在本地开发，在docker环境中运行（实现代码上传至服务器查看运行效果）"><a href="#如果想在本地开发，在docker环境中运行（实现代码上传至服务器查看运行效果）" class="headerlink" title="如果想在本地开发，在docker环境中运行（实现代码上传至服务器查看运行效果）"></a>如果想在本地开发，在docker环境中运行（实现代码上传至服务器查看运行效果）</h5><pre><code>docker run -d -p 80:80 -v /data1/htdocs/code /data1/htdocs/code --name webserver nginx
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="不能ping通的原因"><a href="#不能ping通的原因" class="headerlink" title="不能ping通的原因"></a>不能ping通的原因</h1><pre><code>由于Docker for mac的网络实现方式，不能够创建d]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何编写一个dockerfile]]></title>
    <link href="http://www.cxyteam.com/2017/07/14/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdockerfile/"/>
    <id>http://www.cxyteam.com/2017/07/14/如何编写一个dockerfile/</id>
    <published>2017-07-14T01:22:39.000Z</published>
    <updated>2017-08-03T01:37:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>更快的构建速度</li>
<li>更小的Docker镜像大小</li>
<li>更少的Docker镜像层</li>
<li>充分利用镜像缓存</li>
<li>增加Dockerfile可读性</li>
<li>让Docker容器使用起来更简单</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>容器只运行单个应用</li>
<li>将多个RUN指令合并为一个</li>
<li>基础镜像的标签不要用latest</li>
<li>每个RUN指令后删除多余文件</li>
<li>选择合适的基础镜像(alpine版本最好，不过个人还是喜欢centos)</li>
<li>设置WORKDIR和CMD</li>
<li>COPY与ADD优先使用前者</li>
<li>合理调整COPY与RUN的顺序</li>
<li>设置默认的环境变量，映射端口和数据卷</li>
<li>使用LABEL设置镜像元数据</li>
<li>添加HEALTHCHECK</li>
<li>使用ENTRYPOINT (可选，可以用于做不同环境的判断，不如dev，product)</li>
<li>在entrypoint脚本中使用exec</li>
</ul>
<h1 id="编写步骤"><a href="#编写步骤" class="headerlink" title="编写步骤"></a>编写步骤</h1><blockquote>
<p><a href="https://blog.fundebug.com/2017/05/15/write-excellent-dockerfile/" title="编写dockerfile" target="_blank" rel="external">编写dockerfile</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>更快的构建速度</li>
<li>更小的Docker镜像大小</li>
<li>更少的Docker镜像层</li>
<li>充分]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[go的应用场景]]></title>
    <link href="http://www.cxyteam.com/2017/06/10/go%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://www.cxyteam.com/2017/06/10/go的应用场景/</id>
    <published>2017-06-10T09:26:53.000Z</published>
    <updated>2017-06-10T09:45:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="部署简单"><a href="#部署简单" class="headerlink" title="部署简单"></a>部署简单</h3><pre><code>go直接生成一个静态编译文件，除了对glibc外没有其他的依赖
</code></pre><h3 id="并发性好"><a href="#并发性好" class="headerlink" title="并发性好"></a>并发性好</h3><pre><code>goruntime和channel使得编写高并发的服务端软件变得相当简单，很多情况下不需要考虑锁机制以及由此带来的问题。
单个go应用能有效利用多个CPU内核，并行执行性能好
</code></pre><h3 id="跨平台编译"><a href="#跨平台编译" class="headerlink" title="跨平台编译"></a>跨平台编译</h3><h3 id="丰富的标准库"><a href="#丰富的标准库" class="headerlink" title="丰富的标准库"></a>丰富的标准库</h3><h3 id="活跃的社区支持"><a href="#活跃的社区支持" class="headerlink" title="活跃的社区支持"></a>活跃的社区支持</h3>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="部署简单"><a href="#部署简单" class="headerlink" title="部署简单"></a>部署简单</h3><pre><code>go直接生成一个静态编译文件，除了对glibc外没有其他的依赖
</code></pre><h3 id="并]]>
    </summary>
    
      <category term="GO" scheme="http://www.cxyteam.com/tags/GO/"/>
    
      <category term="GO" scheme="http://www.cxyteam.com/categories/GO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于产品设计的几个小思考]]></title>
    <link href="http://www.cxyteam.com/2017/06/06/%E5%85%B3%E4%BA%8E%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%80%9D%E8%80%83/"/>
    <id>http://www.cxyteam.com/2017/06/06/关于产品设计的几个小思考/</id>
    <published>2017-06-06T02:42:49.000Z</published>
    <updated>2017-06-06T06:14:38.000Z</updated>
    <content type="html"><![CDATA[<h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><pre><code>以下的问题可能是对产品设计的一些比较粗糙的言论，很多想法主要来自公司产品组
</code></pre><h6 id="明确的目标用户"><a href="#明确的目标用户" class="headerlink" title="明确的目标用户"></a>明确的目标用户</h6><pre><code>这个至关重要，是产品定位的大基调
能够更精准的确定获取目标用户的渠道
能够精准的给用户设计产品功能
比如说：
    我的目标用户是青年人，那么理想的状态是我会推广一个文章能够触达到我的青年用户，在获取
    青年用户的同时希望能够剔除掉非青年用户（毕竟用户的运营也是有成本的，这里指的是个性化
    运营，并不是群发文章之类的）
</code></pre><h6 id="为什么很多公司的官网的首屏在显示的时候，页面的底部会显示一个内容的部分：比如说一张图片的1-3或者一个产品介绍的部分？"><a href="#为什么很多公司的官网的首屏在显示的时候，页面的底部会显示一个内容的部分：比如说一张图片的1-3或者一个产品介绍的部分？" class="headerlink" title="为什么很多公司的官网的首屏在显示的时候，页面的底部会显示一个内容的部分：比如说一张图片的1/3或者一个产品介绍的部分？"></a>为什么很多公司的官网的首屏在显示的时候，页面的底部会显示一个内容的部分：比如说一张图片的1/3或者一个产品介绍的部分？</h6><pre><code>提醒用户，首屏下面还有内容，网站是可以滚动的    
</code></pre><p><img src="/img/product/think/home_part_negative.png" alt="Alt text" title="首屏是完整的页面"><br><img src="/img/product/think/home_part_positive.png" alt="Alt text" title="首屏只显示部分页面"></p>
<h6 id="关注首屏"><a href="#关注首屏" class="headerlink" title="关注首屏"></a>关注首屏</h6><pre><code>首屏是决定用户是否继续浏览的关键因素
解决用户的信任问题
放足够吸引用户的东西
依旧举个例子（如下图）：
    1、首先打开官网最打眼的2的位置，一个大红包这是足够吸引我去看红包是怎么回事
    2、3的位置很巧妙，2的位置引导眼球的时候，在视线的下方位置，
       观看到3的红色的免费字样，接着我的视线一定会移动到3所在的功能块，这个时候又是
       10位置的红色字样直接吸引过来，接着应该是顺理成章的做评估了，设计者最后在
       8的位置还把评估的人数显示上来，低调的解除了用户的不信任危机
    3、再者是7的位置和传统的轮播图比他的优势在于右边的文字，一次性列举出了所有
       的轮播图的作用（不是像传统的那样就是两个箭头或者几个数字点击能够进行切换，作为
       用户我哪来的耐心去猜测你的箭头会切换到哪个轮播图？）
    4、再看1的位置，在导航栏中做了重点的突出，应该是吸引用户的一个重要功能，很
       希望用户去点
    5、看4，5的位置我认为都在解决一个信任的问题，首先是4的位置介绍我的资质，这
       个是比较有说服力的客观事实你如果还不信的话可以到5的位置去看关于我们
</code></pre><p><img src="/img/product/think/hainabian_home.png" alt="Alt text" title="优质首页分析"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><pre><code>以下的问题可能是对产品设计的一些比较粗糙的言论，很多想法主要来自公司产品组
</code></pre><h6 id="明确的]]>
    </summary>
    
      <category term="产品&amp;运营" scheme="http://www.cxyteam.com/tags/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
      <category term="产品&amp;运营" scheme="http://www.cxyteam.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dockerfile的编写]]></title>
    <link href="http://www.cxyteam.com/2017/06/04/Dockerfile%E7%9A%84%E7%BC%96%E5%86%99/"/>
    <id>http://www.cxyteam.com/2017/06/04/Dockerfile的编写/</id>
    <published>2017-06-04T08:21:31.000Z</published>
    <updated>2017-06-12T01:29:51.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Dockerfile-作用"><a href="#Dockerfile-作用" class="headerlink" title="Dockerfile 作用"></a>Dockerfile 作用</h1><pre><code>定制自己的镜像，明确的把修改，安装，构建操作等指定都写入其中，描述该层是如何创建的
docker commit可以实现同样的功能（在容器中安装某些软件之后，提交到基础镜像中形成新的镜像），但是commit安装了什么，如何安装的都是黑盒，后面使用该镜像的人无从得知执行了哪些指令
</code></pre><h1 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h1><h3 id="docker-build-其他用法"><a href="#docker-build-其他用法" class="headerlink" title="docker build 其他用法"></a>docker build 其他用法</h3><h6 id="标准用法"><a href="#标准用法" class="headerlink" title="标准用法"></a>标准用法</h6><pre><code>docker build -t image_name PATH
在PATH目录下，按照Dockerfile建立一个新的image_name镜像
path指的是上下文环境，当构建的时候，用户会指定构建镜像上下文的路径，docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎，这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件
</code></pre><h6 id="直接用-Git-repo-进行构建"><a href="#直接用-Git-repo-进行构建" class="headerlink" title="直接用 Git repo 进行构建"></a>直接用 Git repo 进行构建</h6><pre><code>docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14
指定了构建所需的 Git repo，并且指定默认的 master 分支，构建目录为 /8.14/，然后 Docker 就会自己去 git clone 这个项目、切换到指定分支、并进入到指定目录后开始构建
</code></pre><h6 id="用给定的-tar-压缩包构建"><a href="#用给定的-tar-压缩包构建" class="headerlink" title="用给定的 tar 压缩包构建"></a>用给定的 tar 压缩包构建</h6><pre><code>docker build http://server/context.tar.gz
Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建
</code></pre><h6 id="从标准输入中读取-Dockerfile-进行构建"><a href="#从标准输入中读取-Dockerfile-进行构建" class="headerlink" title="从标准输入中读取 Dockerfile 进行构建"></a>从标准输入中读取 Dockerfile 进行构建</h6><pre><code>docker build - &lt; Dockerfile或者cat Dockerfile | docker build -
如果标准输入传入的是文本文件，则将其视为 Dockerfile，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 COPY 进镜像之类的事情
</code></pre><h6 id="从标准输入中读取上下文压缩包进行构建"><a href="#从标准输入中读取上下文压缩包进行构建" class="headerlink" title="从标准输入中读取上下文压缩包进行构建"></a>从标准输入中读取上下文压缩包进行构建</h6><pre><code>docker build - &lt; context.tar.gz
如果发现标准输入的文件格式是 gzip、bzip2 以及 xz 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建
</code></pre><h6 id="From"><a href="#From" class="headerlink" title="From"></a>From</h6><pre><code>指定基础镜像，在其上进行定制
</code></pre><h6 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h6><pre><code>执行命令行的命令，比如：RUN apt-get update是执行apt-get update命令
执行此命令的时候需要注意，在Dockerfile中没执行一个指令都会新建一层(目前有个最大层的限制是127层)，所以每执行一个RUN就会和我们在执行安装软件然后执行commit一样，苟静一层镜像。因此在执行多个命令的时候使用&quot;&amp;&quot;符连接，用一个RUN执行，这样就只会新建一个层
不可这样：
RUN apt-get update
RUN apt-get -y install vim
应当改为：
RUN apt-get update \
    &amp;&amp; apt-get -y install vim
</code></pre><h6 id="COPY-source-path-target-path"><a href="#COPY-source-path-target-path" class="headerlink" title="COPY source_path target_path"></a>COPY source_path target_path</h6><pre><code>将本地的source_path复制到新的一层镜像内的target_path位置（如果source_path是相对路径，那么需要注意的是他是相对于docker build -t image_name PATH时指定的PATH也就是上下文环境）
source_path支持通配符
target_path可以是容器的绝对路径，也可以是相对于工作目录的相对路径（工作目录用WORKDIR指令来指定）
需要注意的是所有的source_path的文件属性都会保留（包含读写执行权限等）
</code></pre><h6 id="ADD-source-path-target-path"><a href="#ADD-source-path-target-path" class="headerlink" title="ADD source_path target_path"></a>ADD source_path target_path</h6><pre><code>使用方式和COPY一样，但是添加了一些新的功能
source_path可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 target_path去。下载后的文件权限自动设置为 600，另外，如果下载的是个压缩包，需要解压缩，如果对权限不满足或者需要进行解压缩，那就需要再使用RUN命令调整
如果source_path是一个tar压缩文件的话，ADD会将文件解压缩后到target_path中
</code></pre><h6 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h6><pre><code>CMD与RUN类似
shell格式：CMD 命令
exec格式：CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]
参数列表格式：CMD [&quot;参数1&quot;, &quot;参数2&quot;...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数
需要注意的是：Docker 不是虚拟机，容器就是进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西(这块实验并没有成功，暂时忽略，有坑能想到这块就行)
什么意思呢？重启nginx的时候可能会写成这样：CMD service nginx start
在执行的时候会被理解为：CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]，因此主进程实际是sh，当service nginx start结束之后，sh也就结束了，sh作为主进程退出，自然容器也就退出了
正确的做法是直接执行nginx可执行文件
CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]
</code></pre><h6 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h6><pre><code>和cmd的命令差不多，两个应用场景
1、启动一个服务前的准备工作
    FROM alpine:3.4
    ...
    RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis
    ...
    ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]

    EXPOSE 6379
    CMD [ &quot;redis-server&quot; ]


    docker-entrypoint.sh的脚本
    #!/bin/sh
    ...
    # allow the container to be started with `--user`
    if [ &quot;$1&quot; = &apos;redis-server&apos; -a &quot;$(id -u)&quot; = &apos;0&apos; ]; then
        chown -R redis .
        exec su-exec redis &quot;$0&quot; &quot;$@&quot;
    fi

    exec &quot;$@&quot;
    这时候的ENTRYPOINT会判断CMD的内容，如果是redis-server就切换redis用户身份启动服务器，否则用root身份执行

2、让镜像像命令一样
    FROM ubuntu:16.04
    RUN apt-get update \
        &amp;&amp; apt-get install -y curl \
        &amp;&amp; rm -rf /var/lib/apt/lists/*
    CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.cn&quot; ]

    如上我们在构建好镜像之后，执行docker run container_name就会执行curl http://ip.cn
    如果这个时候我想显示当前的http头信息，就需要加上-i的参数了，假如我们执行docker run container_name -I 命令会变成curl -I http://ip.cn？
    记住在镜像的后面只能跟command，运行时会替换CMD的默认值，所以在这里的-i是把整个的CMD给替换了，而-I这个命令是不存在的，显然我们需要docker run container_name curl -I http://ip.cn这么写
    如果我们换成这种写法
    FROM ubuntu:16.04
    RUN apt-get update \
        &amp;&amp; apt-get install -y curl \
        &amp;&amp; rm -rf /var/lib/apt/lists/*
    ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.cn&quot; ]

    这样写就能构建完镜像之后，执行docker run container_name就能获取header信息
    因为CMD的内容将会作为参数传给ENTRYPOINT，因此原本命令是curl http://ip.cn，CMD命令是-I所以最终执行的命令是curl -I http://ip.cn
</code></pre><h6 id="ENV设置环境变量"><a href="#ENV设置环境变量" class="headerlink" title="ENV设置环境变量"></a>ENV设置环境变量</h6><pre><code>ENV key val
ENV key1=val1 key2=val2
ENV VERSION=1.01 NAME=&quot;TEST&quot;
</code></pre><h6 id="ARG构建参数"><a href="#ARG构建参数" class="headerlink" title="ARG构建参数"></a>ARG构建参数</h6><pre><code>ARG key=val
和ENV一样是设置环境变量，ARG构建的环境变量，在容器运行时不会存在这些环境变量（貌似就是一个临时的环境变量的概念，但是他能用docker history查看，所以不要以为真的是临时变量，直接传入账号密码）
</code></pre><h6 id="VOLUME定义匿名卷"><a href="#VOLUME定义匿名卷" class="headerlink" title="VOLUME定义匿名卷"></a>VOLUME定义匿名卷</h6><pre><code>容器运行的时候，我们应该尽量保持容器存储层不发生写操作，对于数据库类需要动态保存数据的应用/或者上传文件的目录，我们应该把这些文件保存在卷中，比如在Dockerfile中，我们事先指定 /data/mysqldata为匿名卷，这样做会保证容器存储层无变化，说白了就是你把当前的容器做build的时候不会把mysqldata文件给打包进去
VOLUME /data/mysqldata
在执行：docker run -d -v mydata:/data/mysqldata container_name的时候是可以覆盖掉匿名卷的
</code></pre><h6 id="EXPOSE暴露端口"><a href="#EXPOSE暴露端口" class="headerlink" title="EXPOSE暴露端口"></a>EXPOSE暴露端口</h6><pre><code>EXPOSE 端口1 端口2
这样写在容器运行的时候也不会开启这个端口的服务
他有两个作用：提醒，告诉镜像使用者理解这个服务的使用的端口；占用随机应用端口，
</code></pre><h6 id="WORKDIR指定工作目录"><a href="#WORKDIR指定工作目录" class="headerlink" title="WORKDIR指定工作目录"></a>WORKDIR指定工作目录</h6><pre><code>指定工作目录，以后各层的当前目录就改为指定的目录
</code></pre><h6 id="USER指定当前用户"><a href="#USER指定当前用户" class="headerlink" title="USER指定当前用户"></a>USER指定当前用户</h6><pre><code>切换到指定用户，该用户必须事先存在
</code></pre><h6 id="HEALTHCHECK健康检查"><a href="#HEALTHCHECK健康检查" class="headerlink" title="HEALTHCHECK健康检查"></a>HEALTHCHECK健康检查</h6><pre><code>--interval  两次健康检查的间隔时间
--timeout   监看检查命令运行超时时间，如果超过这个时间，本次健康检查视为失败，默认30s
--retries   当连续失败命令运行

FROM nginx
RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=5s --timeout=3s \
  CMD curl -fs http://localhost/ || exit 1

这里设置每隔5s检查一次，如果健康检查命令超过3s没响应就视为失败，并使用curl -fs http://localhost/ || exit 1作为健康检查命令
</code></pre><h6 id="onbulid"><a href="#onbulid" class="headerlink" title="onbulid"></a>onbulid</h6><pre><code>他后面跟其他的指令，例如RUN,COPY等，而这些指令，在当前镜像构建时并不会被执行，只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行
1、先编写一个Dockerfile文件，内容如下：
    FROM web1
    ONBUILD RUN mkdir /test

2、利用上面的Dockerfile构建镜像：docker build -t web1
    这个时候你在web1镜像中不会看到有/test文件夹

3、在编写一个Dockerfile，内容如下
    FROM web1

4、构建镜像：docker build -t web2
    这个时候你会看到镜像web2中有/test文件夹
</code></pre><h6 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h6><pre><code>如果在docker build指定的上下文环境中有不需要COPY的文件，可以像.gitignore这样的语法写在.dockerignore
.path/*
.file_name
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Dockerfile-作用"><a href="#Dockerfile-作用" class="headerlink" title="Dockerfile 作用"></a>Dockerfile 作用</h1><pre><code>定制自己的镜像，明确的把修改，安装，]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker的应用场景]]></title>
    <link href="http://www.cxyteam.com/2017/06/02/docker%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://www.cxyteam.com/2017/06/02/docker的应用场景/</id>
    <published>2017-06-02T02:31:31.000Z</published>
    <updated>2017-06-02T03:42:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><pre><code>    Docker是一种轻量虚拟化的容器技术，提供类似虚拟机的隔离功能，并使用了一种分层的联合文件系
统技术管理镜像，能极大简化环境运维过程，相对于VM，docker在其轻量、配置复杂度以及资源利用率方
面有着明显的优势
</code></pre><h1 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h1><pre><code>    虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在
降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个
Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度
</code></pre><h1 id="代码流水线管理"><a href="#代码流水线管理" class="headerlink" title="代码流水线管理"></a>代码流水线管理</h1><pre><code>    代码从开发机到最终的生产环境的部署，需要经过很多的中间环境，Docker给应用提供了一个一致
的环境，让代码的流水线变得简单
</code></pre><h1 id="提高开发效率"><a href="#提高开发效率" class="headerlink" title="提高开发效率"></a>提高开发效率</h1><pre><code>    在开发的过程中，对于环境，我们永远避不开两件事：1.快速的搭建开发环境 2.让开发环境和生产
环境无限保持一致
</code></pre><h1 id="隔离应用"><a href="#隔离应用" class="headerlink" title="隔离应用"></a>隔离应用</h1><pre><code>    在开发或者生产环境中，出于节约服务器资源的考虑，通常会出现这样的情况，一台服务器上部署多
个应用，这样部署应用一般会导致修改某些文件会导致应用之间互相干扰，比如修改nginx配置
</code></pre><h1 id="整合服务器"><a href="#整合服务器" class="headerlink" title="整合服务器"></a>整合服务器</h1><pre><code>在一台服务器上部署多个应用
</code></pre><h1 id="调试能力"><a href="#调试能力" class="headerlink" title="调试能力"></a>调试能力</h1><pre><code>Docker提供了很多的工具
</code></pre><h1 id="多租户环境"><a href="#多租户环境" class="headerlink" title="多租户环境"></a>多租户环境</h1><h1 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h1><pre><code>    在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间
缩短到了分钟级别，而Docker通过为进程仅仅创建一个容器而无需启动一个操作系统，再次将这个过程缩短
到了秒级


http://get.ftqq.com/7115.get
http://dockone.io/article/126
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><pre><code>    Docker是一种轻量虚拟化的容器技术，提供类似虚拟机的隔离功能，并使用了一种分层的联合文件系
统技术管理镜像，能极]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
</feed>