<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[狂奔的菜鸟]]></title>
  <subtitle><![CDATA[当你的实力支撑不起你的野心的时候，静下心来好好学习吧！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.cxyteam.com/"/>
  <updated>2018-05-09T13:19:20.000Z</updated>
  <id>http://www.cxyteam.com/</id>
  
  <author>
    <name><![CDATA[狂奔的菜鸟]]></name>
    <email><![CDATA[phpchengxuyuan@sina.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[mysql分表]]></title>
    <link href="http://www.cxyteam.com/2018/05/08/mysql%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <id>http://www.cxyteam.com/2018/05/08/mysql分库分表/</id>
    <published>2018-05-08T10:46:59.000Z</published>
    <updated>2018-05-09T13:19:20.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>问题<br>  1、做分页，检索</p>
<pre><code>合并查询
es
</code></pre><p>  2、跨库事务</p>
<pre><code>程序和数据库自己控制
分布式事务
</code></pre><p>  3、join，count，group by等操作</p>
<pre><code>分两次查询
</code></pre><p>  4、分布式id的生成</p>
<pre><code>雪花算法
uuid
</code></pre><p>  5、数据迁移，容量规划，扩容</p>
<pre><code>利用主从同步，或者双主，来冗余数据，重新搭建主从或者双主同步关系来实现成倍扩容
http://www.10tiao.com/html/249/201702/2651959883/1.html
</code></pre></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p>问题<br>  1、做分页，检索</p>
<pre><code>合并查询
es
</code></pre><p>  2、跨库事务</p>
<pre><code>程序和数据库自己控制
分布式事务
</code></pre><p>  3、join，count，]]>
    </summary>
    
      <category term="Mysql" scheme="http://www.cxyteam.com/tags/Mysql/"/>
    
      <category term="Mysql" scheme="http://www.cxyteam.com/categories/Mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis-ziplist源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/03/09/redis-ziplist%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/03/09/redis-ziplist源码阅读/</id>
    <published>2018-03-09T02:23:29.000Z</published>
    <updated>2018-04-05T09:06:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ziplist结构"><a href="#ziplist结构" class="headerlink" title="ziplist结构"></a>ziplist结构</h1><ol>
<li>zlbytes：记录整个压缩列表占用的内存字节数</li>
<li>zltail：记录压缩列表表尾节点距离压缩列表的起始地址有多少字节</li>
<li>zllen：记录了压缩列表包含的节点数量</li>
<li>entryX：压缩列表包含的各个节点，节点的长度由节点保存的内容决定</li>
<li>zlend：特殊值 0xFF （十进制 255 ），用于标记压缩列表的末端</li>
</ol>
<h1 id="节点结构"><a href="#节点结构" class="headerlink" title="节点结构"></a>节点结构</h1><pre><code>/*
 * 保存 ziplist 节点信息的结构
 */
typedef struct zlentry {

    // prevrawlen ：前置节点的长度
    // prevrawlensize ：编码 prevrawlen 所需的字节大小；只能是１字节或者５字节
    unsigned int prevrawlensize, prevrawlen;

    // len ：当前节点值的长度，指出实体字段的具体长度即真正存储数据的字段，单位是字节
    // lensize ：编码 len 所需的字节大小, 1字节，　２字节　５字节
    unsigned int lensize, len;

    // 当前节点 header 的大小
    // 等于 prevrawlensize + lensize
    unsigned int headersize;

    // 当前节点值所使用的编码类型
    unsigned char encoding;

    // 指向当前节点的指针
    unsigned char *p;

} zlentry;
</code></pre><p><img src="/img/redis/ziplist.png" alt="Alt text" title="ziplist结构"></p>
<ol>
<li>prevrawlensize：编码prevrawlen所需的字节大小</li>
<li>prevrawlen：前置节点的长度；当长度小于255字节时，用一个字节存储；当长度大于等于255时，用五个字节进行存储，其中第一个字节会被设置为255表示前一个entry的长度由后面四个字节表示</li>
<li>len：当前节点值的长度</li>
<li>lensize：编码 len 所需的字节大小, 1字节，　２字节　５字节</li>
<li>headersize：等于 prevrawlensize + lensize</li>
<li><p>encoding：当前节点值所使用的编码类；它会根据当前元素内容的不同会采用不同的编码方式<br> 如果元素内容为字符串，encoding的值分别为：<br> 00xx xxxx ：00开头表示该字符串的长度用6个bit表示。<br> 01xx xxxx | xxxx xxxx ：01开头表示字符串的长度由14bit表示，这14个bit采用大端存储。<br> 1000 0000 | xxxx xxxx | xxxx xxxx | xxxx xxxx | xxxx xxxx ：10开头表示后续的四个字节为字符串长度，这32个bit采用大端存储</p>
<p> 如果元素内容为数字，encoding的值分别为：<br> 1100 0000：表示数字占用后面2个字节。<br> 1101 0000：表示数字占用后面4个字节。<br> 1110 0000：表示数字占用后面8个字节。<br> 1111 0000 ：表示数字占用后面3个字节。<br> 1111 1110 ：表示数字占用后面1个字节。<br> 1111 1111 ：表示压缩链表中最后一个元素（特殊编码）。<br> 1111 xxxx ：表示只用后4位表示0~12的整数，由于0000，1110跟1111三种已经被占用，也就是说这里的xxxx四位只能表示0001~1101，转换成十进制就是数字1~13，但是redis规定它用来表示0~12，因此当遇到这个编码时，我们需要取出后四位然后减1来得到正确的值。</p>
</li>
<li><p>*p：指向当前节点的指针</p>
</li>
</ol>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol>
<li>一个列表只含有少量列表项</li>
<li>每个列表项是小整数值或者长度比较短的字符串</li>
</ol>
<h1 id="编码，解码"><a href="#编码，解码" class="headerlink" title="编码，解码"></a>编码，解码</h1><h3 id="编码前置节点长度信息"><a href="#编码前置节点长度信息" class="headerlink" title="编码前置节点长度信息"></a>编码前置节点长度信息</h3><pre><code>/* Encode the length of the previous entry and write it to &quot;p&quot;. Return the
 * number of bytes needed to encode this length if &quot;p&quot; is NULL. 
 *
 * 对前置节点的长度 len 进行编码，并将它写入到 p 中，
 * 然后返回编码 len 所需的字节数量。
 *
 * 如果 p 为 NULL ，那么不进行写入，仅返回编码 len 所需的字节数量。
 *
 * T = O(1)
 * 前置节点的长度编码字节数只有１字节和５字节
 * 如果前一节点的长度小于 254 字节， 那么 previous_entry_length 属性的长度为 1 字节： 前一节点的长度就保存在这一个字节里面。
 * 如果前一节点的长度大于等于 254 字节， 那么 previous_entry_length 属性的长度为 5 字节： 其中属性的第一字节会被设置为 0xFE （十进制值 254）， 而之后的四个字节则用于保存前一节点的长度。
 */
static unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {

    // 仅返回编码 len 所需的字节数量
    if (p == NULL) {
        return (len &lt; ZIP_BIGLEN) ? 1 : sizeof(len) + 1;
    } else {
        // 写入并返回编码 len 所需的字节数量
        // 1 字节
        if (len &lt; ZIP_BIGLEN) {
            p[0] = len;
            return 1;

        // 5 字节
        } else {
            // 添加 5 字节长度标识
            p[0] = ZIP_BIGLEN;
            // 写入编码
            memcpy(p + 1, &amp;len, sizeof(len));
            // 如果有必要的话，进行大小端转换
            memrev32ifbe(p + 1);
            // 返回编码长度
            return 1 + sizeof(len);
        }
    }
}
</code></pre><h3 id="解码前置节点长度信息"><a href="#解码前置节点长度信息" class="headerlink" title="解码前置节点长度信息"></a>解码前置节点长度信息</h3><pre><code>/* Decode the number of bytes required to store the length of the previous
 * element, from the perspective of the entry pointed to by &apos;ptr&apos;. 
 *
 * 解码 ptr 指针，
 * 取出编码前置节点长度所需的字节数，并将它保存到 prevlensize 变量中。
 *
 * T = O(1)
 */
#define ZIP_DECODE_PREVLENSIZE(ptr, prevlensize) do {                          \
    if ((ptr)[0] &lt; ZIP_BIGLEN) {                                               \
        (prevlensize) = 1;                                                     \
    } else {                                                                   \
        (prevlensize) = 5;                                                     \
    }                                                                          \
} while(0);

/* Decode the length of the previous element, from the perspective of the entry
 * pointed to by &apos;ptr&apos;. 
 *
 * 解码 ptr 指针，
 * 取出编码前置节点长度所需的字节数，
 * 并将这个字节数保存到 prevlensize 中。
 *
 * 然后根据 prevlensize ，从 ptr 中取出前置节点的长度值，
 * 并将这个长度值保存到 prevlen 变量中。
 *
 * T = O(1)
 */
#define ZIP_DECODE_PREVLEN(ptr, prevlensize, prevlen) do {                     \
                                                                               \
    /* 先计算被编码长度值的字节数 */                                           \
    ZIP_DECODE_PREVLENSIZE(ptr, prevlensize);                                  \
                                                                               \
    /* 再根据编码字节数来取出长度值 */                                         \
    if ((prevlensize) == 1) {                                                  \
        (prevlen) = (ptr)[0];                                                  \
    } else if ((prevlensize) == 5) {                                           \
        assert(sizeof((prevlensize)) == 4);                                    \
        memcpy(&amp;(prevlen), ((char*)(ptr)) + 1, 4);                             \
        memrev32ifbe(&amp;prevlen);                                                \
    }                                                                          \
} while(0);
</code></pre><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><h1 id="连锁更新"><a href="#连锁更新" class="headerlink" title="连锁更新"></a>连锁更新</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="ziplist结构"><a href="#ziplist结构" class="headerlink" title="ziplist结构"></a>ziplist结构</h1><ol>
<li>zlbytes：记录整个压缩列表占用的内存字节数</li>
<li>zl]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker-如何解决container服务中配置文件个性化的问题]]></title>
    <link href="http://www.cxyteam.com/2018/03/02/docker-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.cxyteam.com/2018/03/02/docker-如何解决配置文件变更的问题/</id>
    <published>2018-03-02T02:33:25.000Z</published>
    <updated>2018-05-10T11:12:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ol>
<li>传统的服务中，如果我们需要修改nginx的配置，只需要对nginx.conf进行修改，然后重启nginx的服务即可生效</li>
<li>在docker搭建中，如果我们的image中已经使用了nginx.conf的配置文件，那么我docker run的container的配置文件和image中的配置文件是一致的，如果我想修改container中nginx的log路径，我应该怎么做呢？</li>
<li>是不是我需要这样，首先修改nginx.conf 然后再commit当前container，最后再push当前container，如果我需要运行两个container有不一致的nginx.conf呢？</li>
</ol>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>通过env传递，但是仅限于很简单的配置，像nginx这样的配置文件是不太可能使用这种方式</li>
<li>通过volume挂载宿主机文件，但如果在集群中，容器漂移到其他宿主机就找不到配置文件，缺乏横向扩展<br>  docker run -t -i -d -p 8004:80 –name=pay_game -h 127.0.0.1 -v ~/Desktop/devspace/apo_api:/data1/htdocs/apo_api -v ~/Desktop/devspace/apo_api/project/config/nginx/vhosts:/usr/local/openresty/nginx/conf/vhosts lnmpr</li>
<li>使用zookeeper或者etcd来存放配置文件数据，创建容器时通过 ENV 传递配置文件的 KEY，应用启动前用 KEY 拉取配置文件，然后启动应用</li>
</ol>
<h1 id="查看容器启动时的命令"><a href="#查看容器启动时的命令" class="headerlink" title="查看容器启动时的命令"></a>查看容器启动时的命令</h1><pre><code>docker inspect pay_game
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ol>
<li>传统的服务中，如果我们需要修改nginx的配置，只需要对nginx.conf进行修改，然后重启nginx的服务即]]>
    </summary>
    
      <category term="Docker" scheme="http://www.cxyteam.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://www.cxyteam.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[活动机器数预估]]></title>
    <link href="http://www.cxyteam.com/2018/02/12/%E6%B4%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E6%95%B0%E9%A2%84%E4%BC%B0/"/>
    <id>http://www.cxyteam.com/2018/02/12/活动机器数预估/</id>
    <published>2018-02-12T01:35:24.000Z</published>
    <updated>2018-02-12T01:38:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="qps"><a href="#qps" class="headerlink" title="qps"></a>qps</h1><h3 id="php连接数"><a href="#php连接数" class="headerlink" title="php连接数"></a>php连接数</h3><h3 id="redis连接数"><a href="#redis连接数" class="headerlink" title="redis连接数"></a>redis连接数</h3><h3 id="mysql连接数"><a href="#mysql连接数" class="headerlink" title="mysql连接数"></a>mysql连接数</h3><h1 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="qps"><a href="#qps" class="headerlink" title="qps"></a>qps</h1><h3 id="php连接数"><a href="#php连接数" class="headerlink" title="php连接数"><]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql字符集]]></title>
    <link href="http://www.cxyteam.com/2018/02/09/mysql%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    <id>http://www.cxyteam.com/2018/02/09/mysql字符集/</id>
    <published>2018-02-09T03:48:24.000Z</published>
    <updated>2018-02-11T09:56:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="影响mysql中文展示乱码的原因"><a href="#影响mysql中文展示乱码的原因" class="headerlink" title="影响mysql中文展示乱码的原因"></a>影响mysql中文展示乱码的原因</h1><ol>
<li>库的字符集</li>
<li>连接字符集</li>
<li>页面显示字符集</li>
</ol>
<h1 id="查看mysql字符集设置"><a href="#查看mysql字符集设置" class="headerlink" title="查看mysql字符集设置"></a>查看mysql字符集设置</h1><pre><code>SHOW VARIABLES LIKE &apos;character%&apos;;
</code></pre><h1 id="设置mysql字符集为utf8"><a href="#设置mysql字符集为utf8" class="headerlink" title="设置mysql字符集为utf8"></a>设置mysql字符集为utf8</h1><pre><code>SET character_set_client = utf8 ;  
SET character_set_connection = utf8 ;   
SET character_set_database = utf8 ;   
SET character_set_results = utf8 ;    
SET character_set_server = utf8;
SET collation_connection = utf8 ;  
SET collation_database = utf8 ;   
SET collation_server = utf8 ; 
SET NAMES &apos;utf8&apos;;
set collation_database=utf8_general_ci;
set collation_database=utf8_general_ci;
set collation_server=utf8_general_ci;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="影响mysql中文展示乱码的原因"><a href="#影响mysql中文展示乱码的原因" class="headerlink" title="影响mysql中文展示乱码的原因"></a>影响mysql中文展示乱码的原因</h1><ol>
<li>库的字符集</l]]>
    </summary>
    
      <category term="Mysql" scheme="http://www.cxyteam.com/tags/Mysql/"/>
    
      <category term="Mysql" scheme="http://www.cxyteam.com/categories/Mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis-intset源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/02/06/redis-intset%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/02/06/redis-intset源码阅读/</id>
    <published>2018-02-06T13:52:05.000Z</published>
    <updated>2018-03-08T09:53:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="intset数据结构"><a href="#intset数据结构" class="headerlink" title="intset数据结构"></a>intset数据结构</h1><pre><code>typedef struct intset {

    // 编码方式
    uint32_t encoding;

    // 集合包含的元素数量
    uint32_t length;

    // 保存元素的数组
    int8_t contents[];

} intset;
</code></pre><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol>
<li>元素类型只能是数字</li>
<li>元素有三种类型：int16_t,int32_t,int64_t</li>
<li>元素有序，不能重复</li>
<li>inset和sds一样，内存连续，就像数组一样</li>
<li>intset不提供降级操作，一旦对编码进行了升级，编码就会一直保持升级后的状态</li>
</ol>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol>
<li>主要用于集合(set)的底层实现之一</li>
<li>当集合元素不大于设定值并且元素都是整数时</li>
</ol>
<h1 id="编码方式的获取"><a href="#编码方式的获取" class="headerlink" title="编码方式的获取"></a>编码方式的获取</h1><ol>
<li>这个函数试试判断传入的数据应该用什么数据类型进行存储</li>
<li>需要注意一点的是INT32_MIN是负值的最小值（-2147483648）<br> static uint8_t _intsetValueEncoding(int64_t v) {<pre><code>if (v &lt; INT32_MIN || v &gt; INT32_MAX) {
    return INTSET_ENC_INT64;
}
else if (v &lt; INT16_MIN || v &gt; INT16_MAX) {
    return INTSET_ENC_INT32;
}
else {
    return INTSET_ENC_INT16;
}
</code></pre> }</li>
</ol>
<h1 id="大小端模式"><a href="#大小端模式" class="headerlink" title="大小端模式"></a>大小端模式</h1><ol>
<li>大端模式，是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放</li>
<li>小端模式，是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致<br><img src="/img/redis/duan.png" alt="Alt text" title="大小端模式"></li>
</ol>
<h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><ol>
<li>还是老一套，判断encode，修改值；修改length值，添加到content中</li>
<li>如果需要添加的值存在的话不会再进行添加</li>
</ol>
<pre><code>intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {
    //printf(&quot;---------\n&quot;);
    //printf(&quot;start\n&quot;);
    // 计算编码 value 所需的长度
    uint8_t valenc = _intsetValueEncoding(value);
    uint32_t pos;
    // 默认设置插入为成功
    if (success) {
        *success = 1;
    }

    /* Upgrade encoding if necessary. If we need to upgrade, we know that
     * this value should be either appended (if &gt; 0) or prepended (if &lt; 0),
     * because it lies outside the range of existing values. */
    // 如果 value 的编码比整数集合现在的编码要大
    // 那么表示 value 必然可以添加到整数集合中
    // 并且整数集合需要对自身进行升级，才能满足 value 所需的编码
    if (valenc &gt; intrev32ifbe(is-&gt;encoding)) {
        //printf(&quot;大于\n&quot;);
        /* This always succeeds, so we don&apos;t need to curry *success. */
        // T = O(N)
        return intsetUpgradeAndAdd(is, value);
    } else {
        //printf(&quot;小于\n&quot;);
        // 运行到这里，表示整数集合现有的编码方式适用于 value

        /* Abort if the value is already present in the set.
         * This call will populate &quot;pos&quot; with the right position to insert
         * the value when it cannot be found. */
        // 在整数集合中查找 value ，看他是否存在：
        // - 如果存在，那么将 *success 设置为 0 ，并返回未经改动的整数集合
        // - 如果不存在，那么可以插入 value 的位置将被保存到 pos 指针中
        //   等待后续程序使用
        if (intsetSearch(is, value, &amp;pos)) {
            //printf(&quot;存在\n&quot;);
            if (success) {
                *success = 0;
            }
            return is;
        }

        //printf(&quot;不存在，search后的pos值：%d\n&quot;, pos);

        // 运行到这里，表示 value 不存在于集合中
        // 程序需要将 value 添加到整数集合中

        // 为 value 在集合中分配空间
        is = intsetResize(is, intrev32ifbe(is-&gt;length) + 1);
        // 如果新元素不是被添加到底层数组的末尾
        // 那么需要对现有元素的数据进行移动，空出 pos 上的位置，用于设置新值
        // 举个例子
        // 如果数组为：
        // | x | y | z | ? |
        //     |&lt;-----&gt;|
        // 而新元素 n 的 pos 为 1 ，那么数组将移动 y 和 z 两个元素
        // | x | y | y | z |
        //         |&lt;-----&gt;|
        // 这样就可以将新元素设置到 pos 上了：
        // | x | n | y | z |
        // T = O(N)
        //printf(&quot;pos:%d\n&quot;, pos);
        //printf(&quot;is-&gt;length:%d\n&quot;, intrev32ifbe(is-&gt;length));
        if (pos &lt; intrev32ifbe(is-&gt;length)) {
            //printf(&quot;pos&lt;length\n&quot;);
            intsetMoveTail(is, pos, pos + 1);
        }
    }

    // 将新值设置到底层数组的指定位置中
    _intsetSet(is, pos, value);
    //printf(&quot;value:%lld\n&quot;, value);

    // 增加集合元素数量的计数器
    is-&gt;length = intrev32ifbe(intrev32ifbe(is-&gt;length) + 1);

    // 返回添加新元素后的整数集合
    return is;

    /* p.s. 上面的代码可以重构成以下更简单的形式：

    if (valenc &gt; intrev32ifbe(is-&gt;encoding)) {
        return intsetUpgradeAndAdd(is,value);
    }

    if (intsetSearch(is,value,&amp;pos)) {
        if (success) *success = 0;
        return is;
    } else {
        is = intsetResize(is,intrev32ifbe(is-&gt;length)+1);
        if (pos &lt; intrev32ifbe(is-&gt;length)) intsetMoveTail(is,pos,pos+1);
        _intsetSet(is,pos,value);

        is-&gt;length = intrev32ifbe(intrev32ifbe(is-&gt;length)+1);
        return is;
    }
    */
}
</code></pre><h1 id="搜索元素"><a href="#搜索元素" class="headerlink" title="搜索元素"></a>搜索元素</h1><ol>
<li>主要看看二分排序法</li>
<li>如果该值不存在，会把该值的前一个元素的pos返回回来（比如要查找8，但是intset结构中只存在6这个元素，就会把6所在的pos返回）</li>
</ol>
<pre><code>static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {
    int min = 0, max = intrev32ifbe(is-&gt;length) - 1, mid = -1;
    int64_t cur = -1;

    /* The value can never be found when the set is empty */
    // 处理 is 为空时的情况
    if (intrev32ifbe(is-&gt;length) == 0) {
        if (pos) {
            *pos = 0;
        }
        printf(&quot;不存在,pos为：%d\n&quot;, *pos);
        return 0;
    } else {
        /* Check for the case where we know we cannot find the value,
         * but do know the insert position. */
        // 因为底层数组是有序的，如果 value 比数组中最后一个值都要大
        // 那么 value 肯定不存在于集合中，
        // 并且应该将 value 添加到底层数组的最末端
        if (value &gt; _intsetGet(is, intrev32ifbe(is-&gt;length) - 1)) {
            if (pos) {
                *pos = intrev32ifbe(is-&gt;length);//返回最末端的pos
            }
            printf(&quot;最大值,pos为：%d\n&quot;, *pos);
            return 0;
        // 因为底层数组是有序的，如果 value 比数组中最前一个值都要小
        // 那么 value 肯定不存在于集合中，
        // 并且应该将它添加到底层数组的最前端
        } else if (value &lt; _intsetGet(is,0)) {
            if (pos) {
                *pos = 0;
            }
            printf(&quot;最小值,pos为：%d\n&quot;, *pos);
            return 0;
        }
    }

    // 在有序数组中进行二分查找
    // T = O(log N)
    while(max &gt;= min) {
        mid = (min+max) / 2;
        cur = _intsetGet(is, mid);
        if (value &gt; cur) {
            min = mid + 1;
        } else if (value &lt; cur) {
            max = mid - 1;
        } else {
            break;
        }
    }

    // 检查是否已经找到了 value
    if (value == cur) {
        if (pos) {
            *pos = mid;
        }
        return 1;
    } else {
        if (pos) {//返回前面的节点
            *pos = min;
        }
        return 0;
    }
}
</code></pre><h1 id="编码升级"><a href="#编码升级" class="headerlink" title="编码升级"></a>编码升级</h1><ol>
<li>此处传入的value都是超过当前编码的值</li>
<li>需要考虑更新编码可能当前value在首部（负值的时候）也可能在尾部</li>
</ol>
<pre><code>static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {

    // 当前的编码方式
    uint8_t curenc = intrev32ifbe(is-&gt;encoding);

    // 新值所需的编码方式
    uint8_t newenc = _intsetValueEncoding(value);

    // 当前集合的元素数量
    int length = intrev32ifbe(is-&gt;length);

    // 根据 value 的值，决定是将它添加到底层数组的最前端还是最后端
    // 注意，因为 value 的编码比集合原有的其他元素的编码都要大
    // 所以 value 要么大于集合中的所有元素，要么小于集合中的所有元素
    // 因此，value 只能添加到底层数组的最前端或最后端
    // 此处需要考虑负数的情况，比如说现在是INTSET_ENC_INT16的编码方式，其范围为：-32768~32767，那么只有当value值大于32767的时候，或者小于-32768的时候才会进行扩容，因此，如果为负数就在最前端，为正数就在最后端
    int prepend = value &lt; 0 ? 1 : 0;

    /* First set new encoding and resize */
    // 更新集合的编码方式
    is-&gt;encoding = intrev32ifbe(newenc);
    // 根据新编码对集合（的底层数组）进行空间调整
    // T = O(N)
    is = intsetResize(is, intrev32ifbe(is-&gt;length) + 1);

    /* Upgrade back-to-front so we don&apos;t overwrite values.
     * Note that the &quot;prepend&quot; variable is used to make sure we have an empty
     * space at either the beginning or the end of the intset. */
    // 根据集合原来的编码方式，从底层数组中取出集合元素
    // 然后再将元素以新编码的方式添加到集合中
    // 当完成了这个步骤之后，集合中所有原有的元素就完成了从旧编码到新编码的转换
    // 因为新分配的空间都放在数组的后端，所以程序先从后端向前端移动元素
    // 举个例子，假设原来有 curenc 编码的三个元素，它们在数组中排列如下：
    // | x | y | z | 
    // 当程序对数组进行重分配之后，数组就被扩容了（符号 ？ 表示未使用的内存）：
    // | x | y | z | ? |   ?   |   ?   |
    // 这时程序从数组后端开始，重新插入元素：
    // | x | y | z | ? |   z   |   ?   |
    // | x | y |   y   |   z   |   ?   |
    // |   x   |   y   |   z   |   ?   |
    // 最后，程序可以将新元素添加到最后 ？ 号标示的位置中：
    // |   x   |   y   |   z   |  new  |
    // 上面演示的是新元素比原来的所有元素都大的情况，也即是 prepend == 0
    // 当新元素比原来的所有元素都小时（prepend == 1），调整的过程如下：
    // | x | y | z | ? |   ?   |   ?   |
    // | x | y | z | ? |   ?   |   z   |
    // | x | y | z | ? |   y   |   z   |
    // | x | y |   x   |   y   |   z   |
    // 当添加新值时，原本的 | x | y | 的数据将被新值代替
    // |  new  |   x   |   y   |   z   |
    // T = O(N)
    while(length--) {//这里是从高位开始一个个向后移动，如果低位开始移动会存在覆盖问题
        _intsetSet(is, length + prepend, _intsetGetEncoded(is, length, curenc));
    }

    /* Set the value at the beginning or the end. */
    // 设置新值，根据 prepend 的值来决定是添加到数组头还是数组尾
    if (prepend) {
        _intsetSet(is, 0, value);
    }
    else {
        _intsetSet(is, intrev32ifbe(is-&gt;length), value);
    }

    // 更新整数集合的元素数量
    is-&gt;length = intrev32ifbe(intrev32ifbe(is-&gt;length) + 1);

    return is;
}    
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="intset数据结构"><a href="#intset数据结构" class="headerlink" title="intset数据结构"></a>intset数据结构</h1><pre><code>typedef struct intset {

    /]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis长连接与短连接]]></title>
    <link href="http://www.cxyteam.com/2018/02/05/redis%E9%95%BF%E8%BF%9E%E6%8E%A5%E4%B8%8E%E7%9F%AD%E8%BF%9E%E6%8E%A5/"/>
    <id>http://www.cxyteam.com/2018/02/05/redis长连接与短连接/</id>
    <published>2018-02-05T09:07:20.000Z</published>
    <updated>2018-02-05T11:16:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h1><ol>
<li>定义：在同一个进程下进行多次命令发送，只需要发起一次连接请求</li>
<li>优势：减少连接redis的次数，从而减少命令执行的时间，减少系统开销</li>
<li>劣势：<ol>
<li>如果该连接一直不产生活动，容易出现time_out错误</li>
<li>长期占用一个redis连接</li>
<li>高并发场景请求被串行（redis是单进程模式，例如一个php-fpm进程能处理多个请求，而redis需要一个个进行处理）</li>
</ol>
</li>
</ol>
<h1 id="短连接"><a href="#短连接" class="headerlink" title="短连接"></a>短连接</h1><ol>
<li>定义：每次发起命令都需要进行一次连接，命令执行完之后，释放连接</li>
<li><p>优势：及时释放连接，不占用redis连接数</p>
</li>
<li><p>劣势：每个命令执行都需要进行一次连接，延长命令执行时间，连接释放等操作需要占用内存，开销比较大</p>
</li>
</ol>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ol>
<li>长连接主要用于少数客户端与服务端的频繁通信，因为这时候如果用短连接频繁通信常会发生Socket出错，并且频繁创建Socket连接也是对资源的浪费</li>
<li>太多持久连接，大部分是sleep状态的，或者系统是高并发的，使用短连接更合适</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h1><ol>
<li>定义：在同一个进程下进行多次命令发送，只需要发起一次连接请求</li>
<li>优势：减少连接redis的次数，从而减少]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis-hyperloglog源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/02/03/redis-hyperloglog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/02/03/redis-hyperloglog源码阅读/</id>
    <published>2018-02-03T09:43:59.000Z</published>
    <updated>2018-02-03T10:18:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="hyperloglog结构"><a href="#hyperloglog结构" class="headerlink" title="hyperloglog结构"></a>hyperloglog结构</h1><pre><code>struct hllhdr {
    char magic[4];      // 固定‘HYLL’，用于标识hyperloglog键
    uint8_t encoding;   // 编码模式，有密集标识Dence和稀疏模式sparse
    uint8_t notused[3]; // 未使用字段，留着日后用
    uint8_t card[8];    // 基数缓存，存储上一次计算的基数
    uint8_t registers[]; // 桶个数，用来存放数据，Redis中大小为16384
};
</code></pre><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol>
<li>一般用于做基数统计，比如说，一个网站的独立ip的访问次数</li>
<li>传统的做法可能会存储下访问的ip，然后进行统计，这样的话，随着ip数目的增加，存储的空间越大，统计的延时越长</li>
<li>每个Hyperloglog键只需要12Kb的大小就能计算接近2^64个不同元素的基数，但是hyperloglog只会根据输入元素来计算基数，而不会存储元素本身，所以不能像集合那样返回各个元素本身</li>
</ol>
<h1 id="感觉"><a href="#感觉" class="headerlink" title="感觉"></a>感觉</h1><ol>
<li>直观感觉就是将数据做了hash运算，存储hash后的值（可能还有别的处理），然后进行统计，不存储原始数据</li>
</ol>
<h1 id="果断看不懂，全是算法，放弃"><a href="#果断看不懂，全是算法，放弃" class="headerlink" title="果断看不懂，全是算法，放弃"></a>果断看不懂，全是算法，放弃</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="hyperloglog结构"><a href="#hyperloglog结构" class="headerlink" title="hyperloglog结构"></a>hyperloglog结构</h1><pre><code>struct hllhdr {
  ]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2017年个人总结]]></title>
    <link href="http://www.cxyteam.com/2018/02/03/2017%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://www.cxyteam.com/2018/02/03/2017年个人总结/</id>
    <published>2018-02-03T07:07:06.000Z</published>
    <updated>2018-04-27T04:29:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li><p>技术<br>a. 对自己的技能进行了梳理，整理了一些串联的知识点<br>b. 学习docker并在工作中应用<br>c. 学习redis的源码<br>d. 了解Golang(没有应用起来)<br>e. 以后对于不应用的知识不去花太多时间去了解细节，做到了解就好了，不管了解到什么地步，只要不应用起来结果都是一样</p>
</li>
<li><p>管理<br>a. 负责php小组的事宜，招人，培训，提升，氛围打造都有过思考<br>b. 项目管理方面涉及较少（单个项目组成员较少，基本不需要额外的工作）</p>
</li>
<li><p>产品<br>a. 开发第一个自己的产品（从需求调研到上线都自己完成）<br>b. 进入业务一线，接触客户，了解原始需求</p>
</li>
<li><p>思维<br>a. 阅读了一些书籍，一些学习方法，做事方法慢慢的被关注到，并且实践其中的部分，未能坚持锻炼这些方法，以及总结对比整理出适合自己的方法<br>b. 能有初级的独立思考能力，还不是很深入，完善<br>c. 比较满意的一点：随时记录下来自己的思考，并试图划分事情的视角，从几个方向进行切入思考</p>
</li>
<li><p>投资<br>a. 制定了资产配置<br>b. 开销的预估不是很准确<br>c. 开始做定投股指及基金<br>d. 开始买股票<br>e. 年末才开始了解BTC，有点晚，之前一直都选择忽视，以后对于热点的东西都要及时跟进了解，哪怕就是不看好的，热点的东西必然有其学习的点<br>f. 虽然进行了基金，股票等投资但是专业知识还是很欠缺<br>g. 尚未进行保险购买</p>
</li>
<li><p>生活<br>a. 饮食方面控制的不错<br>b. 运动方面比较欠缺<br>c. 减肥这个事情看样子不是下决心这么简单<br>d. 重点关注运动健身方面，年纪越来越大，每天坐十多个小时身体还是扛不住的<br>e. 开始学习摄影，慢慢点培养点小爱好吧</p>
</li>
</ol>
<h1 id="业务时间轴"><a href="#业务时间轴" class="headerlink" title="业务时间轴"></a>业务时间轴</h1><ol>
<li><p>2月初-3月底<br> a. 基于钉钉的CRM系统收尾</p>
<blockquote>
<p>基于钉钉开发的一个客户管理系统，和订单进行了关联</p>
</blockquote>
<p> b. 跑市场，参与销售的总结会议，了解业务，挖掘需求</p>
</li>
</ol>
<ol>
<li><p>4月初-5月底<br> a. 一融通</p>
<blockquote>
<p><a href="http://www.cxyteam/2017/04/26/%E4%B8%80%E4%B8%AA%E4%BA%A7%E5%93%81%E7%9A%84%E8%AF%9E%E7%94%9F/" target="_blank" rel="external">产品介绍</a></p>
</blockquote>
<p> b. 宅急融，金银屋</p>
<blockquote>
<p>商务用于针对超市等场所进行地推的工具</p>
</blockquote>
</li>
<li><p>6月初-8月底<br> a. 贷款问答小程序<br> b. 产品宝典<br> c. 金银屋官网<br> d. 贷款评估</p>
<blockquote>
<p>这几个产品涵盖一个用户的转换路径，从web端浏览到微信端最终留下联系方式，针对几种类型的目标用户制定的产品，全程参与产品需求，讨论过程，理论基础是《用户体验要素》</p>
</blockquote>
</li>
<li><p>8月初-11月底<br> a. 钱隆归来</p>
<blockquote>
<p>一款p2p理财产品，算是一个老的产品重启了，基础的逻辑没有修改，把对外对接的一些需求进行了更改，接入了新浪支付，以及做了部分附加的功能</p>
</blockquote>
</li>
<li><p>11月初-11月底<br> a. 教育贷</p>
<blockquote>
<p>之前这个项目叫&lt;贷贷熊&gt;，在北京教育分期市场领域是第一，也是一个旧的项目重启，搭建到新的技术架构上面，整理了之前的需求，流程，最终形成文档</p>
</blockquote>
</li>
<li><p>11月底-2月<br> a. 加入360</p>
<p> b. 种草</p>
<blockquote>
<p>千万级流量的产品，内容型产品</p>
</blockquote>
<p> c. 模块化</p>
<blockquote>
<p>基础支持吧，可以认为是千人千面的实现，不过强大之处不在这里，具体之处好像不太合适说</p>
</blockquote>
<p> b. 百万赢家</p>
<blockquote>
<p>今年年底的一个热点，百万级别的并发，有幸加入这个项目组进行支援，还是学习到不少东西的</p>
</blockquote>
</li>
</ol>
<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>读的书籍数量增加了</li>
<li>不仅仅局限在技术层面，内容变得宽泛</li>
<li>抛弃了碎片阅读，在公众号消耗的时间减少了</li>
<li>还是没能掌握方法，看完之后都不能总结这本书说了什么</li>
<li>读书笔记还是没做</li>
<li>读完一本书需要做读书笔记，哪怕是一句话总结也行</li>
</ol>
<h3 id="2017年读书单"><a href="#2017年读书单" class="headerlink" title="2017年读书单"></a>2017年读书单</h3><ol>
<li><a href="https://book.douban.com/subject/26400900/" target="_blank" rel="external">创京东</a></li>
<li><a href="https://book.douban.com/subject/1013208/" target="_blank" rel="external">如何阅读一本书</a></li>
<li><a href="https://www.gitbook.com/download/pdf/book/xiaolai/reborn" target="_blank" rel="external">新生-七年就是一辈子</a></li>
<li><a href="https://book.douban.com/subject/27173866/" target="_blank" rel="external">颠覆者</a></li>
<li><a href="https://book.douban.com/subject/27204860/" target="_blank" rel="external">指数基金投资指南</a></li>
<li><a href="https://book.douban.com/subject/25783654/" target="_blank" rel="external">如何高效学习</a> </li>
<li><a href="https://book.douban.com/subject/6523997/" target="_blank" rel="external">用户体验要素</a></li>
<li><a href="https://book.douban.com/subject/5914587/" target="_blank" rel="external">启示录</a></li>
<li><a href="https://book.douban.com/subject/20036150/" target="_blank" rel="external">principles</a></li>
<li><a href="https://book.douban.com/subject/2345548/" target="_blank" rel="external">学习之道</a></li>
<li><a href="https://book.douban.com/subject/24737674/" target="_blank" rel="external">图解tcp/ip</a></li>
<li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="external">图解http</a></li>
<li><a href="https://book.douban.com/subject/26285268/" target="_blank" rel="external">第一本docker书</a></li>
<li><a href="https://book.douban.com/subject/25940548/" target="_blank" rel="external">阅读整理学</a></li>
<li><a href="https://book.douban.com/subject/3225979/" target="_blank" rel="external">一课经济学</a></li>
<li><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="external">redis设计与实现</a></li>
<li><a href="https://book.douban.com/subject/20492550/" target="_blank" rel="external">清醒思考的艺术</a></li>
<li><a href="https://book.douban.com/subject/25749845/" target="_blank" rel="external">把时间当作朋友</a></li>
</ol>
<h3 id="2018年计划书单"><a href="#2018年计划书单" class="headerlink" title="2018年计划书单"></a>2018年计划书单</h3><ol>
<li><a href="https://www.amazon.cn/dp/B01ESWMJOK" target="_blank" rel="external">第一次买保险就买对</a></li>
<li><p><a href="https://www.zhihu.com/question/22316395/answer/100909780" target="_blank" rel="external">如何用保险保障自己的一生</a><br> 以上两本都是保险方面的科普知识，总的来说我留下几个点：1、买消费型保险，不买分红型保险，买定期保险，不买终身保险 2、家庭经济支柱着重保障，整个保险支出不超过家庭收入的5% 3、为父母购置意外险，尤其注意保险须知 4、为家人选意外险，医疗险，定期寿险，重疾险 5、保险公司几乎不存在无法理赔的情况，不管是倒闭还是其他情况，国家在这方面做了很多事情，因此不要因为保险公司的大小去选择一款保险，当然要注意区分哪些是销售渠道 6、早买保险比晚买保险要划算，最好在30岁之前，30岁是个坎</p>
</li>
<li><p><a href="https://book.douban.com/subject/6798611/" target="_blank" rel="external">乔布斯传</a><br> 主要是描述了乔布斯的一生，从经历及出生来还原乔布斯的性格，及为人处事方式，以及面对挫折的态度；做产品要排除任何因素做到极简，注重细节，哪怕是内部的布线；擅于听取意见（虽然很专制），只要能说服我，那就听你的；敢做，不被常理束缚只要是认为对的，就坚持做下去；从小发觉并培养爱好<br> 对于这类书籍不是太懂怎么读，更多的都是在描述一个成功人士的这一生，看他们处理事情的方式，应对危机的反应，有些事情没经历过还是很难有共鸣，希望更多的去学习人家的处事方式，以及学习其失败经验</p>
</li>
<li><p><a href="https://book.douban.com/subject/26897464/" target="_blank" rel="external">小岛经济学</a><br> 通过一个小岛的发展，描述了一个国家经济从无到有，由盛转衰的过程，前面一大截还是很容易懂，到后面看有点吃力，对经济感兴趣的，强烈推荐这本书，不是讲生硬的经济学原理，而是通过生活的例子来叙述，里面讲述的金融的发展，通货膨胀及房地产泡沫还是很有意思的</p>
</li>
<li><p><a href="https://book.douban.com/subject/24754537/" target="_blank" rel="external">简单的逻辑学</a><br> 讲的是一些基本的逻辑问题，前面一部分在说逻辑的一些基本的概念，后面是在拿实际例子在说明，看起来有点枯燥，留在脑海中的东西不多，唯一印象深刻一点的是以后说话需要遵循逻辑，事实，不能去夸大，缩小。这类型的书籍还是得掌握看书的方法</p>
</li>
<li><p><a href="https://book.douban.com/subject/3000997/" target="_blank" rel="external">牛奶可乐经济学</a><br> 超级好的一本能够培养对经济感兴趣的书籍，没有枯燥的理论，都是实际的生活现象解释，通俗易懂，让人看了能够对生活现象恍然大悟，强烈推荐</p>
</li>
<li><p><a href="https://book.douban.com/subject/1095634/" target="_blank" rel="external">小狗钱钱</a><br> 理财的入门书籍，讲述的都是一些很简单的知识，能够引导人形成理财的思维，是以童话的形式描述主人公一步步实现财务自由，同时灌输的一些理财知识，很适合用于小孩做财商的启蒙</p>
</li>
<li><p><a href="https://book.douban.com/subject/26541801/" target="_blank" rel="external">增长黑客</a><br> 推荐看，本书主要从获取用户，提高留存，激发活跃，增加收入，加大传播等多个方面介绍增长的一些方法，衡量指标，里面有丰富的案例信息，更多的我是带着一种运营的眼光去看的，还是能提供很多思路，增长见识</p>
</li>
<li><p><a href="https://book.douban.com/subject/6519055/" target="_blank" rel="external">买基金为自己加薪</a><br> 适合打算投资基金和基金的投资新手，主要在说为什么要买，如何买，如何去执行定投等购买策略有什么好处，算是介绍的比较全面了，对我来说比较有用的是基本面和技术面的这两节</p>
</li>
<li><p>思考，快与慢</p>
</li>
<li>决策与判断</li>
<li>软能力</li>
<li>腾讯传</li>
<li>硅谷钢铁侠</li>
<li>富爸爸穷爸爸</li>
<li>有钱人想的和你不一样</li>
<li>经济学通识</li>
<li>魔鬼经济学</li>
<li>七天读懂宏观经济</li>
<li>百万富翁快车道</li>
<li>人人都爱经济学</li>
<li>邻家的百万富翁</li>
<li>经济解释</li>
<li>蜡烛图</li>
<li>谷歌和亚马逊如何做产品</li>
<li>运营有道：重新定义互联网运营</li>
<li>银行行长不轻易说的理财经</li>
<li>一个经济杀手的自白</li>
<li>Redis开发与运维</li>
<li>王二的经济学故事</li>
<li>经济学</li>
<li>一沙一世界</li>
<li>冰与火，中国股市记忆</li>
<li>小狗钱钱的爸爸教你实现财务自由</li>
<li>解读基金-我的投资观与实践</li>
</ol>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ol>
<li>锻炼身体</li>
<li>写读书笔记</li>
<li>实践学习方法并整理总结合适自己的</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li><p>技术<br>a. 对自己的技能进行了梳理，整理了一些串联的知识点<br>b. 学习docker并在工作中应用<br]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[百万级项目用到的缓存]]></title>
    <link href="http://www.cxyteam.com/2018/02/02/%E7%99%BE%E4%B8%87%E7%BA%A7%E9%A1%B9%E7%9B%AE%E7%94%A8%E5%88%B0%E7%9A%84%E7%BC%93%E5%AD%98/"/>
    <id>http://www.cxyteam.com/2018/02/02/百万级项目用到的缓存/</id>
    <published>2018-02-02T07:19:26.000Z</published>
    <updated>2018-02-03T07:06:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>  有幸参加到百万并发的项目中来，第一件事情当然是翻看并发的接口是如何编写的,下面是伪代码(场景也是造的)</p>
<pre><code>class user {
    static $user;

    function getUserInfo($uid) {
        if (self::$user) {
            return self::$user[$uid];
        }

        if ($info = Apc::get($uid)) {
            self::$user[$uid] = $info;
            return $info;
        }

        if ($info = Redis::get($uid)) {
            self::$user[$uid] = $info;
            Apc::set($uid) = $info;
            return $info;
        }

        if ($info = Mysql::get($uid)) {
            self::$user[$uid] = $info;
            Apc::set($uid) = $info;
            Redis::set($uid) = $info                
            return $info;
        }

        return array();
    } 
}   
</code></pre><p>  其实主要是用到了三级缓存，静态变量做了进程内缓存，Apc做了进程间缓存，Redis做了content cache，下面来简单的介绍一下      </p>
<h1 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h1><ol>
<li><p>简介<br>在本次进程中进行内存共享</p>
</li>
<li><p>优势<br>快速释放，不需要复杂的回收，删除机制<br>同进行中共享一份数据</p>
</li>
<li><p>应用场景<br>在一次访问中频繁访问的数据可以进行缓存，比如说：单例模式，在一个进程中，需要访问同一个对象，会进行多次实例化，使用静态变量对对象进行存储，只有第一次访问的时候进行实例化</p>
</li>
</ol>
<h1 id="apc"><a href="#apc" class="headerlink" title="apc"></a>apc</h1><ol>
<li><p>简介<br>系统数据缓存：把php文件源码编译后的结果缓存在共享内存中使用，优化php的执行过程，避免从磁盘读取代码再编译的流程<br>用户数据缓存（当然主要指这一块）：将数据存储在共享内存中，可以多个php-fpm进程共享</p>
</li>
<li><p>优势<br>在本地机器中的缓存中，和redis等相比不存在网络消耗<br>和进程间缓存相比，可以多个进程公用一个缓存数据<br>数据存储在内存中，读取速度更快</p>
</li>
<li><p>应用场景<br>存储共用的数据，不要存储较个性化的数据（举例说：如果是一个集群机器，存储用户A的个人信息，A的访问是随机的打到集群的任意一台机器的，而当请求打到新的机器上又要进行一次缓存的读写，不仅浪费内存还要做更复杂的操作）</p>
</li>
</ol>
<h1 id="yac"><a href="#yac" class="headerlink" title="yac"></a>yac</h1><ol>
<li>类似于apc缓存，具体解决了什么问题，请看作者的文章介绍<blockquote>
<p><a href="http://www.laruence.com/2013/03/18/2846.html" target="_blank" rel="external">http://www.laruence.com/2013/03/18/2846.html</a></p>
</blockquote>
</li>
</ol>
<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><ol>
<li><p>简介<br>不想介绍了</p>
</li>
<li><p>优势<br> contentcache，可以多机共享，但是会有网络的消耗<br> 可以提供给多种语言访问（不限于php）</p>
</li>
<li><p>应用场景<br>主要用来应对高并发场景，数据存储在内存中响应速度较快</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>  有幸参加到百万并发的项目中来，第一件事情当然是翻看并发的接口是如何编写的,下面是伪代码(场景也是造的)</p>
<pre><code>c]]>
    </summary>
    
      <category term="PHP" scheme="http://www.cxyteam.com/tags/PHP/"/>
    
      <category term="PHP" scheme="http://www.cxyteam.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何快速的上手一个项目]]></title>
    <link href="http://www.cxyteam.com/2018/01/24/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%9A%84%E4%B8%8A%E6%89%8B%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://www.cxyteam.com/2018/01/24/如何快速的上手一个项目/</id>
    <published>2018-01-24T06:51:53.000Z</published>
    <updated>2018-01-25T15:27:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol>
<li><p>安装的软件（lnmp各种依赖的库）<br> 清楚安装了什么软件，用到了什么拓展，如何运行环境，做到在本地搭建环境</p>
</li>
<li><p>nginx，php-fpm配置文件，及日志目录<br> 了解nginx配置，确保知道项目路径，入口文件，错误日志位置，当发现问题的时候能快速的定位到是环境出了问题，还是代码出了问题</p>
</li>
</ol>
<h1 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h1><ol>
<li><p>nginx，php-fpm，应用等的转发流程<br> 快速定位到异常的位置，配置文件等</p>
</li>
<li><p>框架路由<br> 了解代码对应的路径，最简单的是控制器，模型，视图的对应关系<br> 了解项目目录，大致了解代码所在位置</p>
</li>
</ol>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><ol>
<li><p>nginx，php-fpm，应用日志位置<br> 通过日志快速定位</p>
</li>
<li><p>记录日志方式（一般项目都有固定的写日志的方法）<br> 能够记录日志，便于事后查看异常，或做应用报警</p>
</li>
</ol>
<h1 id="存储操作"><a href="#存储操作" class="headerlink" title="存储操作"></a>存储操作</h1><ol>
<li>mysql，redis等的连接及操作，配置文件位置<br> 数据操作这块，curd最基本的要求，以及了解服务的配置（服务器，用户，密码，端口）</li>
</ol>
<h1 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h1><ol>
<li><p>了解具体的业务在做什么<br> 只有了解了想要做什么，才能更快的理解代码，千万不要试图看代码去理解业务逻辑</p>
</li>
<li><p>操作一遍系统（大概猜测会有哪些接口，提供什么功能）<br> 清楚接口被如何使用</p>
</li>
<li><p>过一遍代码接口（知道已经提供哪些能力）<br> 大致的看一下文件名称，控制器名称，有接口文档更好，直接看接口文档，如果函数名称就是abcd类似的话，老实看代码吧，谁也救不了你</p>
</li>
<li><p>根据业务来看一个接口的代码（最好具有代表性）<br> 找一个比较核心的业务逻辑，跟着代码走一遍，看看如何实现（不要揪太细的点）<br> 熟悉代码风格<br> 代码目录<br> 及存储操作，异常，日志，类库等的使用</p>
</li>
</ol>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ol>
<li>动手去修改或者去写一些简单的需求（不要去细看代码了，遇到什么坑再去看旧代码）<br> 只有动手才知道哪不懂</li>
</ol>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li><p>最好抽时间把用到的框架做个了解，如果是用到了很多类库，也去把类库熟悉熟悉（看看使用示例就好了）<br> 熟悉已用到的技术，避免重复造轮子<br> 更好的理解设计意图，和代码作者达到一定的默契<br> 优化项目</p>
</li>
<li><p>把问题较多的，比较核心的代码过一遍（根据需求）<br> 做到心中有数，毕竟谁也不想当救火员，线上出问题，压力还是很大的</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol>
<li><p>安装的软件（lnmp各种依赖的库）<br> 清楚安装了什么软件，用到了什么拓展，如何运行环境，做到在本地搭]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis-zskiplist源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/01/16/redis-zskiplist%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/01/16/redis-zskiplist源码阅读/</id>
    <published>2018-01-15T16:57:45.000Z</published>
    <updated>2018-02-03T08:43:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="zskiplist结构"><a href="#zskiplist结构" class="headerlink" title="zskiplist结构"></a>zskiplist结构</h1><pre><code>/*
 * 跳跃表
 */
typedef struct zskiplist {

    // 表头节点和表尾节点
    struct zskiplistNode *header, *tail;

    // 表中节点的数量
    unsigned long length;

    // 表中层数最大的节点的层数
    int level;

} zskiplist;

/*
 * 跳跃表节点
 */
typedef struct zskiplistNode {

    // 成员对象
    robj *obj;

    // 分值
    double score;

    // 后退指针
    struct zskiplistNode *backward;

    // 层 , 柔性数组
    struct zskiplistLevel {

        // 前进指针
        struct zskiplistNode *forward;

        // 跨度
        unsigned int span;

    } level[];

} zskiplistNode;
</code></pre><p><img src="/img/redis/redis_skiplist.png" alt="Alt text" title="skiplist"></p>
<h1 id="什么是span-forward-score-rank"><a href="#什么是span-forward-score-rank" class="headerlink" title="什么是span,forward,score,rank"></a>什么是span,forward,score,rank</h1><ol>
<li>span是指同一层的当前节点到下一个节点相隔的节点数，比如说，在L3这一层上，header的span为2，因为他在L3的下一个节点是node2</li>
<li>forward指的是同一层上，当前节点指向下一个节点的指针</li>
<li>score就是设置的一个分值，用来做排序的</li>
<li>rank是指当前节点到头节点的节点数目，比如说L3的node2的rank值为2</li>
</ol>
<p><img src="/img/redis/skiplist.png" alt="Alt text" title="skiplist"></p>
<h1 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h1><ol>
<li>判断随机的lever是否比目前的最大lever要大，如果大，需要先将大于最大的level的部分进行初始化</li>
<li>寻找到同一层当前节点的score比插入节点的score小，下一个节点的score比插入score大的节点</li>
<li>将节点的forward指针替换</li>
<li>计算span值（这个很有意思）</li>
<li><p>span计算核心代码及事例（如下）</p>
<p> 如下图：假设zskiplist的节点已经存在：-1，5，11，30，68，99，现在插入20这个节点，计算他的span的过程</p>
<ol>
<li>目前的zsl-&gt;lever为3，当前的x节点是header，在一个for循环中，由于i=zsl-&gt;lever-1,故rank[2]=0</li>
<li>由于x的下一个节点的score是-1，小于即将插入的score为20这个值，故：rank[i] += x-&gt;level[i].span；rank[2]=1;x-&gt;level[2].span=1（level3上x也就是header节点的下一个节点（score为-1的节点）的距离为1）,x节点替换成score为-1所在的节点</li>
<li>由于当前的i为1不等于zsl-&gt;lever-1=2,故rank[1]=rank[2]=1</li>
<li>x的下一个节点的score是11，小于即将插入的score为20的这个值，故：rank[i] += x-&gt;level[i].span;rank[1]为3;即：x-&gt;lever[1].span+rank[1]; x-&gt;lever[1].span=2（score为-1的节点到score为11的节点的距离为2）；rank[1]=1;x节点替换为score为11的节点</li>
<li>同理可得，rank[0]=3;</li>
<li>截止到此处，rank数组已经获取到了：rank[0]=3;rank[1]=3;rank[2]=1;</li>
<li>接下来对于score为20的节点的span的计算与它的前一个节点的计算就看下面两行代码：</li>
<li>x-&gt;level[i].span = update[i]-&gt;level[i].span - (rank[0] - rank[i]);</li>
<li>update[i]-&gt;level[i].span = (rank[0] - rank[i]) + 1;</li>
</ol>
</li>
</ol>
<pre><code>for (i = zsl-&gt;level - 1; i &gt;= 0; i--) {//按层遍历，最高层开始遍历，最底层遍历的话要走过每一个节点，跳跃表就没有任何意义了

        /* store rank that is crossed to reach the insert position */
        // 如果 i 不是 zsl-&gt;level-1 层
        // 那么 i 层的起始 rank 值为 i+1 层的 rank 值
        // 各个层的 rank 值一层层累积
        // 最终 rank[0] 的值加一就是新节点的前置节点的排位
        // rank[0] 会在后面成为计算 span 值和 rank 值的基础
        rank[i] = i == (zsl-&gt;level - 1) ? 0 : rank[i + 1];//进行跳跃，如果最上面一层，老实的初始化，如果到了倒数第二层，则以最上面一层为起点开始寻找

        redisLog(REDIS_WARNING, &quot;rank[%d]:%d&quot;, i, rank[i]);
        redisLog(REDIS_WARNING, &quot;x-&gt;score:%f&quot;, x-&gt;score);
        // 沿着前进指针遍历跳跃表
        // T_wrost = O(N^2), T_avg = O(N log N)
        /*
          同一层往前寻找，直到不再满足以下条件再找下一层，
          将要和新节点相连接的节点满足如下条件：
            1、forward不存在
            2、forward节点的score大于新节点的score
            3、forward的节点和新的节点的score相等，forward节点的值大于新节点
         */
        if (x-&gt;level[i].forward) {
            redisLog(REDIS_WARNING, &quot;判断的：x-&gt;level[%d].forward-&gt;score:%f&quot;, i, x-&gt;level[i].forward-&gt;score);
        }
        while (x-&gt;level[i].forward &amp;&amp;
               (x-&gt;level[i].forward-&gt;score &lt; score ||
                // 比对分值
                (x-&gt;level[i].forward-&gt;score == score &amp;&amp;
                 // 比对成员， T = O(N)
                 compareStringObjects(x-&gt;level[i].forward-&gt;obj, obj) &lt; 0))) {

            // 记录沿途跨越了多少个节点
            redisLog(REDIS_WARNING, &quot;循环中的：x-&gt;level[%d].forward-&gt;score:%f&quot;, i, x-&gt;level[i].forward-&gt;score);
            rank[i] += x-&gt;level[i].span;

            // 移动至下一指针
            x = x-&gt;level[i].forward;
            redisLog(REDIS_WARNING, &quot;rank[%d]值:%d&quot;, i, rank[i]);
        }
        // 记录将要和新节点相连接的节点
        update[i] = x;
        redisLog(REDIS_WARNING, &quot;score:%f&quot;, score);
        redisLog(REDIS_WARNING, &quot;第%d遍历结束&quot;, i);
    }

for (i = 0; i &lt; level; i++) {
    // 设置新节点的 forward 指针
    x-&gt;level[i].forward = update[i]-&gt;level[i].forward;

    // 将沿途记录的各个节点的 forward 指针指向新节点
    update[i]-&gt;level[i].forward = x;

    /* update span covered by update[i] as x is inserted here */
    // 计算新节点跨越的节点数量
    x-&gt;level[i].span = update[i]-&gt;level[i].span - (rank[0] - rank[i]);
    redisLog(REDIS_WARNING, &quot;update[%d]-&gt;score：%f&quot;,  i, update[i]-&gt;score);
    // 更新新节点插入之后，沿途节点的 span 值
    // 其中的 +1 计算的是新节点
    update[i]-&gt;level[i].span = (rank[0] - rank[i]) + 1;

    redisLog(REDIS_WARNING, &quot;新节点的span[%d]：%d&quot;, i, update[i]-&gt;level[i].span);
}            
</code></pre><p><img src="/img/redis/skiplist_add.png" alt="Alt text" title="skiplist"></p>
<pre><code>zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {
    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;
    unsigned int rank[ZSKIPLIST_MAXLEVEL];
    int i, level;

    redisAssert(!isnan(score));

    // 总体思路是先查找记录每层的节点位置,然后走和链表一样的插入操作
    // 在各个层查找节点的插入位置, 更新update
    // T_wrost = O(N^2), T_avg = O(N log N)
    x = zsl-&gt;header;
    redisLog(REDIS_WARNING, &quot;lever值为：%d&quot;, zsl-&gt;level);
    redisLog(REDIS_WARNING, &quot;key为：%s&quot;, obj-&gt;ptr);
    for (i = zsl-&gt;level - 1; i &gt;= 0; i--) {//按层遍历，最高层开始遍历，最底层遍历的话要走过每一个节点，跳跃表就没有任何意义了

        /* store rank that is crossed to reach the insert position */
        // 如果 i 不是 zsl-&gt;level-1 层
        // 那么 i 层的起始 rank 值为 i+1 层的 rank 值
        // 各个层的 rank 值一层层累积
        // 最终 rank[0] 的值加一就是新节点的前置节点的排位
        // rank[0] 会在后面成为计算 span 值和 rank 值的基础
        rank[i] = i == (zsl-&gt;level - 1) ? 0 : rank[i + 1];//进行跳跃，如果最上面一层，老实的初始化，如果到了倒数第二层，则以最上面一层为起点开始寻找，如图的L2的20这个节点，他的初始的rank是4而不是0，如果是0的话，因此他的路线才是l3的20节点，再从l2的20去找，而不是l2的-1节点重新遍历

        redisLog(REDIS_WARNING, &quot;rank[i+1]:%d&quot;, rank[i + 1]);
        // 沿着前进指针遍历跳跃表
        // T_wrost = O(N^2), T_avg = O(N log N)
        /*
          同一层往前寻找，直到不再满足以下条件再找下一层，
          将要和新节点相连接的节点满足如下条件：
            1、forward不存在
            2、forward节点的score大于新节点的score
            3、forward的节点和新的节点的score相等，forward节点的值大于新节点
         */
        while (x-&gt;level[i].forward &amp;&amp;
            (x-&gt;level[i].forward-&gt;score &lt; score ||
                // 比对分值
                (x-&gt;level[i].forward-&gt;score == score &amp;&amp;
                // 比对成员， T = O(N)
                compareStringObjects(x-&gt;level[i].forward-&gt;obj, obj) &lt; 0))) {

            // 记录沿途跨越了多少个节点
            rank[i] += x-&gt;level[i].span;//将小于自己的节点的span值加起来，例如：rank[1]的值为rank[0]的值（也就是l3的-1节点的span加上l3的20节点的span）加上下一个节点的span（l2的30节点的span值）

            // 移动至下一指针
            x = x-&gt;level[i].forward;
            redisLog(REDIS_WARNING, &quot;rank值:%d&quot;, rank[i]);
        }
        // 记录将要和新节点相连接的节点
        update[i] = x;
        redisLog(REDIS_WARNING, &quot;span的值：%d&quot;, rank[i]);
        redisLog(REDIS_WARNING, &quot;第%d个指针&quot;, i);
        redisLog(REDIS_WARNING, &quot;score:%f&quot;, score);
    }

    /* we assume the key is not already inside, since we allow duplicated
     * scores, and the re-insertion of score and redis object should never
     * happen since the caller of zslInsert() should test in the hash table
     * if the element is already inside or not. 
     *
     * zslInsert() 的调用者会确保同分值且同成员的元素不会出现，
     * 所以这里不需要进一步进行检查，可以直接创建新元素。
     */

    // 获取一个随机值作为新节点的层数
    // T = O(N)
    level = zslRandomLevel();

    // 如果新节点的层数比表中其他节点的层数都要大
    // 那么初始化表头节点中未使用的层，并将它们记录到 update 数组中
    // 将来也指向新节点
    redisLog(REDIS_WARNING, &quot;随机分配的level:%d&quot;, level);
    if (level &gt; zsl-&gt;level) {

        // 初始化未使用层（因为是初始化大于最高层的层，因此只有header节点指向这些层）
        // T = O(1)
        for (i = zsl-&gt;level; i &lt; level; i++) {
            rank[i] = 0;
            update[i] = zsl-&gt;header;
            update[i]-&gt;level[i].span = zsl-&gt;length;
        }

        // 更新表中节点最大层数
        zsl-&gt;level = level;
    }

    // 创建新节点（创建数据和score）
    x = zslCreateNode(level, score, obj);

    // 分别处理每层update中对应的链表的insert操作
    // 将前面记录的指针指向新节点，并做相应的设置
    // T = O(1)
    for (i = 0; i &lt; level; i++) {

        // 设置新节点的 forward 指针
        x-&gt;level[i].forward = update[i]-&gt;level[i].forward;

        // 将沿途记录的各个节点的 forward 指针指向新节点
        update[i]-&gt;level[i].forward = x;

        /* update span covered by update[i] as x is inserted here */
        // 计算新节点跨越的节点数量
        x-&gt;level[i].span = update[i]-&gt;level[i].span - (rank[0] - rank[i]);

        // 更新新节点插入之后，沿途节点的 span 值
        // 其中的 +1 计算的是新节点
        update[i]-&gt;level[i].span = (rank[0] - rank[i]) + 1;
        redisLog(REDIS_WARNING, &quot;新节点的span：%d&quot;, x-&gt;level[i].span);
    }

    /* increment span for untouched levels */
    // 未接触的节点的 span 值也需要增一，这些节点直接从表头指向新节点
    // T = O(1)
    for (i = level; i &lt; zsl-&gt;level; i++) {
        update[i]-&gt;level[i].span++;
    }

    // 设置新节点的后退指针
    x-&gt;backward = (update[0] == zsl-&gt;header) ? NULL : update[0];
    if (x-&gt;level[0].forward) {
        x-&gt;level[0].forward-&gt;backward = x;
    }
    else {
        zsl-&gt;tail = x;
    }

    // 跳跃表的节点计数增一
    zsl-&gt;length++;

    redisLog(REDIS_WARNING, &quot;长度:%lu&quot;, zsl-&gt;length);
    printf(&quot;\n&quot;);
    return x;
}
</code></pre><h1 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h1><ol>
<li>找出要删除节点的前一个节点，存入update中，再遍历</li>
<li>如果删除的节点不存在当前层，则span-1（因为需要删除当前节点）</li>
<li>如果要删除的节点存在当前层，则span为当前节点的span+删除节点的span-1</li>
<li>判断最大的level值，替换前置，后置指针，及length值</li>
</ol>
<pre><code>int zslDelete(zskiplist *zsl, double score, robj *obj) {
    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;
    int i;

    // 查找目标节点, 把前置节点记录在update中
    // 遍历跳跃表，查找目标节点，并记录所有沿途节点
    // T_wrost = O(N^2), T_avg = O(N log N)
    x = zsl-&gt;header;
    for (i = zsl-&gt;level-1; i &gt;= 0; i--) {

        // 遍历跳跃表的复杂度为 T_wrost = O(N), T_avg = O(log N)
        while (x-&gt;level[i].forward &amp;&amp;
            (x-&gt;level[i].forward-&gt;score &lt; score ||
                // 比对分值
                (x-&gt;level[i].forward-&gt;score == score &amp;&amp;
                // 比对对象，T = O(N)
                compareStringObjects(x-&gt;level[i].forward-&gt;obj, obj) &lt; 0))) {

            // 沿着前进指针移动
            x = x-&gt;level[i].forward;
        }

        // 记录沿途节点
        update[i] = x;
    }

    /* We may have multiple elements with the same score, what we need
     * is to find the element with both the right score and object. 
     *
     * 检查找到的元素 x ，只有在它的分值和对象都相同时，才将它删除。
     */
    x = x-&gt;level[0].forward;
    if (x &amp;&amp; score == x-&gt;score &amp;&amp; equalStringObjects(x-&gt;obj, obj)) {
        // T = O(1)
        zslDeleteNode(zsl, x, update);
        // T = O(1)
        zslFreeNode(x);
        return 1;
    } else {
        return 0; /* not found */
    }

    return 0; /* not found */
}

/**
 * zskiplistNode *x 删除节点的指针
 * zskiplistNode **update 删除节点的backward节点的指针
 */
void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {
    int i;

    // 更新所有和被删除节点 x 有关的节点的指针，解除它们之间的关系
    // T = O(1)
    for (i = 0; i &lt; zsl-&gt;level; i++) {
        //要删除的节点存在当前层
        if (update[i]-&gt;level[i].forward == x) {
            update[i]-&gt;level[i].span += x-&gt;level[i].span - 1;
            update[i]-&gt;level[i].forward = x-&gt;level[i].forward;
        } else {//删除的节点不存在当前层
            update[i]-&gt;level[i].span -= 1;
        }
    }

    // 更新被删除节点 x 的前进和后退指针
    if (x-&gt;level[0].forward) {
        x-&gt;level[0].forward-&gt;backward = x-&gt;backward;
    } else {
        zsl-&gt;tail = x-&gt;backward;
    }

    // 更新跳跃表最大层数（只在被删除节点是跳跃表中最高的节点时才执行）
    // T = O(1)
    while(zsl-&gt;level &gt; 1 &amp;&amp; zsl-&gt;header-&gt;level[zsl-&gt;level-1].forward == NULL) {
        zsl-&gt;level--;
    }

    // 跳跃表节点计数器减一
    zsl-&gt;length--;
}
</code></pre><h1 id="按照分值范围删除"><a href="#按照分值范围删除" class="headerlink" title="按照分值范围删除"></a>按照分值范围删除</h1><ol>
<li>找到删除范围的最小的score的前一个节点的指针存入update</li>
<li>在第0层中，找到所有的要删除的节点，并依次删除</li>
<li>需要注意的是x-&gt;level[0].forward一定是删除范围最小的score的前一个最靠近的节点（因为第0层中是存在所有的节点的）</li>
<li>另外关注一点的的：删除是从小到大，依次删除的，这样能保证update中的值，一定是被删除节点的前一个节点，比如说现在存在score为：1，2，3，4，5，6，7的节点，我要删除2-6之间的节点，那么我依次删除3，4，5；第一次删除3的时候他的前置节点是2，第二次删除4的时候，他的前置节点也是2，因为3被删除了</li>
</ol>
<pre><code>unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec *range, dict *dict) {
    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;
    unsigned long removed = 0;
    int i;

    // 记录所有和被删除节点（们）有关的节点
    // T_wrost = O(N) , T_avg = O(log N)
    x = zsl-&gt;header;
    for (i = zsl-&gt;level-1; i &gt;= 0; i--) {
        while (x-&gt;level[i].forward &amp;&amp; (range-&gt;minex ?
            x-&gt;level[i].forward-&gt;score &lt;= range-&gt;min :
            x-&gt;level[i].forward-&gt;score &lt; range-&gt;min)) {
                x = x-&gt;level[i].forward;
        }
        update[i] = x;
    }

    /* Current node is the last with score &lt; or &lt;= min. */
    // 定位到给定范围开始的第一个节点
    x = x-&gt;level[0].forward;

    /* Delete nodes while in range. */
    // 删除范围中的所有节点
    // T = O(N)
    //在第0层中，找到所有的要删除的节点，并依次删除
    while (x &amp;&amp;
           (range-&gt;maxex ? x-&gt;score &lt; range-&gt;max : x-&gt;score &lt;= range-&gt;max))
    {
        // 记录下个节点的指针
        zskiplistNode *next = x-&gt;level[0].forward;
        zslDeleteNode(zsl, x, update);
        dictDelete(dict, x-&gt;obj);
        zslFreeNode(x);
        removed++;
        x = next;
    }
    return removed;
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="zskiplist结构"><a href="#zskiplist结构" class="headerlink" title="zskiplist结构"></a>zskiplist结构</h1><pre><code>/*
 * 跳跃表
 */
typedef stru]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis-dict源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/01/05/redis-dict%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/01/05/redis-dict源码阅读/</id>
    <published>2018-01-05T07:26:40.000Z</published>
    <updated>2018-01-15T14:22:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="dict结构"><a href="#dict结构" class="headerlink" title="dict结构"></a>dict结构</h1><pre><code>typedef struct dict {

    // 类型特定函数
    dictType *type;

    // 私有数据
    void *privdata;

    // 哈希表
    dictht ht[2];

    // rehash 索引
    // 当 rehash 不在进行时，值为 -1
    int rehashidx; /* rehashing not in progress if rehashidx == -1 */

    // 目前正在运行的安全迭代器的数量
    int iterators; /* number of iterators currently running */

} dict;

typedef struct dictType {

    // 计算哈希值的函数
    unsigned int (*hashFunction)(const void *key);

    // 复制键的函数
    void *(*keyDup)(void *privdata, const void *key);

    // 复制值的函数
    void *(*valDup)(void *privdata, const void *obj);

    // 对比键的函数
    int (*keyCompare)(void *privdata, const void *key1, const void *key2);

    // 销毁键的函数
    void (*keyDestructor)(void *privdata, void *key);

    // 销毁值的函数
    void (*valDestructor)(void *privdata, void *obj);

} dictType;

typedef struct dictht {

    // 哈希表数组
    dictEntry **table;

    // 哈希表大小
    unsigned long size;

    // 哈希表大小掩码，用于计算索引值
    // 总是等于 size - 1
    unsigned long sizemask;

    // 该哈希表已有节点的数量(注意used的数量是所有的链表中的节点，比如说key1和key2冲突hash后得到的key是0，但是这里的used要加2)

    unsigned long used;

} dictht;

typedef struct dictEntry {

    // 键
    void *key;

    // 值
    union {
        void *val;
        uint64_t u64;
        int64_t s64;
    } v;

    // 指向下个哈希表节点，形成链表
    struct dictEntry *next;

} dictEntry;
</code></pre><p><img src="/img/redis/dict.svg" alt="Alt text" title="dict结构"></p>
<h1 id="dict何时进行rehash（渐进式rehash）"><a href="#dict何时进行rehash（渐进式rehash）" class="headerlink" title="dict何时进行rehash（渐进式rehash）"></a>dict何时进行rehash（渐进式rehash）</h1><ol>
<li>添加节点的时候，进行单步rehash（dictAddRaw）</li>
<li>删除节点的时候，进行单步rehash（dictGenericDelete）</li>
<li>进行查找节点的时候（dictFind）</li>
<li>获取随机值的时候（dictGetRandomKey）</li>
<li>dictRehashMilliseconds</li>
<li>_dictRehashStep</li>
<li>如下代码所示，每次进行上述操作的时候，会调用dictRehash（指定执行N步rehash，不会一次性rehash所有的dict节点）,渐进式的好处在于：1、不会阻塞用户的数据返回（假如用户的操作触发了rehash，如果是全量rehash，那么要等待全量rehash完成才返回数据，时间会非常长，体验不好）2、避免了系统的集中式计算 </li>
</ol>
<pre><code>int dictRehash(dict *d, int n) {

    // 只可以在 rehash 进行中时执行
    if (!dictIsRehashing(d)) {
        return 0;   
    }

    // 进行 N 步迁移
    // T = O(N)
    while(n--) {
        dictEntry *de, *nextde;

        /* Check if we already rehashed the whole table... */
        // 如果 0 号哈希表为空，那么表示 rehash 执行完毕
        // T = O(1)
        if (d-&gt;ht[0].used == 0) {
            // 释放 0 号哈希表
            zfree(d-&gt;ht[0].table);
            // 将原来的 1 号哈希表设置为新的 0 号哈希表
            d-&gt;ht[0] = d-&gt;ht[1];
            // 重置旧的 1 号哈希表
            _dictReset(&amp;d-&gt;ht[1]);
            // 关闭 rehash 标识
            d-&gt;rehashidx = -1;
            // 返回 0 ，向调用者表示 rehash 已经完成
            return 0;
        }

        /* Note that rehashidx can&apos;t overflow as we are sure there are more
         * elements because ht[0].used != 0 */
        // 确保 rehashidx 没有越界
        assert(d-&gt;ht[0].size &gt; (unsigned)d-&gt;rehashidx);

        // 略过数组中为空的索引，找到下一个非空索引
        while(d-&gt;ht[0].table[d-&gt;rehashidx] == NULL) {
            d-&gt;rehashidx++;
        }

        // 指向该索引的链表表头节点
        de = d-&gt;ht[0].table[d-&gt;rehashidx];
        /* Move all the keys in this bucket from the old to the new hash HT */
        // 将链表中的所有节点迁移到新哈希表
        // 注意：hash的冲突解决是链地址法，所以一个rehashidx对应的是一个链表，需要将整个链表移动过去
        // T = O(1)
        while(de) {
            unsigned int h;

            // 保存下个节点的指针
            nextde = de-&gt;next;

            /* Get the index in the new hash table */
            // 计算新哈希表的哈希值，以及节点插入的索引位置
            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[1].sizemask;

            // 插入节点到新哈希表
            de-&gt;next = d-&gt;ht[1].table[h];
            d-&gt;ht[1].table[h] = de;

            // 更新计数器
            d-&gt;ht[0].used--;
            d-&gt;ht[1].used++;

            // 继续处理下个节点
            de = nextde;
        }
        // 将刚迁移完的哈希表索引的指针设为空
        d-&gt;ht[0].table[d-&gt;rehashidx] = NULL;
        // 更新 rehash 索引
        d-&gt;rehashidx++;
    }

    return 1;
}
</code></pre><h1 id="dict的rehash判断标准"><a href="#dict的rehash判断标准" class="headerlink" title="dict的rehash判断标准"></a>dict的rehash判断标准</h1><ol>
<li>dict_can_resize标识可进行rehash</li>
<li>dictIsRehashing标识没有正在进行rehash</li>
<li>hashtable[1]的可用空间大小不能小于hashtable[0]的已用空间大小</li>
<li>hashtable[0]的used!=0</li>
</ol>
<pre><code>int dictResize(dict *d)
{
    int minimal;

    // 不能在关闭 rehash 或者正在 rehash 的时候调用
    if (!dict_can_resize || dictIsRehashing(d)) {
        return DICT_ERR;
    }

    // 计算让比率接近 1：1 所需要的最少节点数量
    minimal = d-&gt;ht[0].used;
    if (minimal &lt; DICT_HT_INITIAL_SIZE) {
        minimal = DICT_HT_INITIAL_SIZE;
    }

    // 调整字典的大小
    // T = O(N)
    return dictExpand(d, minimal);
}
</code></pre><h1 id="dict怎样进行rehash"><a href="#dict怎样进行rehash" class="headerlink" title="dict怎样进行rehash"></a>dict怎样进行rehash</h1><ol>
<li>进行一系列是否能rehash的判断</li>
<li>找到当前存在ht[0]的rehashidx,表示当前rehashidx没有进行迁移（也就是：d-&gt;ht[0].table[d-&gt;rehashidx] != NULL）</li>
<li>分配ht[1]-&gt;table的空间，大小至少为ht[0]-&gt;usedd的两倍</li>
<li>遍历当前的节点对应的链（hash冲突使用链表法解决的，所以一个d-&gt;ht[0].table[d-&gt;rehashidx]保存了一个链表）</li>
<li>把节点从ht[0]移动到ht[1],移动完所有的节点后，释放ht[0],将原来的ht[1]成为新的ht[0],创建一个新的ht[1]</li>
<li>修改rehashidx的值</li>
</ol>
<pre><code>int dictRehash(dict *d, int n) {

    // 只可以在 rehash 进行中时执行
    if (!dictIsRehashing(d)) {
        return 0;   
    }

    // 进行 N 步迁移
    // T = O(N)
    while(n--) {
        dictEntry *de, *nextde;

        /* Check if we already rehashed the whole table... */
        // 如果 0 号哈希表为空，那么表示 rehash 执行完毕
        // T = O(1)
        if (d-&gt;ht[0].used == 0) {
            // 释放 0 号哈希表
            zfree(d-&gt;ht[0].table);
            // 将原来的 1 号哈希表设置为新的 0 号哈希表
            d-&gt;ht[0] = d-&gt;ht[1];
            // 重置旧的 1 号哈希表
            _dictReset(&amp;d-&gt;ht[1]);
            // 关闭 rehash 标识
            d-&gt;rehashidx = -1;
            // 返回 0 ，向调用者表示 rehash 已经完成
            return 0;
        }

        /* Note that rehashidx can&apos;t overflow as we are sure there are more
         * elements because ht[0].used != 0 */
        // 确保 rehashidx 没有越界
        assert(d-&gt;ht[0].size &gt; (unsigned)d-&gt;rehashidx);

        // 略过数组中为空的索引，找到下一个非空索引
        while(d-&gt;ht[0].table[d-&gt;rehashidx] == NULL) {
            d-&gt;rehashidx++;
        }

        // 指向该索引的链表表头节点
        de = d-&gt;ht[0].table[d-&gt;rehashidx];
        /* Move all the keys in this bucket from the old to the new hash HT */
        // 将链表中的所有节点迁移到新哈希表
        // 注意：hash的冲突解决是链地址法，所以一个rehashidx对应的是一个链表，需要将整个链表移动过去
        // T = O(1)
        while(de) {
            unsigned int h;

            // 保存下个节点的指针
            nextde = de-&gt;next;

            /* Get the index in the new hash table */
            // 计算新哈希表的哈希值，以及节点插入的索引位置
            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[1].sizemask;

            // 插入节点到新哈希表
            de-&gt;next = d-&gt;ht[1].table[h];
            d-&gt;ht[1].table[h] = de;

            // 更新计数器
            d-&gt;ht[0].used--;
            d-&gt;ht[1].used++;

            // 继续处理下个节点
            de = nextde;
        }
        // 将刚迁移完的哈希表索引的指针设为空
        d-&gt;ht[0].table[d-&gt;rehashidx] = NULL;
        // 更新 rehash 索引
        d-&gt;rehashidx++;
    }

    return 1;
}
</code></pre><h1 id="dict如何解决hash冲突"><a href="#dict如何解决hash冲突" class="headerlink" title="dict如何解决hash冲突"></a>dict如何解决hash冲突</h1><ol>
<li>hash冲突：指两个不同的键拥有相同的hash值 </li>
<li>链地址法： 使用链表将多个哈希值相同的节点串连在一起， 从而解决冲突问题</li>
<li>如图，0号节点的key4和key1产生了hash冲突（hash冲突：key4和key1算出来的hash的值都为0，链地址法：dict使用链表把key4和key1链接起来，从而可以解决hash冲突的问题）</li>
</ol>
<pre><code>static int _dictKeyIndex(dict *d, const void *key)
{
    unsigned int h, idx, table;
    dictEntry *he;

    /* Expand the hash table if needed */
    // 单步 rehash
    // T = O(N)
    if (_dictExpandIfNeeded(d) == DICT_ERR)
        return -1;

    /* Compute the key hash value */
    // 计算 key 的哈希值
    h = dictHashKey(d, key);
    // T = O(1)
    for (table = 0; table &lt;= 1; table++) {

        // 计算索引值
        idx = h &amp; d-&gt;ht[table].sizemask;

        /* Search if this slot does not already contain the given key */
        // 查找 key 是否存在
        // T = O(1)
        he = d-&gt;ht[table].table[idx];
        while(he) {//如果当前节点已经存在值（就是hash冲突），就计算他的链表的最后节点的指针
            if (dictCompareKeys(d, key, he-&gt;key))
                return -1;
            he = he-&gt;next;
        }

        // 如果运行到这里时，说明 0 号哈希表中所有节点都不包含 key
        // 如果这时 rehahs 正在进行，那么继续对 1 号哈希表进行 rehash
        if (!dictIsRehashing(d)) break;
    }

    // 返回索引值
    return idx;
}
</code></pre><p><img src="/img/redis/collision.svg" alt="Alt text" title="hash冲突"></p>
<h1 id="安全迭代器和非安全迭代器有什么区别"><a href="#安全迭代器和非安全迭代器有什么区别" class="headerlink" title="安全迭代器和非安全迭代器有什么区别"></a>安全迭代器和非安全迭代器有什么区别</h1><ol>
<li>安全迭代器：在迭代进行过程中，可以对字典进行修改</li>
<li>不安全迭代器：在迭代进行过程中，不对字典进行修改</li>
</ol>
<h1 id="redis如何保证遍历dict的时候能遍历到全部的数据"><a href="#redis如何保证遍历dict的时候能遍历到全部的数据" class="headerlink" title="redis如何保证遍历dict的时候能遍历到全部的数据"></a>redis如何保证遍历dict的时候能遍历到全部的数据</h1><ol>
<li>还需要查看dictscan函数，算法有点复杂</li>
<li>建议阅读以下文章<blockquote>
<p><a href="http://chenzhenianqing.com/articles/1101.html" target="_blank" rel="external">http://chenzhenianqing.com/articles/1101.html</a><br><a href="http://blog.csdn.net/gqtcgq/article/details/50533336" target="_blank" rel="external">http://blog.csdn.net/gqtcgq/article/details/50533336</a><br><a href="http://www.arthuryangcs.com/2016/12/10/Redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3dict%E5%8F%8AdictScan/" target="_blank" rel="external">http://www.arthuryangcs.com/2016/12/10/Redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3dict%E5%8F%8AdictScan/</a></p>
</blockquote>
</li>
</ol>
<h1 id="有趣的代码"><a href="#有趣的代码" class="headerlink" title="有趣的代码"></a>有趣的代码</h1><ol>
<li>计算索引值<br> 如下代码：d-&gt;ht[table].sizemask的值为2的n次方-1（为size-1）<br> 其实下面代码的含义可以理解为h和sizemask”取模”（不是真正意义的取模哦）</li>
</ol>
<pre><code>idx = h &amp; d-&gt;ht[table].sizemask;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="dict结构"><a href="#dict结构" class="headerlink" title="dict结构"></a>dict结构</h1><pre><code>typedef struct dict {

    // 类型特定函数
    dictT]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis-adlist源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/01/04/redis-adlist%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/01/04/redis-adlist源码阅读/</id>
    <published>2018-01-04T14:02:22.000Z</published>
    <updated>2018-01-04T14:48:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="adlist结构"><a href="#adlist结构" class="headerlink" title="adlist结构"></a>adlist结构</h1><pre><code>typedef struct list {

    /** 表头节点 */
    listNode *head;

    /** 表尾节点 */
    listNode *tail;

    /** 节点值复制函数 */
    void *(*dup)(void *ptr);

    /** 节点值释放函数 */
    void (*free)(void *ptr);

    /** 节点值对比函数 */
    int (*match)(void *ptr, void *key);

    /** 链表所包含的节点数量 */
    unsigned long len;

} list;

typedef struct listNode {

    /** 前置节点 */
    struct listNode *prev;

    /** 后置节点 */
    struct listNode *next;

    /** 节点的值 */
    void *value;

} listNode;
</code></pre><p><img src="/img/redis/adlist.svg" alt="Alt text" title="adlist结构">    </p>
<h1 id="双端链表修改注意事项"><a href="#双端链表修改注意事项" class="headerlink" title="双端链表修改注意事项"></a>双端链表修改注意事项</h1><h3 id="在进行修改（增，删）双端链表的时候需要考虑这四个方面："><a href="#在进行修改（增，删）双端链表的时候需要考虑这四个方面：" class="headerlink" title="在进行修改（增，删）双端链表的时候需要考虑这四个方面："></a>在进行修改（增，删）双端链表的时候需要考虑这四个方面：</h3><h6 id="1、修改当前节点的前后指针"><a href="#1、修改当前节点的前后指针" class="headerlink" title="1、修改当前节点的前后指针"></a>1、修改当前节点的前后指针</h6><h6 id="2、修改当前节点的相邻节点的前后指针"><a href="#2、修改当前节点的相邻节点的前后指针" class="headerlink" title="2、修改当前节点的相邻节点的前后指针"></a>2、修改当前节点的相邻节点的前后指针</h6><h6 id="3、判断当前节点是否是首尾节点，修改list的首尾节点指针"><a href="#3、判断当前节点是否是首尾节点，修改list的首尾节点指针" class="headerlink" title="3、判断当前节点是否是首尾节点，修改list的首尾节点指针"></a>3、判断当前节点是否是首尾节点，修改list的首尾节点指针</h6><h6 id="4、修改len值"><a href="#4、修改len值" class="headerlink" title="4、修改len值"></a>4、修改len值</h6><h3 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h3><h6 id="如果要修改将node2，添加到node1和node3之间（添加之前试想一下只存在node1，node3，node4节点）"><a href="#如果要修改将node2，添加到node1和node3之间（添加之前试想一下只存在node1，node3，node4节点）" class="headerlink" title="如果要修改将node2，添加到node1和node3之间（添加之前试想一下只存在node1，node3，node4节点）"></a>如果要修改将node2，添加到node1和node3之间（添加之前试想一下只存在node1，node3，node4节点）</h6><h6 id="操作步奏："><a href="#操作步奏：" class="headerlink" title="操作步奏："></a>操作步奏：</h6><h6 id="1、将node2的prev指向node1，将node2的next指向node3"><a href="#1、将node2的prev指向node1，将node2的next指向node3" class="headerlink" title="1、将node2的prev指向node1，将node2的next指向node3"></a>1、将node2的prev指向node1，将node2的next指向node3</h6><h6 id="2、将node1的next指向node2，将node3的orev指向node2"><a href="#2、将node1的next指向node2，将node3的orev指向node2" class="headerlink" title="2、将node1的next指向node2，将node3的orev指向node2"></a>2、将node1的next指向node2，将node3的orev指向node2</h6><h6 id="3、判断不是首尾节点，如果是的话，需要将list的tail或者list的head指向node2"><a href="#3、判断不是首尾节点，如果是的话，需要将list的tail或者list的head指向node2" class="headerlink" title="3、判断不是首尾节点，如果是的话，需要将list的tail或者list的head指向node2"></a>3、判断不是首尾节点，如果是的话，需要将list的tail或者list的head指向node2</h6><h6 id="4-len的值加1"><a href="#4-len的值加1" class="headerlink" title="4.len的值加1"></a>4.len的值加1</h6><pre><code>示例代码：
list *listInsertNode(list *list, listNode *old_node, void *value, int after) {
    listNode *node;

    // 创建新节点
    if ((node = zmalloc(sizeof(*node))) == NULL)
        return NULL;

    // 保存值
    node-&gt;value = value;

    // 将新节点添加到给定节点之后
    if (after) {
        node-&gt;prev = old_node;
        node-&gt;next = old_node-&gt;next;
        // 给定节点是原表尾节点
        if (list-&gt;tail == old_node) {
            list-&gt;tail = node;
        }
    // 将新节点添加到给定节点之前
    } else {
        node-&gt;next = old_node;
        node-&gt;prev = old_node-&gt;prev;
        // 给定节点是原表头节点
        if (list-&gt;head == old_node) {
            list-&gt;head = node;
        }
    }

    //这里需要注意的是，两个节点的连接，既要改变当前插入节点的前后节点指针，也要改变相邻节点的指针
    // 更新新节点的前置指针
    if (node-&gt;prev != NULL) {
        node-&gt;prev-&gt;next = node;
    }
    // 更新新节点的后置指针
    if (node-&gt;next != NULL) {
        node-&gt;next-&gt;prev = node;
    }

    // 更新链表节点数
    list-&gt;len++;

    return list;
}
</code></pre><p><img src="/img/redis/mod_adlist.png" alt="Alt text" title="修改adlist示意图">    </p>
<h1 id="双端链表遍历"><a href="#双端链表遍历" class="headerlink" title="双端链表遍历"></a>双端链表遍历</h1><h6 id="迭代器相对来说比较简单，首先listIter定义了当前节点，和迭代方向"><a href="#迭代器相对来说比较简单，首先listIter定义了当前节点，和迭代方向" class="headerlink" title="迭代器相对来说比较简单，首先listIter定义了当前节点，和迭代方向"></a>迭代器相对来说比较简单，首先listIter定义了当前节点，和迭代方向</h6><h6 id="然后使用listNext进行节点的移动"><a href="#然后使用listNext进行节点的移动" class="headerlink" title="然后使用listNext进行节点的移动"></a>然后使用listNext进行节点的移动</h6><h6 id="最后使用len属性和while进行节点的循环遍历"><a href="#最后使用len属性和while进行节点的循环遍历" class="headerlink" title="最后使用len属性和while进行节点的循环遍历"></a>最后使用len属性和while进行节点的循环遍历</h6><pre><code>示例代码：
typedef struct listIter {

    /** 当前迭代到的节点 */
    listNode *next;

    /** 迭代的方向 */
    int direction;

} listIter;

listNode *listNext(listIter *iter)
{
    listNode *current = iter-&gt;next;

    if (current != NULL) {
        // 根据方向选择下一个节点
        if (iter-&gt;direction == AL_START_HEAD)
            // 保存下一个节点，防止当前节点被删除而造成指针丢失
            iter-&gt;next = current-&gt;next;
        else
            // 保存下一个节点，防止当前节点被删除而造成指针丢失
            iter-&gt;next = current-&gt;prev;
    }

    return current;
}

list *listDup(list *orig)
{
    list *copy;
    listIter *iter;
    listNode *node;

    // 创建新链表
    if ((copy = listCreate()) == NULL)
        return NULL;

    // 设置节点值处理函数
    copy-&gt;dup = orig-&gt;dup;
    copy-&gt;free = orig-&gt;free;
    copy-&gt;match = orig-&gt;match;

    // 迭代整个输入链表
    iter = listGetIterator(orig, AL_START_HEAD);
    while((node = listNext(iter)) != NULL) {
        void *value;

        // 复制节点值到新节点
        if (copy-&gt;dup) {
            value = copy-&gt;dup(node-&gt;value);
            if (value == NULL) {
                listRelease(copy);
                listReleaseIterator(iter);
                return NULL;
            }
        } else
            value = node-&gt;value;

        // 将节点添加到链表
        if (listAddNodeTail(copy, value) == NULL) {
            listRelease(copy);
            listReleaseIterator(iter);
            return NULL;
        }
    }

    // 释放迭代器
    listReleaseIterator(iter);

    // 返回副本
    return copy;
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="adlist结构"><a href="#adlist结构" class="headerlink" title="adlist结构"></a>adlist结构</h1><pre><code>typedef struct list {

    /** 表头节点 */]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis-sds源码阅读]]></title>
    <link href="http://www.cxyteam.com/2018/01/03/redis-sds%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://www.cxyteam.com/2018/01/03/redis-sds源码阅读/</id>
    <published>2018-01-03T03:57:42.000Z</published>
    <updated>2018-01-03T13:40:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="sds结构"><a href="#sds结构" class="headerlink" title="sds结构"></a>sds结构</h1><pre><code>struct sdshdr {

    /** buf 中已占用空间的长度*/
    int len;

    /** buf 中剩余可用空间的长度*/
    int free;

    /** 数据空间*/ 
    /** 柔性数组*/
    char buf[];
};
</code></pre><p><img src="/img/redis/sds.jpg" alt="Alt text" title="sds结构"></p>
<h1 id="获取字符串长度复杂度为O-1"><a href="#获取字符串长度复杂度为O-1" class="headerlink" title="获取字符串长度复杂度为O(1)"></a>获取字符串长度复杂度为O(1)</h1><pre><code>在sds的结构中，保存了sds的占用空间的长度，可以使用sdslen进行读取，代码实现如下：

static inline size_t sdslen(const sds s) {
    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));
    return sh-&gt;len;
}
</code></pre><h1 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h1><pre><code>二进制安全：比如说在c语言中，strlen计算长度，是依赖于特殊的字符&apos;\0&apos;来判断是否到达字符串的最末尾，所以对于&quot;aaa\0bbb&quot;来说，它就不是二进制安全的
sds的二进制安全，它不仅仅根据&quot;\0&quot;来判断是否到达字符串的末尾，还根据len的长度来进行计算
</code></pre><h1 id="杜绝缓冲区溢出"><a href="#杜绝缓冲区溢出" class="headerlink" title="杜绝缓冲区溢出"></a>杜绝缓冲区溢出</h1><pre><code>缓冲区溢出，指的是在修改字符串的时候，没有对该字符串分配足够的空间
sds在对字符串进行修改的时候，都会使用（sdsMakeRoomFor）判断是否有足够的空间
sds sdscatlen(sds s, const void *t, size_t len) {
    struct sdshdr *sh;
    // 原有字符串长度
    size_t curlen = sdslen(s);

    // 扩展 sds 空间
    // T = O(N)
    s = sdsMakeRoomFor(s, len);

    // 内存不足？直接返回
    if (s == NULL) {
        return NULL;
    }

    // 复制 t 中的内容到字符串后部
    // T = O(N)
    sh = (void*) (s - (sizeof(struct sdshdr)));
    memcpy(s + curlen, t, len);

    // 更新属性
    sh-&gt;len = curlen + len;
    sh-&gt;free = sh-&gt;free - len;

    // 添加新结尾符号
    s[curlen + len] = &apos;\0&apos;;

    // 返回新 sds
    return s;
}
</code></pre><h1 id="动态扩展，空间预分配"><a href="#动态扩展，空间预分配" class="headerlink" title="动态扩展，空间预分配"></a>动态扩展，空间预分配</h1><pre><code>对字符串进行修改的时候，会判断sds的剩余空间，如果大小不足够会重新进行分配，具体分配逻辑如下：
    1、如果新长度小于SDS_MAX_PREALLOC定义的最大空间，就分配两倍所需空间；
    2、否则在目前的长度上再增加SDS_MAX_PREALLOC定义的最大空间

代码实现如下：
/*
 * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，
 * buf 至少会有 addlen + 1 长度的空余空间
 * （额外的 1 字节是为 \0 准备的）
 *
 * 返回值
 *  sds ：扩展成功返回扩展后的 sds
 *        扩展失败返回 NULL
 *
 * 复杂度
 *  T = O(N)
 */
sds sdsMakeRoomFor(sds s, size_t addlen) {
    struct sdshdr *sh, *newsh;

    // 获取 s 目前的空余空间长度
    size_t free = sdsavail(s);

    size_t len, newlen;

    // s 目前的空余空间已经足够，无须再进行扩展，直接返回
    if (free &gt;= addlen) {
        return s;
    }

    // 获取 s 目前已占用空间的长度
    len = sdslen(s);
    sh = (void*)(s - (sizeof(struct sdshdr)));

    // s 最少需要的长度
    newlen = (len + addlen);

    // 根据新长度，为 s 分配新空间所需的大小
    // 如果当前占用内存小于1M那么就分配两倍于当前长度的内存
    // 如果当前占用内存大于等于1M那么就分配当前长度+1M的内存
    // 内存增长策略*****
    if (newlen &lt; SDS_MAX_PREALLOC) {
        // 如果新长度小于 SDS_MAX_PREALLOC 
        // 那么为它分配两倍于所需长度的空间
        newlen *= 2;
    } else {
        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC
        newlen += SDS_MAX_PREALLOC;
    }

    // T = O(N)
    newsh = zrealloc(sh, sizeof(struct sdshdr) + newlen + 1);

    // 内存不足，分配失败，返回
    if (newsh == NULL) { 
        return NULL;
    }

    // 更新 sds 的空余长度
    newsh-&gt;free = newlen - len;

    // 返回 sds
    return newsh-&gt;buf;
}
</code></pre><h1 id="惰性释放，减少内存分配次数"><a href="#惰性释放，减少内存分配次数" class="headerlink" title="惰性释放，减少内存分配次数"></a>惰性释放，减少内存分配次数</h1><pre><code>对sds字符串进行缩减操作的时候，不会对空间进行释放，仅仅只是改变len属性和free属性的值

void sdsclear(sds s) {

    // 取出 sdshdr
    struct sdshdr *sh = (void*) (s - (sizeof(struct sdshdr)));

    // 重新计算属性
    sh-&gt;free += sh-&gt;len;
    sh-&gt;len = 0;

    // 将结束符放到最前面（相当于惰性地删除 buf 中的内容）
    sh-&gt;buf[0] = &apos;\0&apos;;
}
</code></pre><h1 id="long数值转字符串"><a href="#long数值转字符串" class="headerlink" title="long数值转字符串"></a>long数值转字符串</h1><pre><code>这个函数比较有意思，他将long long类型的数值转换成string类型
    1、将数值按照10取模，取模后的值保存，在除10（相当于是对当前位的上一位进行获取 12345第一次取模的值是5，除10变成1234.5取模的值变成4）（注意101.1与10取模是1不是1.1）
    2、将保存的字符串再进行翻转
    比如：
        12345 取模后得到的值依次是5，4，3，2，1 连接成最后的字符串是54321
        再进行倒转以后变成12345

int sdsll2str(char *s, long long value) {
    char *p, aux;
    unsigned long long v;
    size_t l;

    /* Generate the string representation, this method produces
     * an reversed string. */
    v = (value &lt; 0) ? -value : value;
    p = s;
    do {
        *p++ = &apos;0&apos; + (v%10);
        v /= 10;
    } while(v);
    if (value &lt; 0) *p++ = &apos;-&apos;;

    /* Compute length and add null term. */
    l = p - s;
    *p = &apos;\0&apos;;

    /* Reverse the string. */
    p--;
    while(s &lt; p) {
        aux = *s;
        *s = *p;
        *p = aux;
        s++;
        p--;
    }
    return l;
}

为什么要&apos;0&apos;+单个数字？
参考ascii表，字符串1对应的ascii码是49，&apos;0&apos;对应的ancii值是48，比如说数字3想存储到字符串中表示也为&apos;3&apos;，那么它对应的ascii就是3+48也就是3+&apos;0&apos;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="sds结构"><a href="#sds结构" class="headerlink" title="sds结构"></a>sds结构</h1><pre><code>struct sdshdr {

    /** buf 中已占用空间的长度*/
    int l]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis对象类型及数据结构]]></title>
    <link href="http://www.cxyteam.com/2018/01/02/redis%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://www.cxyteam.com/2018/01/02/redis对象类型及数据结构/</id>
    <published>2018-01-02T09:42:59.000Z</published>
    <updated>2018-01-02T11:06:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="字符创对象（REDIS-STRING-string）"><a href="#字符创对象（REDIS-STRING-string）" class="headerlink" title="字符创对象（REDIS_STRING | string）"></a>字符创对象（REDIS_STRING | string）</h1><h4 id="整数值（int）"><a href="#整数值（int）" class="headerlink" title="整数值（int）"></a>整数值（int）</h4><h4 id="embstr编码的简单动态字符串（SDS）（embstr）"><a href="#embstr编码的简单动态字符串（SDS）（embstr）" class="headerlink" title="embstr编码的简单动态字符串（SDS）（embstr）"></a>embstr编码的简单动态字符串（SDS）（embstr）</h4><h4 id="动态字符串（raw）"><a href="#动态字符串（raw）" class="headerlink" title="动态字符串（raw）"></a>动态字符串（raw）</h4><h6 id="编码存储选择"><a href="#编码存储选择" class="headerlink" title="编码存储选择"></a>编码存储选择</h6><pre><code>如果字符串对象保存的是一个字符串值， 并且这个字符串值的长度大于 39 字节， 那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值， 并将对象的编码设置为 raw
如果字符串对象保存的是一个字符串值， 并且这个字符串值的长度小于等于 39 字节， 那么字符串对象将使用 embstr 编码的方式来保存这个字符串值
可以用 long double 类型表示的浮点数在 Redis 中也是作为字符串值来保存的： 如果我们要保存一个浮点数到字符串对象里面， 那么程序会先将这个浮点数转换成字符串值， 然后再保存起转换所得的字符串值
</code></pre><h6 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>对于 int 编码的字符串对象来说， 如果我们向对象执行了一些命令， 使得这个对象保存的不再是整数值， 而是一个字符串值， 那么字符串对象的编码将从 int 变为 raw
因为 Redis 没有为 embstr 编码的字符串对象编写任何相应的修改程序 （只有 int 编码的字符串对象和 raw 编码的字符串对象有这些程序）， 所以 embstr 编码的字符串对象实际上是只读的： 当我们对 embstr 编码的字符串对象执行任何修改命令时， 程序会先将对象的编码从 embstr 转换成 raw ， 然后再执行修改命令； 因为这个原因， embstr 编码的字符串对象在执行修改命令之后， 总会变成一个 raw 编码的字符串对象    
</code></pre><h1 id="列表对象（REDIS-LIST-list）"><a href="#列表对象（REDIS-LIST-list）" class="headerlink" title="列表对象（REDIS_LIST | list）"></a>列表对象（REDIS_LIST | list）</h1><h4 id="压缩列表（ziplist）"><a href="#压缩列表（ziplist）" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h4><h4 id="双端链表（linkedlist）"><a href="#双端链表（linkedlist）" class="headerlink" title="双端链表（linkedlist）"></a>双端链表（linkedlist）</h4><h6 id="编码存储选择-1"><a href="#编码存储选择-1" class="headerlink" title="编码存储选择"></a>编码存储选择</h6><pre><code>当列表对象可以同时满足以下两个条件时， 列表对象使用 ziplist 编码：
    1、列表对象保存的所有字符串元素的长度都小于 64 字节；
    2、列表对象保存的元素数量小于 512 个
</code></pre><h1 id="哈希对象（REDIS-HASH-hash）"><a href="#哈希对象（REDIS-HASH-hash）" class="headerlink" title="哈希对象（REDIS_HASH | hash）"></a>哈希对象（REDIS_HASH | hash）</h1><h4 id="压缩列表（ziplist）-1"><a href="#压缩列表（ziplist）-1" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h4><h4 id="字典（hashtable）"><a href="#字典（hashtable）" class="headerlink" title="字典（hashtable）"></a>字典（hashtable）</h4><h6 id="编码转换-1"><a href="#编码转换-1" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>当哈希对象可以同时满足以下两个条件时， 哈希对象使用 ziplist 编码：
    1、哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节；
    2、哈希对象保存的键值对数量小于 512 个；
</code></pre><h1 id="集合对象（REDIS-SET-set）"><a href="#集合对象（REDIS-SET-set）" class="headerlink" title="集合对象（REDIS_SET | set）"></a>集合对象（REDIS_SET | set）</h1><h4 id="整数集合（intset）"><a href="#整数集合（intset）" class="headerlink" title="整数集合（intset）"></a>整数集合（intset）</h4><h4 id="字典（hashtable）-1"><a href="#字典（hashtable）-1" class="headerlink" title="字典（hashtable）"></a>字典（hashtable）</h4><h6 id="编码转换-2"><a href="#编码转换-2" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>当集合对象可以同时满足以下两个条件时， 对象使用 intset 编码：
    1、集合对象保存的所有元素都是整数值；
    2、集合对象保存的元素数量不超过 512 个；
</code></pre><h1 id="有序集合对象（REDIS-ZSET-zset）"><a href="#有序集合对象（REDIS-ZSET-zset）" class="headerlink" title="有序集合对象（REDIS_ZSET | zset）"></a>有序集合对象（REDIS_ZSET | zset）</h1><h4 id="压缩列表（ziplist）-2"><a href="#压缩列表（ziplist）-2" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h4><h4 id="跳跃表和字典（skiplist）"><a href="#跳跃表和字典（skiplist）" class="headerlink" title="跳跃表和字典（skiplist）"></a>跳跃表和字典（skiplist）</h4><h6 id="编码转换-3"><a href="#编码转换-3" class="headerlink" title="编码转换"></a>编码转换</h6><pre><code>当有序集合对象可以同时满足以下两个条件时， 对象使用 ziplist 编码：
    1、有序集合保存的元素数量小于 128 个；
    2、有序集合保存的所有元素成员的长度都小于 64 字节；
</code></pre><h6 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h6><pre><code>查看一个key的编码类型：OBJECT ENCODING key
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="字符创对象（REDIS-STRING-string）"><a href="#字符创对象（REDIS-STRING-string）" class="headerlink" title="字符创对象（REDIS_STRING | string）"></a>字符创对象（]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用命令]]></title>
    <link href="http://www.cxyteam.com/2017/12/28/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.cxyteam.com/2017/12/28/常用命令/</id>
    <published>2017-12-28T02:29:39.000Z</published>
    <updated>2018-03-22T08:32:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="linux杀死某个程序的多个进程"><a href="#linux杀死某个程序的多个进程" class="headerlink" title="linux杀死某个程序的多个进程"></a>linux杀死某个程序的多个进程</h1><pre><code>ps uax | grep &apos;you project process&apos; | grep -v grep |awk &apos;{print $2}&apos; | xargs kill
</code></pre><h1 id="mysql导出数据-数据量比较大，工具不好用的时候"><a href="#mysql导出数据-数据量比较大，工具不好用的时候" class="headerlink" title="mysql导出数据(数据量比较大，工具不好用的时候)"></a>mysql导出数据(数据量比较大，工具不好用的时候)</h1><pre><code>mysql -h 127.0.0.1 -uroot -P databases 3306 -e &quot;select count(*) from user;&quot;  &gt; /tmp/tetst.xls
</code></pre><h1 id="redis的auth命令，仅连接的时候输入一次，不需要每次重新输入"><a href="#redis的auth命令，仅连接的时候输入一次，不需要每次重新输入" class="headerlink" title="redis的auth命令，仅连接的时候输入一次，不需要每次重新输入"></a>redis的auth命令，仅连接的时候输入一次，不需要每次重新输入</h1><pre><code>redis-cli -h 127.0.0.1 -p 6379 -a &quot;auth_command&quot;
</code></pre><h1 id="no-space-left-on-disk"><a href="#no-space-left-on-disk" class="headerlink" title="no space left on disk"></a>no space left on disk</h1><pre><code>查看磁盘使用情况
    df

如果磁盘未满，查看inode是否满
    df -i        
</code></pre><h1 id="添加mysql用户和权限"><a href="#添加mysql用户和权限" class="headerlink" title="添加mysql用户和权限"></a>添加mysql用户和权限</h1><ol>
<li><p>选择mysql库<br> use mysql</p>
</li>
<li><p>添加用户<br> create user zhangsan identified by ‘zhangsan’;<br> 或者<br> insert into user (Host,User,Password) value(‘127.0.0.1’, ‘test’, password(‘123123’));<br> 或者<br> grant all privileges on database.* to test@’127.0.0.1’ identified by ‘test’;</p>
</li>
<li><p>刷新系统权限表<br> flush privileges;</p>
</li>
</ol>
<h1 id="查看进程句柄使用情况"><a href="#查看进程句柄使用情况" class="headerlink" title="查看进程句柄使用情况"></a>查看进程句柄使用情况</h1><pre><code>查看php-fpm（pid为192）句柄使用情况
lsof -n -p 192
</code></pre><h1 id="特定进程内运行的线程"><a href="#特定进程内运行的线程" class="headerlink" title="特定进程内运行的线程"></a>特定进程内运行的线程</h1><pre><code>top -H -p &lt;PID&gt;
</code></pre><h1 id="查找文件内容，并进行折行处理（直接用于mysql-in查询）"><a href="#查找文件内容，并进行折行处理（直接用于mysql-in查询）" class="headerlink" title="查找文件内容，并进行折行处理（直接用于mysql in查询）"></a>查找文件内容，并进行折行处理（直接用于mysql in查询）</h1><pre><code>grep &apos;WARN&apos; 1.txt  | grep &apos;exist&apos; | awk &apos;{print $7}&apos; | grep -v &quot;\\[&quot; | tr &quot;\n&quot; &quot;,&quot;
</code></pre><h1 id="根据特定标识符分割，再排序去重"><a href="#根据特定标识符分割，再排序去重" class="headerlink" title="根据特定标识符分割，再排序去重"></a>根据特定标识符分割，再排序去重</h1><pre><code>grep -v &apos;从kafka获得数据&apos; 1.txt  | awk &apos;{print $4}&apos; | awk -F : &apos;{print $2}&apos; | sort | uniq &gt; game.txt    
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="linux杀死某个程序的多个进程"><a href="#linux杀死某个程序的多个进程" class="headerlink" title="linux杀死某个程序的多个进程"></a>linux杀死某个程序的多个进程</h1><pre><code>ps uax]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis源码断点调试]]></title>
    <link href="http://www.cxyteam.com/2017/12/13/redis%E6%BA%90%E7%A0%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"/>
    <id>http://www.cxyteam.com/2017/12/13/redis源码断点调试/</id>
    <published>2017-12-13T12:37:19.000Z</published>
    <updated>2017-12-13T12:54:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redis断点调试的方式有两种"><a href="#redis断点调试的方式有两种" class="headerlink" title="redis断点调试的方式有两种"></a>redis断点调试的方式有两种</h1><h6 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h6><h6 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h6><h3 id="记录日志-1"><a href="#记录日志-1" class="headerlink" title="记录日志"></a>记录日志</h3><p><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;)</code></p>
<h5 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h5><h6 id="在t-string-c的getCommand方法中添加如下内容"><a href="#在t-string-c的getCommand方法中添加如下内容" class="headerlink" title="在t_string.c的getCommand方法中添加如下内容"></a>在t_string.c的getCommand方法中添加如下内容</h6><p><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;);
return ;</code></p>
<h6 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h6><p><code>make &amp;&amp; src/redis-server</code></p>
<h6 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h6><p><code>src/redis-cli</code></p>
<h6 id="查看结果（注意是在redis-server查看结果）"><a href="#查看结果（注意是在redis-server查看结果）" class="headerlink" title="查看结果（注意是在redis-server查看结果）"></a>查看结果（注意是在redis-server查看结果）</h6><p><code>get name</code></p>
<h6 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h6><pre><code>由于getCommand是定义的get命令的操作，因此get name命令能够触发redisLog记录日志
</code></pre><h3 id="printf-1"><a href="#printf-1" class="headerlink" title="printf"></a>printf</h3><h6 id="在t-string-c的getCommand方法中添加如下内容-1"><a href="#在t-string-c的getCommand方法中添加如下内容-1" class="headerlink" title="在t_string.c的getCommand方法中添加如下内容"></a>在t_string.c的getCommand方法中添加如下内容</h6><p><code>printf(&quot;hello world!&quot;)</code></p>
<h6 id="启动redis，连接redis，查看结果和上述流程一直"><a href="#启动redis，连接redis，查看结果和上述流程一直" class="headerlink" title="启动redis，连接redis，查看结果和上述流程一直"></a>启动redis，连接redis，查看结果和上述流程一直</h6><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><h6 id="每次操作完成之后都要进行编译，并重新启动服务端和连接redis"><a href="#每次操作完成之后都要进行编译，并重新启动服务端和连接redis" class="headerlink" title="每次操作完成之后都要进行编译，并重新启动服务端和连接redis"></a>每次操作完成之后都要进行编译，并重新启动服务端和连接redis</h6><h6 id="执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢"><a href="#执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢" class="headerlink" title="执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢"></a>执行命令的时候最好加上路径，万一环境变量中有全局的redis-cli呢</h6><h6 id="redisLog在有些文件中不能使用，例如sds-c（也许是我水平有限，反正我是跳过了）"><a href="#redisLog在有些文件中不能使用，例如sds-c（也许是我水平有限，反正我是跳过了）" class="headerlink" title="redisLog在有些文件中不能使用，例如sds.c（也许是我水平有限，反正我是跳过了）"></a>redisLog在有些文件中不能使用，例如sds.c（也许是我水平有限，反正我是跳过了）</h6><h6 id="printf打sizeof类型，使用lu参数。printf-“默认长度：-lu”-sizeof-struct-sdshdr"><a href="#printf打sizeof类型，使用lu参数。printf-“默认长度：-lu”-sizeof-struct-sdshdr" class="headerlink" title="printf打sizeof类型，使用lu参数。printf(“默认长度：%lu”, sizeof(struct sdshdr));"></a>printf打sizeof类型，使用lu参数。printf(“默认长度：%lu”, sizeof(struct sdshdr));</h6>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="redis断点调试的方式有两种"><a href="#redis断点调试的方式有两种" class="headerlink" title="redis断点调试的方式有两种"></a>redis断点调试的方式有两种</h1><h6 id="记录日志"><a href]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis用到的函数]]></title>
    <link href="http://www.cxyteam.com/2017/12/12/redis%E7%94%A8%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://www.cxyteam.com/2017/12/12/redis用到的函数/</id>
    <published>2017-12-12T15:18:48.000Z</published>
    <updated>2018-01-04T08:09:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h1><pre><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;)
触发记录hello world日志
例如：在t_string.c的文件中的getCommand方法中添加：redisLog(REDIS_WARNING, &quot;hello world!&quot;);return ;
当你启动redis-server后，在客户端，执行get name命令，会在redis-server终端输出&quot;hello world！&quot;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h1><pre><code>redisLog(REDIS_WARNING, &quot;hello world!&quot;)
触发记录]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装laravel环境]]></title>
    <link href="http://www.cxyteam.com/2017/12/04/%E5%AE%89%E8%A3%85laravel%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.cxyteam.com/2017/12/04/安装laravel环境/</id>
    <published>2017-12-04T08:46:07.000Z</published>
    <updated>2018-01-30T11:00:06.000Z</updated>
    <content type="html"><![CDATA[<h6 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h6><pre><code>在mac本地利用homebrew，使用Valet方式安装laravel
</code></pre><h1 id="更新brew"><a href="#更新brew" class="headerlink" title="更新brew"></a>更新brew</h1><pre><code>brew update
</code></pre><h1 id="查看brew-service"><a href="#查看brew-service" class="headerlink" title="查看brew service"></a>查看brew service</h1><pre><code>brew services list
</code></pre><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><pre><code>使用brew安装php，mysql，redis
</code></pre><h1 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h1><pre><code>curl -sS https://getcomposer.org/installer | php 
失败尝试：php -r &quot;readfile(&apos;https://getcomposer.org/installer&apos;);&quot; | php
全局有效：mv composer.phar /usr/local/bin/composer
验证：composer --version
</code></pre><h1 id="通过composer安装valet"><a href="#通过composer安装valet" class="headerlink" title="通过composer安装valet"></a>通过composer安装valet</h1><pre><code>添加环境变量：
    PATH=$PATH:~/.composer/vendor/bin

修改composer源（默认的是国外的，需要翻墙）
    1、查询composer配置文件所在位置
        composer config -l -g

    2、查看显示的home选项（就是composer所在配置的目录）
        [home] /Users/sunnysmilez/.composer

    3、在配置文件添加下载路径
        vim /Users/sunnysmilez/.composer/config.json         
        内容如下：
            {
                &quot;config&quot;: {
                },
                &quot;repositories&quot;: {
                    &quot;packagist&quot;: {
                        &quot;type&quot;: &quot;composer&quot;,
                        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;
                    }
                }
            }

下载安装：valet
    composer global require laravel/valet
</code></pre><h1 id="安装valet"><a href="#安装valet" class="headerlink" title="安装valet"></a>安装valet</h1><pre><code>安装：
    valet install

测试：（127.0.0.1会响应所有*.dev的域名）
    ping foobar.dev
</code></pre><h1 id="设置code目录"><a href="#设置code目录" class="headerlink" title="设置code目录"></a>设置code目录</h1><pre><code>cd code
valet park
</code></pre><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><pre><code>composer create-project laravel/laravel=5.2.* hello --prefer-dist

不知道为什么反正我的laravel new hello 不能使用
项目使用的5.2的版本，如果你需要更高版本请自行更改
</code></pre><h1 id="启动valet"><a href="#启动valet" class="headerlink" title="启动valet"></a>启动valet</h1><pre><code>valet start
</code></pre><h1 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h1><pre><code>http://hello.dev/
</code></pre><h1 id="valet补充"><a href="#valet补充" class="headerlink" title="valet补充"></a>valet补充</h1><pre><code>valet start         启动valet
valet stop          停止valet
valet restart       重启valet
valet share         共享项目（比较有意思）
valet uninstall     卸载valet
valet park          设置代码目录
valet paths         查看代码目录
等
</code></pre><h1 id="各种错误"><a href="#各种错误" class="headerlink" title="各种错误"></a>各种错误</h1><h3 id="composer错误"><a href="#composer错误" class="headerlink" title="composer错误"></a>composer错误</h3><pre><code>类似此种下载不成功的，直接替换composer源
[Composer\Downloader\TransportException]
      The &quot;http://packagist.org/p/laravel/valet%2439296a873ae09b56ed010fd93604f08291f6223ad85ddf3bc5cb02af8a4035f3.json&quot; file could not be downloaded (HTTP/1.1 302 Found)

[Composer\Downloader\TransportException]
       Your configuration does not allow connections to http://pkg.phpcomposer.com/repo/packagist/packages.json. See https://getcomposer.org/doc/06-config.md#secure-http for details. 
[Composer\Downloader\TransportException]
      The &quot;http://pkg.phpcomposer.com/repo/packagist/packages.json&quot; file could not be downloaded (HTTP/1.1 301 Moved Permanently)

[Composer\Downloader\TransportException]
 The &quot;https://pkg.phpcomposer.com/repo/packagist/packages.json&quot; file could not be downloaded (HTTP/1.1 404 Not Found)
</code></pre><h3 id="valet-install错误"><a href="#valet-install错误" class="headerlink" title="valet install错误"></a>valet install错误</h3><pre><code>Brew was unable to install [dnsmasq].
    手动安装dnsmasq：brew install dnsmasq（报下面的错误）

Error: Xcode alone is not sufficient on Sierra.
    执行：xcode-select --install

执行：valet install       
</code></pre><h3 id="valet权限错误（在安装的过程中使用了sudo）"><a href="#valet权限错误（在安装的过程中使用了sudo）" class="headerlink" title="valet权限错误（在安装的过程中使用了sudo）"></a>valet权限错误（在安装的过程中使用了sudo）</h3><pre><code>Warning: file_get_contents(/var/root/.valet/config.json): failed to open stream: Permission denied in /Users/Username/.composer/vendor/laravel/valet/server.php on line 23

Warning: Invalid argument supplied for foreach() in /Users/Username/.composer/vendor/laravel/valet/server.php on line 47
404 - Not Found

修改权限为当前用户：
    cd ~/.composer/
    sudo chown -R $(whoami) vendor
</code></pre><h1 id="google自动跳转https"><a href="#google自动跳转https" class="headerlink" title="google自动跳转https"></a>google自动跳转https</h1><pre><code>Chrome 于 V63 版本起会将 .dev 域名强制转换为 HTTPS。
所以最简单的办法是：切换域名
 valet domain test
 使用hello.test进行访问
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h6 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h6><pre><code>在mac本地利用homebrew，使用Valet方式安装laravel
</code></pre><h1 i]]>
    </summary>
    
      <category term="laravel" scheme="http://www.cxyteam.com/tags/laravel/"/>
    
      <category term="laravel" scheme="http://www.cxyteam.com/categories/laravel/"/>
    
  </entry>
  
</feed>