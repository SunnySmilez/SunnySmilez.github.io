<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[狂奔的菜鸟]]></title>
  <subtitle><![CDATA[当你的实力支撑不起你的野心的时候，静下心来好好学习吧！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.cxyteam.com/"/>
  <updated>2016-01-06T02:45:12.000Z</updated>
  <id>http://www.cxyteam.com/</id>
  
  <author>
    <name><![CDATA[狂奔的菜鸟]]></name>
    <email><![CDATA[phpchengxuyuan@sina.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2015年个人总结]]></title>
    <link href="http://www.cxyteam.com/2016/01/05/2015%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://www.cxyteam.com/2016/01/05/2015年个人总结/</id>
    <published>2016-01-05T12:37:22.000Z</published>
    <updated>2016-01-06T02:45:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="阅读">阅读</h1><ul>
<li><p>选书：</p>
<ul>
<li>先选择大概一个学习的方向，比如说mysql，redis，linux等</li>
<li>再选择典型性的书籍（每个方面都会有几本特别经典的书籍）</li>
</ul>
</li>
<li><p>阅读：</p>
<ul>
<li>先查阅目录，思考为什么会是这些章节，这个技术大概涵盖哪些内容</li>
<li>再选择阅读的章节，思考作者写作思路，为什么先写这块知识，再写这块，有什么必然联系</li>
<li>最后读的时候碰到不懂的尽量的去拓展阅读</li>
</ul>
</li>
<li><p>知识点的归纳总结：</p>
<ul>
<li>实战－再项目中用到学的技术点</li>
<li>经验－看看别人的应用场景及案例，以及踩过的坑</li>
<li>分享－把学习到的东西告诉人家，验证学习成果</li>
<li>交流－加几个相关方面微信或qq群，看看志同道合的人都在聊哪些知识点</li>
</ul>
</li>
<li><p>建议：</p>
<ul>
<li>不要断续的阅读，成章成本的阅读，尽量一个知识块在一个连续的时间阅读完</li>
<li>看到一本书，如果不能引发你的思考，那就停止阅读</li>
<li>对于好的书籍反复阅读</li>
</ul>
</li>
</ul>
<h1 id="技术及书籍">技术及书籍</h1><p>整体来说在技术成长比较缓慢，上半年有迷茫期，下半年技术有明确的方向。书籍阅读面及阅读量都太少。对行业的关注技实时新闻的关注有待加强。</p>
<ul>
<li><p>1月-4月（看完几乎没有获得什么，没有任何的思考及总结）<br>看了比较多的零散的文章，博客（没有固定方向，一般有人推荐和分享都会去看），而且没有总结（需要提高的地方）<br><a href="http://book.douban.com/subject/25942507/" title="参与感" target="_blank" rel="external">参与感</a><br><a href="http://book.douban.com/subject/6021440/" title="黑客与画家" target="_blank" rel="external">黑客与画家</a><br><a href="http://book.douban.com/subject/4262627/" title="重构" target="_blank" rel="external">重构</a><br><a href="http://book.douban.com/subject/5442024/" title="代码整洁之道" target="_blank" rel="external">代码整洁之道</a></p>
</li>
<li><p>5月-9月（反复的在阅读，最后在笔记本上记录相关重点知识整理了部分知识点的ppt－最好记录到博客，整理ppt便于分享及知识点提炼）<br><a href="http://book.douban.com/subject/24708143/" title="Mysql技术内幕－InnoDB存储引擎" target="_blank" rel="external">Mysql技术内幕－InnoDB存储引擎</a><br><a href="http://book.douban.com/subject/23008813/" title="高性能Mysql" target="_blank" rel="external">高性能Mysql</a></p>
</li>
<li><p>10月-11月（整理了ppt做了分享，分享效果不怎么样，需要改进）<br><a href="http://book.douban.com/subject/24522045/" title="Redis入门指南" target="_blank" rel="external">Redis入门指南</a><br><a href="http://book.douban.com/subject/25900156/" title="Redis设计与实现" target="_blank" rel="external">Redis设计与实现</a><br><a href="http://book.douban.com/subject/26612779/" title="Redis实战" target="_blank" rel="external">Redis实战</a></p>
</li>
<li><p>12月（尝试着整理知识点到博客）<br><a href="http://book.douban.com/subject/3519360/" title="Shell脚本学习指南" target="_blank" rel="external">Shell脚本学习指南</a></p>
</li>
</ul>
<h1 id="思维">思维</h1><p>缺乏安全意识，全局思考，横向，纵向拓展思考，几乎处于不会思考的状态，更多的思考停留在表面的为什么，简单的追求原因。没有深入的思考问题产生的本质，以及跳出问题本身的思考。思维局限在一个小的圈子里面。</p>
<h1 id="业务">业务</h1><ul>
<li><p>3月-8月 蜜银项目，熟悉理财产品的录入，上架，用户充值，提现，购买，计息，兑付，对账，异常数据处理等业务。思考的方向是技术点实现的难易程度，以及后期的重构，代码的规范及抽象，模块的整理。</p>
</li>
<li><p>9月-12月 钱隆项目，业务点与蜜银相似，属于快速封闭开发项目。思考的方向更多的偏向流程，用户体验，及业务场景</p>
</li>
</ul>
<h1 id="目标">目标</h1><ul>
<li><p>阅读：增加阅读的时间，不局限于技术类书籍，增大阅读的广度，阅读完之后都做总结博客</p>
</li>
<li><p>技术：主要偏向运维方向（搭建高可用高性能系统），及技术思路拓展</p>
<ul>
<li>shell脚本学习</li>
<li>python语言学习</li>
<li>初中级运维知识学习，偏系统搭建，及性能问题</li>
</ul>
</li>
<li><p>业务：多关注行业内的动态及政策，多思考业务的存在原因</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="阅读">阅读</h1><ul>
<li><p>选书：</p>
<ul>
<li>先选择大概一个学习的方向，比如说mysql，redis，linux等</li>
<li>再选择典型性的书籍（每个方面都会有几本特别经典的书籍）</li>
</ul>
</li>
<li]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[wc的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/29/wc%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/29/wc的使用/</id>
    <published>2015-12-29T02:05:34.000Z</published>
    <updated>2015-12-29T02:05:34.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fmt的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/29/fmt%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/29/fmt的使用/</id>
    <published>2015-12-29T02:05:16.000Z</published>
    <updated>2015-12-29T02:05:16.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[uniq的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/29/uniq%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/29/uniq的使用/</id>
    <published>2015-12-29T01:41:50.000Z</published>
    <updated>2015-12-29T01:46:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="uniq的使用场景">uniq的使用场景</h1><h1 id="uniq的参数说明">uniq的参数说明</h1><pre><code>用法：uniq [选项]... [文件]
从输入文件或者标准输入中筛选相邻的匹配行并写入到输出文件或标准输出。

不附加任何选项时匹配行将在首次出现处被合并。

长选项必须使用的参数对于短选项时也是必需使用的。
  -<span class="ruby">c, --count        在每行前加上表示相应行目出现次数的前缀编号
</span>  -<span class="ruby">d, --repeated    只输出重复的行
</span>  -<span class="ruby"><span class="constant">D</span>, --all-repeated[=delimit-method    显示所有重复的行
</span>            delimit-method={none(default),prepend,separate}
            以空行为界限
  -<span class="ruby">f, --skip-fields=<span class="constant">N</span>    比较时跳过前<span class="constant">N</span> 列
</span>  -<span class="ruby">i, --ignore-<span class="keyword">case</span>    在比较的时候不区分大小写
</span>  -<span class="ruby">s, --skip-chars=<span class="constant">N</span>    比较时跳过前<span class="constant">N</span> 个字符
</span>  -<span class="ruby">u, --unique        只显示唯一的行
</span>  -<span class="ruby">z, --zero-terminated    使用<span class="string">'\0'</span>作为行结束符，而不是新换行
</span>  -<span class="ruby">w, --check-chars=<span class="constant">N</span>    对每行第<span class="constant">N</span> 个字符以后的内容不作对照
</span>      -<span class="ruby">-help        显示此帮助信息并退出
</span>      -<span class="ruby">-version        显示版本信息并退出
</span>
若域中为先空字符(通常包括空格以及制表符)，然后非空字符，域中字符前的空字符将被跳过。

提示：uniq 不会检查重复的行，除非它们是相邻的行。
如果您想先对输入排序，使用没有uniq 的"sort -u"。
同时，比较服从"LC_COLLATE" 变量所指定的规则。
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="uniq的使用场景">uniq的使用场景</h1><h1 id="uniq的参数说明">uniq的参数说明</h1><pre><code>用法：uniq [选项]... [文件]
从输入文件或者标准输入中筛选相邻的匹配行并写入到输出文件或标准输出。

不附加任何选]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sort的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/29/sort%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/29/sort的使用/</id>
    <published>2015-12-29T01:32:36.000Z</published>
    <updated>2015-12-29T01:35:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="sort使用场景">sort使用场景</h1><pre><code>用法：sort [选项]... [文件]...
　或：sort [选项]... --files0-from=F
串联排序所有指定文件并将结果写到标准输出。

长选项必须使用的参数对于短选项时也是必需使用的。
排序选项：

  -<span class="ruby">b, --ignore-leading-blanks    忽略前导的空白区域
</span>  -<span class="ruby">d, --dictionary-order    只考虑空白区域和字母字符
</span>  -<span class="ruby">f, --ignore-<span class="keyword">case</span>        忽略字母大小写
</span>  -<span class="ruby">g, --general-numeric-sort    按照常规数值排序
</span>  -<span class="ruby">i, --ignore-nonprinting    只排序可打印字符
</span>  -<span class="ruby"><span class="constant">M</span>, --month-sort        比较 (未知) &lt; <span class="string">"一月"</span> &lt; ... &lt; <span class="string">"十二月"</span>
</span>                在LC_ALL=C 时为(unknown) &lt; `JAN' &lt; ... &lt; `DEC'
  -<span class="ruby">h, --human-numeric-sort    使用易读性数字(例如： <span class="number">2</span>K <span class="number">1</span>G)
</span>  -<span class="ruby">n, --numeric-sort        根据字符串数值比较
</span>  -<span class="ruby"><span class="constant">R</span>, --random-sort        根据随机hash 排序
</span>      -<span class="ruby">-random-source=文件    从指定文件中获得随机字节
</span>  -<span class="ruby">r, --reverse            逆序输出排序结果
</span>      -<span class="ruby">-sort=<span class="constant">WORD</span>        按照<span class="constant">WORD</span> 指定的格式排序：
</span>                    一般数字-g，高可读性-h，月份-M，数字-n，
                    随机-R，版本-V
  -<span class="ruby"><span class="constant">V</span>, --version-sort        在文本内进行自然版本排序
</span>
其他选项：

      -<span class="ruby">-batch-size=<span class="constant">NMERGE</span>    一次最多合并<span class="constant">NMERGE</span> 个输入；如果输入更多
</span>                    则使用临时文件
  -<span class="ruby">c, --check, --check=diagnose-first    检查输入是否已排序，若已有序则不进行操作
</span>  -<span class="ruby"><span class="constant">C</span>, --check=quiet, --check=silent    类似-c，但不报告第一个无序行
</span>      -<span class="ruby">-compress-program=程序    使用指定程序压缩临时文件；使用该程序
</span>                    的-d 参数解压缩文件
      -<span class="ruby">-files<span class="number">0</span>-from=文件    从指定文件读取以<span class="constant">NUL</span> 终止的名称，如果该文件被
</span>                    指定为"-"则从标准输入读文件名
  -<span class="ruby">k, --key=位置<span class="number">1</span>[,位置<span class="number">2</span>]    在位置<span class="number">1</span> 开始一个key，在位置<span class="number">2</span> 终止(默认为行尾)
</span>  -<span class="ruby">m, --merge            合并已排序的文件，不再进行排序
</span>  -<span class="ruby">o, --output=文件        将结果写入到文件而非标准输出
</span>  -<span class="ruby">s, --stable            禁用last-resort 比较以稳定比较算法
</span>  -<span class="ruby"><span class="constant">S</span>, --buffer-size=大小    指定主内存缓存大小
</span>  -<span class="ruby">t, --field-separator=分隔符    使用指定的分隔符代替非空格到空格的转换
</span>  -<span class="ruby"><span class="constant">T</span>, --temporary-directory=目录    使用指定目录而非<span class="variable">$TMPDIR</span> 或/tmp 作为
</span>                    临时目录，可用多个选项指定多个目录
  -<span class="ruby">u, --unique        配合-c，严格校验排序；不配合-c，则只输出一次排序结果
</span>  -<span class="ruby">z, --zero-terminated    以<span class="number">0</span> 字节而非新行作为行尾标志
</span>      -<span class="ruby">-help        显示此帮助信息并退出
</span>      -<span class="ruby">-version        显示版本信息并退出
</span>
POS 是F[.C][OPTS]，F 代表域编号，C 是域中字母的位置，F 和C 均从1开始计数
如果没有有效的-t 或-b 选项存在，则从前导空格后开始计数字符。OPTS 是一个或多个
由单个字母表示的顺序选项，以此覆盖此key 的全局顺序设置。如果没有指定key 则
将其整个行。

指定的大小可以使用以下单位之一：
内存使用率% 1%，b 1、K 1024 (默认)，M、G、T、P、E、Z、Y 等依此类推。

如果不指定文件，或者文件为"-"，则从标准输入读取数据。
</code></pre><h1 id="sort参数说明">sort参数说明</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="sort使用场景">sort使用场景</h1><pre><code>用法：sort [选项]... [文件]...
　或：sort [选项]... --files0-from=F
串联排序所有指定文件并将结果写到标准输出。

长选项必须使用的参数对于短选项时也是必]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[join的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/26/join%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/26/join的使用/</id>
    <published>2015-12-26T02:17:46.000Z</published>
    <updated>2015-12-27T09:59:11.000Z</updated>
    <content type="html"><![CDATA[<h1 id="join的使用案例">join的使用案例</h1><p>1.文件内容<br>cat month_cn.txt</p>
<pre><code>1       一月
2       二月
3       三月
4       四月
5       五月
6       六月
7       七月
8       八月
9       九月
10      十月
11      十一月
12      十二月
13      十三月，故意的
</code></pre><p>2.文件内容<br>cat month_en.txt</p>
<pre><code>1       January
2       February
3       March
4       April
5       May
6       June
7       July
8       August
9       September
10      October
11      November
12      December
14      MonthUnknown
</code></pre><p>3.内连接（指定关联行数）<br>join month_cn.txt month_en.txt<br>join -j 1 month_cn.txt month_en.txt(<code>以第一行作为匹配字段</code>)<br>join -1 1 -2 1 month_cn.txt month_en.txt(<code>第一个文件的第一行和第二个文件的第一行进行匹配</code>)</p>
<pre><code>1 一月 January
2 二月 February
3 三月 March
4 四月 April
5 五月 May
6 六月 June
7 七月 July
8 八月 August
9 九月 September
10 十月 October
11 十一月 November
12 十二月 December
</code></pre><p>4.左连接（以全面文件为主去匹配后面文件的内容）<br>join -a1 month_cn.txt month_en.txt</p>
<pre><code>1 一月 January
2 二月 February
3 三月 March
4 四月 April
5 五月 May
6 六月 June
7 七月 July
8 八月 August
9 九月 September
10 十月 October
11 十一月 November
12 十二月 December
13 十三月，故意的
</code></pre><p>5.右连接<br>join -a2 month_cn.txt month_en.txt</p>
<pre><code>1 一月 January
2 二月 February
3 三月 March
4 四月 April
5 五月 May
6 六月 June
7 七月 July
8 八月 August
9 九月 September
10 十月 October
11 十一月 November
12 十二月 December
14 MonthUnknown
</code></pre><p>6.全连接<br>join -a1 -a2 month_cn.txt month_en.txt</p>
<pre><code>1 一月 January
2 二月 February
3 三月 March
4 四月 April
5 五月 May
6 六月 June
7 七月 July
8 八月 August
9 九月 September
10 十月 October
11 十一月 November
12 十二月 December
13 十三月，故意的
14 MonthUnknown
</code></pre><p>7.指定输出内容<br>join -o 1.1 1.2 2.2 month_cn.txt month_en.txt</p>
<pre><code>1 一月 January
2 二月 February
3 三月 March
4 四月 April
5 五月 May
6 六月 June
7 七月 July
8 八月 August
9 九月 September
10 十月 October
11 十一月 November
12 十二月 December
</code></pre><p>8.前面文件存在，后面文件不存在的内容<br>join -v 1  month_cn.txt month_en.txt</p>
<pre><code>13 十三月，故意的
</code></pre><h1 id="join参数说明">join参数说明</h1><pre><code>用法：join [选项]... 文件1 文件2(找出两个文件中，指定栏位内容相同的行，并加以合并，再输出到标准输出设备。)
针对每一对具有相同内容的输入行，整合为一行写到标准输出，
默认的内容连接区块是由第一个空白符代表的分界符号。当文件1
或文件2 都被指定为"-"时，程序将从标准输入读取数据。

  -<span class="ruby">a  文件编号        文件编号的值可以是<span class="number">1</span> 或<span class="number">2</span>，分别对应文件<span class="number">1</span> 和 文件<span class="number">2</span>。
</span>                          此选项用于根据指定文件编号输出不成对的行目。
  -<span class="ruby">e 字符            将缺失的输入区块替换为指定字符
</span>  -<span class="ruby">i, --ignore-<span class="keyword">case</span>     比较时忽略大小写
</span>  -<span class="ruby">j 域         等于<span class="string">"-1 域 -2 域"</span>
</span>  -<span class="ruby">o 格式         按照指定格式构造输出行
</span>  -<span class="ruby">t 字符         使用指定字符作为输入和输出的分隔符
</span>  -<span class="ruby">v 文件编号            类似 -a 文件编号，但禁止组合输出行
</span>  -<span class="ruby"><span class="number">1</span> 域              在文件<span class="number">1</span> 的此域组合
</span>  -<span class="ruby"><span class="number">2</span> 域              在文件<span class="number">2</span> 的此域组合
</span>  -<span class="ruby">-check-order         检查输入行是否正确排序，即使所有输入行均是成对的
</span>  -<span class="ruby">-nocheck-order       不检查输入是否正确排序
</span>      -<span class="ruby">-help        显示此帮助信息并退出
</span>      -<span class="ruby">-version        显示版本信息并退出
</span>
除非使用了"-t 字符串" 选项，否则前导空格分隔的域将被忽略，如果指定了字符串，
则使用指定字符串分隔任意的域并从1 开始计数的域编号。可以指定的格式是由一个
或多个逗号活空格所分隔的描述，其形式为"文件编号.域"或者"0"。默认的
格式输出合并后的域、文件1 和文件2 剩下的域，均由该指定字符串分隔。
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="join的使用案例">join的使用案例</h1><p>1.文件内容<br>cat month_cn.txt</p>
<pre><code>1       一月
2       二月
3       三月
4       四月
5       五月
6      ]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cut的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/24/cut%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/24/cut的使用/</id>
    <published>2015-12-24T02:48:06.000Z</published>
    <updated>2015-12-27T09:54:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="cut使用案例">cut使用案例</h1><pre><code>1.按字节切割
tail -<span class="keyword">n</span> 1 /etc/passwd | cut -b 1-10,15-20（获取密码文件下的第1到10个字符以及第15到20个字符）`一个汉字算三个字节`

2.指定分隔符切割
tail -<span class="keyword">n</span> 1 /etc/passwd | cut -<span class="keyword">d</span> : -f 1,5（以:分割，获取第一个和第五个域）
<span class="keyword">ls</span> -<span class="keyword">l</span> | cut -<span class="keyword">d</span> <span class="string">" "</span> -f 1（以空格分割，取第一个域得字符）

3.按字符切割
<span class="keyword">ls</span> -<span class="keyword">l</span> | cut -c 1-10（获取文件的第一个字符到第十个字符）`中文字符和空格都算一个字符`
</code></pre><h1 id="cut参数说明">cut参数说明</h1><pre><code>用法：cut [选项]... [文件]...
从每个文件中输出指定部分到标准输出。

长选项必须使用的参数对于短选项时也是必需使用的。
  -<span class="ruby">b, --bytes=列表        只选中指定的这些字节
</span>  -<span class="ruby">c, --characters=列表        只选中指定的这些字符
</span>  -<span class="ruby">d, --delimiter=分界符    使用指定分界符代替制表符作为区域分界
</span>  -<span class="ruby">f, --fields=<span class="constant">LIST</span>     选择部分字段，如果不制定－s分隔符的参数，直接打印出没有不包含分隔符的字符
</span>
  -<span class="ruby">n                     -<span class="symbol">b:</span> 不分裂的多字节字符和-b一起使用(<span class="string">`汉字是三个字节，如果直选中一个字节，也不进行分割，直接显示汉字`</span>)
</span>      -<span class="ruby">-complement        补全选中的字节、字符或域
</span>  -<span class="ruby">s, --only-delimited        不打印没有包含分界符的行
</span>      -<span class="ruby">-output-delimiter=字符串    使用指定的字符串作为输出分界符，默认采用输入
</span>                的分界符
      -<span class="ruby">-help        显示此帮助信息并退出
</span>      -<span class="ruby">-version        显示版本信息并退出
</span>
仅使用f -b, -c 或-f 中的一个。每一个列表都是专门为一个类别作出的，或者您可以用逗号隔
开要同时显示的不同类别。您的输入顺序将作为读取顺序，每个仅能输入一次。
每种参数格式表示范围如下：
    N    从第1 个开始数的第N 个字节、字符或域
    N-    从第N 个开始到所在行结束的所有字符、字节或域
    N-M    从第N 个开始到第M 个之间(包括第M 个)的所有字符、字节或域
    -<span class="ruby"><span class="constant">M</span>    从第<span class="number">1</span> 个开始到第<span class="constant">M</span> 个之间(包括第<span class="constant">M</span> 个)的所有字符、字节或域
</span>
当没有文件参数，或者文件不存在时，从标准输入读取
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="cut使用案例">cut使用案例</h1><pre><code>1.按字节切割
tail -<span class="keyword">n</span> 1 /etc/passwd | cut -b 1-10,15-20（获取密码文件下的第1到10个字符以及第15]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[awk的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/24/awk%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/24/awk的使用/</id>
    <published>2015-12-24T01:42:03.000Z</published>
    <updated>2015-12-28T13:33:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="awk使用案例">awk使用案例</h1><pre><code>1.以每一行为输入，指定分隔符，输出指定域
    tail -<span class="keyword">n</span> 10 <span class="keyword">test</span>.txt | awk -F ' '  '{<span class="keyword">print</span> <span class="label">$1</span><span class="string">",\t"</span><span class="label">$2}</span>'（以空格为分隔符，输出第一个域与第二个域并以,和<span class="keyword">tab</span>连接）

2.在输出的首尾添加内容
<span class="keyword">cat</span> /etc/passwd |awk  -F ':'  'BEGIN {<span class="keyword">print</span> <span class="string">"name,shell"</span>}  {<span class="keyword">print</span> <span class="label">$1</span><span class="string">","</span><span class="label">$7}</span> END {<span class="keyword">print</span> <span class="string">"blue,/bin/nosh"</span>}'（显示/etc/passwd的账户和账户对应的<span class="keyword">shell</span>,而账户与<span class="keyword">shell</span>之间以逗号分割,而且在所有行添加列名name,<span class="keyword">shell</span>,在最后一行添加<span class="string">"blue,/bin/nosh"</span>）

3.搜索
awk -F ':' '/hello/{<span class="keyword">print</span> <span class="label">$1}</span>' <span class="keyword">test</span>.txt（搜索<span class="keyword">test</span>.txt中的包含hello的行,并以':'为分隔符，输出第一个域）

4.awk的环境变量
awk  -F ':'  '{<span class="keyword">print</span> <span class="string">"filename:"</span> FILENAME <span class="string">",linenumber:"</span> NR <span class="string">",columns:"</span> NF <span class="string">",linecontent:"</span><span class="label">$0}</span>' /etc/passwd（统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:）
awk  -F ':'  '{printf(<span class="string">"filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n"</span>,FILENAME,NR,NF,<span class="label">$0</span>)}' /etc/passwd

5.awk编程
awk '{<span class="keyword">count</span>++;<span class="keyword">print</span> <span class="label">$0</span>;} END{<span class="keyword">print</span> <span class="string">"user count is "</span>, <span class="keyword">count</span>}' /etc/passwd（统计用户总数）
<span class="keyword">ls</span> -<span class="keyword">l</span> | awk 'BEGIN {size=0} {size=size+<span class="label">$5}</span> END {<span class="keyword">print</span> <span class="string">"size is "</span>size}'（统计文件夹大小）
</code></pre><h1 id="awk参数说明">awk参数说明</h1><pre><code>用法: awk [POSIX 或 GNU 风格选项] -f 脚本文件 [--] 文件 ...
用法: awk [POSIX 或 GNU 风格选项] [--] '程序' 文件 ...
POSIX 选项:             GNU 长选项:
    -<span class="ruby">f 脚本文件        --file=脚本文件
</span>    -<span class="ruby"><span class="constant">F</span> fs            --field-separator=fs
</span>    -<span class="ruby">v var=val        --assign=var=val
</span>    -<span class="ruby">m[fr] val
</span>    -<span class="ruby"><span class="constant">O</span>            --optimize
</span>    -<span class="ruby"><span class="constant">W</span> compat        --compat
</span>    -<span class="ruby"><span class="constant">W</span> copyleft        --copyleft
</span>    -<span class="ruby"><span class="constant">W</span> copyright        --copyright
</span>    -<span class="ruby"><span class="constant">W</span> dump-variables[=file]    --dump-variables[=file]
</span>    -<span class="ruby"><span class="constant">W</span> exec=file        --exec=file
</span>    -<span class="ruby"><span class="constant">W</span> gen-po        --gen-po
</span>    -<span class="ruby"><span class="constant">W</span> help            --help
</span>    -<span class="ruby"><span class="constant">W</span> lint[=fatal]        --lint[=fatal]
</span>    -<span class="ruby"><span class="constant">W</span> lint-old        --lint-old
</span>    -<span class="ruby"><span class="constant">W</span> non-decimal-data    --non-decimal-data
</span>    -<span class="ruby"><span class="constant">W</span> profile[=file]    --profile[=file]
</span>    -<span class="ruby"><span class="constant">W</span> posix        --posix
</span>    -<span class="ruby"><span class="constant">W</span> re-interval        --re-interval
</span>    -<span class="ruby"><span class="constant">W</span> source=program-text    --source=program-text
</span>    -<span class="ruby"><span class="constant">W</span> traditional        --traditional
</span>    -<span class="ruby"><span class="constant">W</span> usage        --usage
</span>    -<span class="ruby"><span class="constant">W</span> use-lc-numeric    --use-lc-numeric
</span>    -<span class="ruby"><span class="constant">W</span> version        --version
</span>
awk的环境变量
    ARGC               命令行参数个数
    ARGV               命令行参数排列
    ENVIRON            支持队列中系统环境变量的使用
    FILENAME           awk浏览的文件名
    FNR                浏览文件的记录数
    FS                 设置输入域分隔符，等价于命令行 -F选项
    NF                 浏览记录的域的个数
    NR                 已读的记录数
    OFS                输出域分隔符
    ORS                输出记录分隔符
    RS                 控制记录分隔符
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="awk使用案例">awk使用案例</h1><pre><code>1.以每一行为输入，指定分隔符，输出指定域
    tail -<span class="keyword">n</span> 10 <span class="keyword">test</span>.]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sed的使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/24/sed%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/24/sed的使用/</id>
    <published>2015-12-24T01:41:56.000Z</published>
    <updated>2015-12-27T09:47:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="sed使用场景">sed使用场景</h1><pre><code>1.获取指定行数
sed -<span class="keyword">n</span> '1,2p' <span class="keyword">test</span>.txt（查看第1到2行的内容）
sed -<span class="keyword">n</span> '1,<span class="label">$p</span>' <span class="keyword">test</span>.txt（查看第1行到文件末尾的内容）
sed -<span class="keyword">n</span> '2,3!'p <span class="keyword">test</span>.txt（查看不在第2到3行的内容）
sed -<span class="keyword">n</span> '4q;2,3p' <span class="keyword">test</span>.txt（读取第2到3行的内容，速度更快）

2.打印包含某字符的行
sed -<span class="keyword">n</span> '/hello/p' <span class="keyword">test</span>.txt（查看包含hello的行）

3.删除行
sed '/^#/<span class="keyword">d</span>' <span class="keyword">test</span>.txt（删除空行）
sed '/hello/<span class="keyword">d</span>' <span class="keyword">test</span>.txt（删除包含hello的行）
sed '5,10s/[a-z]<span class="comment">//g' test.txt（删除第5行到第10行中的小写字母）</span>
sed '5,$'<span class="keyword">d</span> <span class="keyword">test</span>.txt（删除第五行之后的内容）
sed 's/[^0-9a-zA-Z]<span class="comment">//g' test.txt（删除除数字和字母以外的字符）</span>
sed '/^#/<span class="keyword">d</span>;<span class="keyword">G</span>;<span class="keyword">G</span>' <span class="keyword">test</span>.txt（删除空行添加两个空行）
sed '<span class="keyword">n</span>;<span class="keyword">n</span>;<span class="keyword">n</span>;<span class="keyword">d</span>;'  <span class="keyword">test</span>.txt（删除第4行的倍数行）

4.选择特定的行，进行替换
sed '/demo/! s/hello/haha/<span class="keyword">g</span>' <span class="keyword">test</span>.txt &gt; test1.txt（找到不包含demo的行中的hello替换成haha）
sed '/demo/! s#hello#haha#<span class="keyword">g</span>' <span class="keyword">test</span>.txt &gt; test1.txt（避免替换/bin这种字符串的问题，把正则定界符换成#）
sed 'y/demo/Demo/' <span class="keyword">test</span>.txt

5.把结果保存到文件
sed '1,2d;w demo.txt' <span class="keyword">test</span>.txt（将第1，2行删除后保存到demo.txt文件）

6.添加字符
sed <span class="string">"1,3a hello\ndemo"</span> <span class="keyword">test</span>.txt（在第一行到第三行后添加字符串“hello\ndemo”）

7.替换
sed '1,3c hello' <span class="keyword">test</span>.txt（把第一行到第三行替换成hello）

8.插入
sed -i '<span class="label">$a</span> haha_i' <span class="keyword">test</span>.txt（在文件的末尾插入字符串“haha_i”）
</code></pre><h1 id="sed参数说明">sed参数说明</h1><pre><code>用法: sed [选项]... {脚本(如果没有其他脚本)} [输入文件]...

  -<span class="ruby">n, --quiet, --silent
</span>                 加上-n参数后，则只有经过sed特殊处理的那一行(或者动作)才会被列出来
  -<span class="ruby">e 脚本, --expression=脚本
</span>                 添加“脚本”到程序的运行列表
  -<span class="ruby">f 脚本文件, --file=脚本文件
</span>                 添加“脚本文件”到程序的运行列表
  -<span class="ruby">-follow-symlinks
</span>                 follow symlinks when processing in place; hard links
                 will still be broken.
  -<span class="ruby">i[<span class="constant">SUFFIX</span>], --<span class="keyword">in</span>-place[=<span class="constant">SUFFIX</span>]
</span>                 直接修改读取的文件内容，不是输出到屏幕
  -<span class="ruby">c, --copy
</span>                 取代／替换字符串
  -<span class="ruby">l <span class="constant">N</span>, --line-length=<span class="constant">N</span>
</span>                 指定“l”命令的换行期望长度
  -<span class="ruby">-posix
</span>                 关闭所有 GNU 扩展
  -<span class="ruby">r, --regexp-extended 在脚本中使用扩展正则表达式
</span>  -<span class="ruby">s, --separate
</span>                 将输入文件视为各个独立的文件而不是一个长的连续输入
  -<span class="ruby">u, --unbuffered
</span>                 从输入文件读取最少的数据，更频繁的刷新输出
      -<span class="ruby">-help     打印帮助并退出
</span>      -<span class="ruby">-version  输出版本信息并退出
</span>
如果没有 -e, --expression, -f 或 --file 选项，那么第一个非选项参数被视为
sed脚本。其他非选项参数被视为输入文件，如果没有输入文件，那么程序将从标准
输入读取数据。
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="sed使用场景">sed使用场景</h1><pre><code>1.获取指定行数
sed -<span class="keyword">n</span> '1,2p' <span class="keyword">test</span>.txt（查看第1到2行的内容]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell常识]]></title>
    <link href="http://www.cxyteam.com/2015/12/22/shell%E5%B8%B8%E8%AF%86/"/>
    <id>http://www.cxyteam.com/2015/12/22/shell常识/</id>
    <published>2015-12-22T01:53:00.000Z</published>
    <updated>2015-12-27T11:04:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="path环境变量">path环境变量</h1><pre><code>环境变量是一个以‘:’分割的目录列表，可以在列表指定的目录下找到所要执行的命令
<span class="built_in">echo</span> <span class="variable">$PATH</span>（查看目前执行shell寻找的目录）
:（表示查找的优先级）
PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin（将家目录下的bin添加到环境变量）
<span class="built_in">echo</span> <span class="variable">$PATH</span>（查看环境变量）

环境变量永久生效的方式：
<span class="number">1</span>.vim /etc/profile
<span class="number">2</span>.export PATH=/usr/<span class="built_in">local</span>/bin;<span class="built_in">source</span> /etc/profile
</code></pre><h1 id="ls_-l">ls -l</h1><pre><code>‘-’表示参数是可有可无的
</code></pre><h1 id="#!_/bin/sh_的含义">#! /bin/sh 的含义</h1><pre><code>告知系统需要使用<span class="regexp">/bin/</span>sh的shell来执行脚本，类似的还有很多shell比如#! <span class="regexp">/bin/</span>awk ;#! <span class="regexp">/bin/</span>csh
</code></pre><h1 id="‘;’和’&amp;’的作用">‘;’和’&amp;’的作用</h1><pre><code>‘;’用来分隔同一行里的多个命令
‘&amp;’如果是在命令的末尾<span class="built_in">shell</span>会在后台执行该命令
</code></pre><h1 id="‘set_-x’与’set_+x’">‘set -x’与’set +x’</h1><pre><code>关闭和打开追踪功能
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="path环境变量">path环境变量</h1><pre><code>环境变量是一个以‘:’分割的目录列表，可以在列表指定的目录下找到所要执行的命令
<span class="built_in">echo</span> <span class="variable">]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[获取终端输出]]></title>
    <link href="http://www.cxyteam.com/2015/12/22/%E8%8E%B7%E5%8F%96%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA/"/>
    <id>http://www.cxyteam.com/2015/12/22/获取终端输出/</id>
    <published>2015-12-21T16:04:53.000Z</published>
    <updated>2015-12-27T09:52:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="获取终端输出两种方式">获取终端输出两种方式</h1><ul>
<li><p>方法一：<br>  <code>who &gt;&gt; output.txt（将命令的输出结果追加写入到文件中）
  tail -n 100 output.txt（查看文件的末尾100行）</code></p>
</li>
<li><p>方法二：<br>  <code>cat &gt; output.txt（建立文件使用cat复制终端输出）
  who（终端输入who命令）
  ctrl+c（强制中断）
  chmod +x output.txt（添加执行全县）
  ./output.txt（执行测试）</code></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="获取终端输出两种方式">获取终端输出两种方式</h1><ul>
<li><p>方法一：<br>  <code>who &gt;&gt; output.txt（将命令的输出结果追加写入到文件中）
  tail -n 100 output.txt（查看文件的末尾100]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能分析命令]]></title>
    <link href="http://www.cxyteam.com/2015/12/20/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.cxyteam.com/2015/12/20/性能分析命令/</id>
    <published>2015-12-20T02:35:45.000Z</published>
    <updated>2015-12-27T10:54:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="环境准备">环境准备</h1><ul>
<li>首先你得拥有一个linux环境</li>
<li>安装sysstat包 <code>yum install sysstat</code></li>
<li>安装procps包 <code>yum install procps</code></li>
</ul>
<h1 id="需要执行的命令">需要执行的命令</h1><p><code>updime</code><br>    $ uptime<br>    10:41:30 up 45 days, 19:43,  1 user,  load average: 0.00, 0.02, 0.00</p>
<pre><code>显示的是过去1分钟，五分钟，十五分钟系统的平均负载情况，通过数据可以了解服务器负载是趋于紧张还是趋于缓解
</code></pre><p><code>dmesg | tail</code></p>
<pre><code>该命令会输出系统日志的最后<span class="keyword">n</span>行。这些日志可以帮助排查性能问题。千万不要忘了这一步。
</code></pre><p><code>vmstat 1</code></p>
<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- -----<span class="built_in">cpu</span>-----
 r  b   swpd   free   buff  cache   <span class="literal">si</span>   so    bi    bo   <span class="keyword">in</span>   <span class="literal">cs</span> us sy id wa <span class="literal">st</span>
 <span class="number">0</span>  <span class="number">0</span> <span class="number">558844</span>  <span class="number">24696</span> <span class="number">150984</span>  <span class="number">65156</span>    <span class="number">0</span>    <span class="number">0</span>     <span class="number">2</span>   <span class="number">150</span>    <span class="number">1</span>    <span class="number">2</span>  <span class="number">0</span>  <span class="number">1</span> <span class="number">99</span>  <span class="number">0</span>  <span class="number">0</span>
 <span class="number">0</span>  <span class="number">0</span> <span class="number">558844</span>  <span class="number">24688</span> <span class="number">150984</span>  <span class="number">65160</span>    <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   <span class="number">51</span>   <span class="number">72</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">100</span>  <span class="number">0</span>  <span class="number">0</span>
 <span class="number">0</span>  <span class="number">0</span> <span class="number">558844</span>  <span class="number">24688</span> <span class="number">150984</span>  <span class="number">65160</span>    <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   <span class="number">50</span>   <span class="number">75</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">100</span>  <span class="number">0</span>  <span class="number">0</span>
 <span class="number">0</span>  <span class="number">0</span> <span class="number">558844</span>  <span class="number">24688</span> <span class="number">150984</span>  <span class="number">65160</span>    <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   <span class="number">55</span>   <span class="number">80</span>  <span class="number">0</span>  <span class="number">1</span> <span class="number">99</span>  <span class="number">0</span>  <span class="number">0</span>
 <span class="number">0</span>  <span class="number">0</span> <span class="number">558844</span>  <span class="number">24688</span> <span class="number">150984</span>  <span class="number">65160</span>    <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>   <span class="number">44</span>   <span class="number">67</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">100</span>  <span class="number">0</span>  <span class="number">0</span>


每行会输出一些系统核心指标，这些指标可以让我们更详细的了解系统状态。后面跟的参数<span class="number">1</span>，表示每秒输出一次统计信息，表头提示了每一列的含义，这几介绍一些和性能调优相关的列：

<span class="number">1.</span>r：等待在<span class="built_in">CPU</span>资源的进程数。这个数据比平均负载更加能够体现<span class="built_in">CPU</span>负载情况，数据中不包含等待IO的进程。如果这个数值大于机器<span class="built_in">CPU</span>核数，那么机器的<span class="built_in">CPU</span>资源已经饱和。
<span class="number">2.</span>free：系统可用内存数（以千字节为单位），如果剩余内存不足，也会导致系统性能问题。下文介绍到的free命令，可以更详细的了解系统内存的使用情况。
<span class="number">3.</span><span class="literal">si</span>, so：交换区写入和读取的数量。如果这个数据不为<span class="number">0</span>，说明系统已经在使用交换区（swap），机器物理内存已经不足。
<span class="number">4.</span>us, sy, id, wa, <span class="literal">st</span>：这些都代表了<span class="built_in">CPU</span>时间的消耗，它们分别表示用户时间（user）、系统（内核）时间（sys）、空闲时间（idle）、IO等待时间（wait）和被偷走的时间（stolen，一般被其他虚拟机消耗）。

一般情况下，如果用户时间和系统时间相加非常大，<span class="built_in">CPU</span>出于忙于执行指令。如果IO等待时间很长，那么系统的瓶颈可能在磁盘IO。
</code></pre><p><code>mpstat -P ALL 1</code></p>
<pre><code>Linux <span class="number">2.6</span>.32-<span class="number">431.</span>el6.x86_64 (localhost.localdomain)     <span class="number">2015</span>年<span class="number">12</span>月<span class="number">27</span>日     _x86_64_    (<span class="number">1</span> CPU)

<span class="number">18</span>时<span class="number">45</span>分<span class="number">48</span>秒  CPU    <span class="variable">%usr</span>   <span class="variable">%nice</span>    <span class="variable">%sys</span> <span class="variable">%iowait</span>    <span class="variable">%irq</span>   <span class="variable">%soft</span>  <span class="variable">%steal</span>  <span class="variable">%guest</span>   <span class="variable">%idle</span>
<span class="number">18</span>时<span class="number">45</span>分<span class="number">49</span>秒  all    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>
<span class="number">18</span>时<span class="number">45</span>分<span class="number">49</span>秒    <span class="number">0</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>

<span class="number">18</span>时<span class="number">45</span>分<span class="number">49</span>秒  CPU    <span class="variable">%usr</span>   <span class="variable">%nice</span>    <span class="variable">%sys</span> <span class="variable">%iowait</span>    <span class="variable">%irq</span>   <span class="variable">%soft</span>  <span class="variable">%steal</span>  <span class="variable">%guest</span>   <span class="variable">%idle</span>
<span class="number">18</span>时<span class="number">45</span>分<span class="number">50</span>秒  all    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>
<span class="number">18</span>时<span class="number">45</span>分<span class="number">50</span>秒    <span class="number">0</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>

显示每个CPU的占用情况，如果有一个CPU占用率特别高，那么有可能是一个单线程应用程序引起的
</code></pre><p><code>pidstat 1</code></p>
<pre><code>Linux <span class="number">2.6</span>.32-<span class="number">431.</span>el6.x86_64 (localhost.localdomain)     <span class="number">2015</span>年<span class="number">12</span>月<span class="number">27</span>日     _x86_64_    (<span class="number">1</span> CPU)

<span class="number">18</span>时<span class="number">47</span>分<span class="number">22</span>秒       PID    <span class="variable">%usr</span> <span class="variable">%system</span>  <span class="variable">%guest</span>    <span class="variable">%CPU</span>   CPU  Command
<span class="number">18</span>时<span class="number">47</span>分<span class="number">23</span>秒     <span class="number">24331</span>    <span class="number">0.98</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.98</span>     <span class="number">0</span>  redis-server

<span class="number">18</span>时<span class="number">47</span>分<span class="number">23</span>秒       PID    <span class="variable">%usr</span> <span class="variable">%system</span>  <span class="variable">%guest</span>    <span class="variable">%CPU</span>   CPU  Command

<span class="number">18</span>时<span class="number">47</span>分<span class="number">24</span>秒       PID    <span class="variable">%usr</span> <span class="variable">%system</span>  <span class="variable">%guest</span>    <span class="variable">%CPU</span>   CPU  Command
<span class="number">18</span>时<span class="number">47</span>分<span class="number">25</span>秒         <span class="number">7</span>    <span class="number">0.00</span>    <span class="number">1.01</span>    <span class="number">0.00</span>    <span class="number">1.01</span>     <span class="number">0</span>  events/<span class="number">0</span>
<span class="number">18</span>时<span class="number">47</span>分<span class="number">25</span>秒     <span class="number">27624</span>    <span class="number">0.00</span>    <span class="number">2.02</span>    <span class="number">0.00</span>    <span class="number">2.02</span>     <span class="number">0</span>  pidstat

pidstat命令输出进程的CPU占用率，该命令会持续输出，并且不会覆盖之前的数据，可以方便观察系统动态
</code></pre><p><code>iostat -xz 1</code></p>
<pre><code>Linux <span class="number">2.6</span>.32-<span class="number">431.</span>el6.x86_64 (localhost.localdomain)     <span class="number">2015</span>年<span class="number">12</span>月<span class="number">27</span>日     _x86_64_    (<span class="number">1</span> CPU)

avg-cpu:  <span class="variable">%user</span>   <span class="variable">%nice</span> <span class="variable">%system</span> <span class="variable">%iowait</span>  <span class="variable">%steal</span>   <span class="variable">%idle</span>
           <span class="number">0.41</span>    <span class="number">0.00</span>    <span class="number">0.52</span>    <span class="number">0.23</span>    <span class="number">0.00</span>   <span class="number">98.85</span>

Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  <span class="variable">%util</span>
sda               <span class="number">0.04</span>    <span class="number">29.67</span>    <span class="number">0.08</span>    <span class="number">8.22</span>     <span class="number">4.77</span>   <span class="number">299.70</span>    <span class="number">36.67</span>     <span class="number">0.11</span>   <span class="number">12.74</span>   <span class="number">0.66</span>   <span class="number">0.55</span>
dm-<span class="number">0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.11</span>   <span class="number">37.40</span>     <span class="number">4.63</span>   <span class="number">299.11</span>     <span class="number">8.10</span>     <span class="number">0.50</span>   <span class="number">13.35</span>   <span class="number">0.15</span>   <span class="number">0.55</span>
dm-<span class="number">1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.02</span>    <span class="number">0.07</span>     <span class="number">0.14</span>     <span class="number">0.59</span>     <span class="number">8.00</span>     <span class="number">0.00</span>   <span class="number">27.85</span>   <span class="number">0.76</span>   <span class="number">0.01</span>

avg-cpu:  <span class="variable">%user</span>   <span class="variable">%nice</span> <span class="variable">%system</span> <span class="variable">%iowait</span>  <span class="variable">%steal</span>   <span class="variable">%idle</span>
           <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">2.00</span>    <span class="number">0.00</span>   <span class="number">98.00</span>

Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  <span class="variable">%util</span>
sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>    <span class="number">16.00</span>     <span class="number">0.00</span>    <span class="number">16.00</span>     <span class="number">0.01</span>   <span class="number">15.00</span>  <span class="number">15.00</span>   <span class="number">1.50</span>

avg-cpu:  <span class="variable">%user</span>   <span class="variable">%nice</span> <span class="variable">%system</span> <span class="variable">%iowait</span>  <span class="variable">%steal</span>   <span class="variable">%idle</span>
           <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>

Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  <span class="variable">%util</span>

avg-cpu:  <span class="variable">%user</span>   <span class="variable">%nice</span> <span class="variable">%system</span> <span class="variable">%iowait</span>  <span class="variable">%steal</span>   <span class="variable">%idle</span>
           <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>

iostat命令主要用于查看机器磁盘IO情况。该命令输出的列，主要含义是：

r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。
await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。
avgqu-sz：向设备发出的请求平均数量。如果这个数值大于<span class="number">1</span>，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。
<span class="variable">%util</span>：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过<span class="number">60</span>，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达<span class="number">100</span><span class="variable">%，</span>说明硬件设备已经饱和。
如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能
</code></pre><p><code>free -m</code><br>                 total       used       free     shared    buffers     cached<br>    Mem:           458        435         23          0        147         63<br>    -/+ buffers/cache:        223        234<br>    Swap:          927        545        382</p>
<pre><code><span class="built_in">free</span>命令可以查看系统内存的使用情况，-m参数表示按照兆字节展示。最后两列分别表示用于IO缓存的内存数，和用于文件系统页缓存的内存数。需 要注意的是，第二行-/+ buffers/cache，一般缓存会占用大量内存空间。这是Linux系统的内存使用策略，尽可能的利用内存，如果应用程序需要内存，这部分内存会 立即被回收并分配给应用程序。因此，这部分内存一般也被当成是可用内存。

如果可用内存非常少，系统可能会动用交换区（如果配置了的话），这样会增加IO开销（可以在iostat命令中提现），降低系统性能。
</code></pre><p><code>sar -n DEV 1</code></p>
<pre><code><span class="number">18</span>时<span class="number">52</span>分<span class="number">14</span>秒     IFACE   rxpck<span class="regexp">/s   txpck/</span>s    rxkB<span class="regexp">/s    txkB/</span>s   rxcmp<span class="regexp">/s   txcmp/</span>s  rxmcst/s
<span class="number">18</span>时<span class="number">52</span>分<span class="number">15</span>秒        lo      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>
<span class="number">18</span>时<span class="number">52</span>分<span class="number">15</span>秒      eth0      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>
<span class="number">18</span>时<span class="number">52</span>分<span class="number">15</span>秒      eth1      <span class="number">1.01</span>      <span class="number">0.00</span>      <span class="number">0.07</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>

<span class="number">18</span>时<span class="number">52</span>分<span class="number">15</span>秒     IFACE   rxpck<span class="regexp">/s   txpck/</span>s    rxkB<span class="regexp">/s    txkB/</span>s   rxcmp<span class="regexp">/s   txcmp/</span>s  rxmcst/s
<span class="number">18</span>时<span class="number">52</span>分<span class="number">16</span>秒        lo      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>
<span class="number">18</span>时<span class="number">52</span>分<span class="number">16</span>秒      eth0      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>
<span class="number">18</span>时<span class="number">52</span>分<span class="number">16</span>秒      eth1      <span class="number">1.01</span>      <span class="number">1.01</span>      <span class="number">0.07</span>      <span class="number">0.49</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>

sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和。
</code></pre><p><code>sar -n TCP,ETCP 1</code></p>
<pre><code>Linux <span class="number">2.6</span>.32-<span class="number">431.</span>el6.x86_64 (localhost.localdomain)     <span class="number">2015</span>年<span class="number">12</span>月<span class="number">27</span>日     _x86_64_    (<span class="number">1</span> CPU)

<span class="number">18</span>时<span class="number">52</span>分<span class="number">36</span>秒  active<span class="regexp">/s passive/</span>s    iseg<span class="regexp">/s    oseg/</span>s
<span class="number">18</span>时<span class="number">52</span>分<span class="number">37</span>秒      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>

<span class="number">18</span>时<span class="number">52</span>分<span class="number">36</span>秒  atmptf<span class="regexp">/s  estres/</span>s retrans<span class="regexp">/s isegerr/</span>s   orsts/s
<span class="number">18</span>时<span class="number">52</span>分<span class="number">37</span>秒      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>

<span class="number">18</span>时<span class="number">52</span>分<span class="number">37</span>秒  active<span class="regexp">/s passive/</span>s    iseg<span class="regexp">/s    oseg/</span>s
<span class="number">18</span>时<span class="number">52</span>分<span class="number">38</span>秒      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">2.00</span>      <span class="number">2.00</span>

<span class="number">18</span>时<span class="number">52</span>分<span class="number">37</span>秒  atmptf<span class="regexp">/s  estres/</span>s retrans<span class="regexp">/s isegerr/</span>s   orsts/s
<span class="number">18</span>时<span class="number">52</span>分<span class="number">38</span>秒      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>

sar命令在这里用于查看TCP连接状态，其中包括：

active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；
passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接；
retrans/s：每秒TCP重传数量；
TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包。
</code></pre><p><code>top</code></p>
<pre><code>top - <span class="number">18</span>:<span class="number">53</span>:<span class="number">43</span> up <span class="number">53</span> days,  <span class="number">3</span>:<span class="number">55</span>,  <span class="number">1</span> <span class="keyword">user</span>,  load average: <span class="number">0</span>.<span class="number">00</span>, <span class="number">0</span>.<span class="number">00</span>, <span class="number">0</span>.<span class="number">02</span>
<span class="constant">Tasks</span>:  <span class="number">86</span> total,   <span class="number">1</span> <span class="literal">running</span>,  <span class="number">85</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie
<span class="constant">Cpu</span>(s):  <span class="number">0</span>.<span class="number">4</span>%us,  <span class="number">0</span>.<span class="number">4</span>%sy,  <span class="number">0</span>.<span class="number">0</span>%ni, <span class="number">98.8</span>%<span class="built_in">id</span>,  <span class="number">0</span>.<span class="number">2</span>%wa,  <span class="number">0</span>.<span class="number">0</span>%hi,  <span class="number">0</span>.<span class="number">1</span>%si,  <span class="number">0</span>.<span class="number">0</span>%st
<span class="constant">Mem</span>:    <span class="number">469452</span>k total,   <span class="number">446128</span>k used,    <span class="number">23324</span>k free,   <span class="number">151644</span>k buffers
<span class="constant">Swap</span>:   <span class="number">950264</span>k total,   <span class="number">558844</span>k used,   <span class="number">391420</span>k free,    <span class="number">65716</span>k cached

  <span class="constant">P</span>ID <span class="constant">U</span>SER      <span class="constant">P</span>R  <span class="constant">N</span>I  <span class="constant">V</span>IRT  <span class="constant">R</span>ES  <span class="constant">S</span>HR <span class="constant">S</span> %<span class="constant">C</span>PU %<span class="constant">M</span>EM    <span class="constant">T</span>IME+  <span class="constant">C</span>OMMAND
    <span class="number">1</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span> <span class="number">19232</span>  <span class="number">520</span>  <span class="number">348</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>   <span class="number">0</span>:<span class="number">44.68</span> init
    <span class="number">2</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">03</span> kthreadd
    <span class="number">3</span> <span class="literal">root</span>      <span class="constant">R</span>T   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> migration/<span class="number">0</span>
    <span class="number">4</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">38</span>:<span class="number">03</span>.<span class="number">76</span> ksoftirqd/<span class="number">0</span>
    <span class="number">5</span> <span class="literal">root</span>      <span class="constant">R</span>T   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> migration/<span class="number">0</span>
    <span class="number">6</span> <span class="literal">root</span>      <span class="constant">R</span>T   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">15.98</span> watchdog/<span class="number">0</span>
    <span class="number">7</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">57</span>:<span class="number">02</span>.<span class="number">33</span> events/<span class="number">0</span>
    <span class="number">8</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> cgroup
    <span class="number">9</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> khelper
   <span class="number">10</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> netns
   <span class="number">11</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> async/mgr
   <span class="number">12</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> pm
   <span class="number">13</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">31.42</span> sync_supers
   <span class="number">14</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">33.01</span> bdi-<span class="keyword">default</span>
   <span class="number">15</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kintegrityd/<span class="number">0</span>
   <span class="number">16</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">32</span>:<span class="number">20.76</span> kblockd/<span class="number">0</span>
   <span class="number">17</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kacpid
   <span class="number">18</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kacpi_notify
   <span class="number">19</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kacpi_hotplug
   <span class="number">20</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> ata_aux
   <span class="number">21</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">21</span> ata_sff/<span class="number">0</span>
   <span class="number">22</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> ksuspend_usbd
   <span class="number">23</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> khubd
   <span class="number">24</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kseriod
   <span class="number">25</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> md/<span class="number">0</span>
   <span class="number">26</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> md_misc/<span class="number">0</span>
   <span class="number">27</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> linkwatch
   <span class="number">28</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">02</span>.<span class="number">11</span> khungtaskd
   <span class="number">29</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">27.30</span> kswapd<span class="number">0</span>
   <span class="number">30</span> <span class="literal">root</span>      <span class="number">25</span>   <span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> ksmd
   <span class="number">31</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> aio/<span class="number">0</span>
   <span class="number">32</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> crypto/<span class="number">0</span>
   <span class="number">37</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kthrotld/<span class="number">0</span>
   <span class="number">39</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kpsmoused
   <span class="number">40</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> usbhid_resumer
   <span class="number">70</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> kstriped
  <span class="number">128</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">02</span>.<span class="number">82</span> scsi_eh_<span class="number">0</span>
  <span class="number">129</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> scsi_eh_1
  <span class="number">215</span> <span class="literal">root</span>      <span class="number">20</span>   <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> <span class="constant">S</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">13</span>:<span class="number">53.06</span> kdmflush
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="环境准备">环境准备</h1><ul>
<li>首先你得拥有一个linux环境</li>
<li>安装sysstat包 <code>yum install sysstat</code></li>
<li>安装procps包 <code>yum install pr]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务器如何设置的cookie]]></title>
    <link href="http://www.cxyteam.com/2015/12/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%9A%84cookie/"/>
    <id>http://www.cxyteam.com/2015/12/18/服务器如何设置的cookie/</id>
    <published>2015-12-18T07:05:40.000Z</published>
    <updated>2015-12-18T07:38:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一个joke">一个joke</h2><pre><code><span class="php"><span class="preprocessor">&lt;?php</span>
    setcookie(<span class="string">'key'</span>, <span class="string">'value'</span>, time()+<span class="number">1000</span>, <span class="string">'/'</span>, <span class="string">'hostname'</span>);
    var_dump(<span class="variable">$_COOKIE</span>);

为什么不能打印出cookie？难道代码写错了么？你知道么？</span>
</code></pre><h2 id="cookie设置流程">cookie设置流程</h2><pre><code><span class="number">1.</span>首先调用setcookie函数的时候服务器端会在header头里面发送：<span class="built_in">set</span>-cookie <span class="built_in">key</span>=<span class="built_in">value</span>，以此来告诉客户端我需要设置cookie
<span class="number">2.</span>客户端会通过一定的方法将cookie存储起来
<span class="number">3.</span>每次访问的时候都会在header里面的cookie带上信息：<span class="built_in">key</span>=<span class="built_in">value</span>
</code></pre><h2 id="结论">结论</h2><ul>
<li><p>当立马设置完cookie然后去拿cookie的时候当然拿不到cookie值key，因为它的当前请求中的cookie是不存在的，只有这次请求完之后，才会去设置号cookie然后请求的header信息中带上cookie</p>
</li>
<li><p>当然对于删除cookie和重置cookie都是同样的道理</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一个joke">一个joke</h2><pre><code><span class="php"><span class="preprocessor">&lt;?php</span>
    setcookie(<span class="string">'key'<]]>
    </summary>
    
      <category term="PHP" scheme="http://www.cxyteam.com/tags/PHP/"/>
    
      <category term="PHP" scheme="http://www.cxyteam.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[siege压测工具的安装与使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/17/siege%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/17/siege压测工具的安装与使用/</id>
    <published>2015-12-17T06:18:08.000Z</published>
    <updated>2015-12-18T08:43:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="siege的安装">siege的安装</h1><pre><code>wget <span class="string">http:</span><span class="comment">//soft.vpser.net/test/siege/siege-2.67.tar.gz（国内的一个镜像站地址）</span>
tar -zxvf siege-<span class="number">2.67</span>.tar.gz
cd siege-<span class="number">2.67</span>
./configure &amp;&amp; make &amp;&amp; make install
<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>siege --help
</code></pre><p><a href="http://download.joedog.org/siege/siege-latest.tar.gz" target="_blank" rel="external">官网的下载地址</a>（我下载的时候连接超时）<br>    <a href="https://github.com/JoeDog/siege" target="_blank" rel="external">siege，github地址</a></p>
<h1 id="siege的使用">siege的使用</h1><pre><code><span class="number">50</span>个用户（每次并发量，注意不是每秒并发量） 重复<span class="number">100</span>次 共产生 <span class="number">50</span> * <span class="number">100</span> = <span class="number">5000</span>个请求
/usr/local/bin/siege -c <span class="number">50</span> -r <span class="number">100</span>  <span class="built_in">hostname</span>/<span class="built_in">path</span>

<span class="number">50</span>个用户 重复<span class="number">100</span>次 发送<span class="constant">G</span>ET参数
/usr/local/bin/siege -c <span class="number">50</span> -r <span class="number">100</span>  <span class="built_in">hostname</span>/<span class="built_in">path</span>?<span class="literal">name</span>=zhangsan

<span class="number">50</span>个用户 重复<span class="number">100</span>次 发送<span class="constant">P</span>OST参数 (注意引号)
/usr/local/bin/siege -c <span class="number">50</span> -r <span class="number">100</span>  <span class="string">"hostname/path POST name=zhangsan"</span>

<span class="number">50</span>个用户 重复<span class="number">100</span>次 发送<span class="constant">P</span>OST参数(从文件中读取)
/usr/local/bin/siege -c <span class="number">50</span> -r <span class="number">100</span>  <span class="string">"hostname/path POST &lt; /tmp/post.xml"</span>

<span class="number">100</span>个用户 重复<span class="number">100</span>次 发送cookie参数
/usr/local/bin/siege -c <span class="number">100</span> -r <span class="number">100</span> -<span class="constant">H</span> <span class="string">"Cookie:key=value"</span> <span class="string">"hostname/path"</span>

压测多个地址
siege -c <span class="number">200</span> -r <span class="number">10</span> -f url.txt
url.txt的内容是:
    <span class="built_in">hostname</span>/<span class="built_in">path</span>
    <span class="built_in">hostname</span>/<span class="built_in">path</span>
    <span class="built_in">hostname</span>/<span class="built_in">path</span>
</code></pre><h1 id="siege命令结果分析">siege命令结果分析</h1><pre><code><span class="string">Transactions:</span>                    <span class="number">100</span> hits （完成<span class="number">100</span>个请求)
<span class="string">Availability:</span>                    <span class="number">100.00</span> %（<span class="number">100</span>%的成功率_）
Elapsed <span class="string">time:</span>                    <span class="number">10.97</span> secs（总共使用时间_）
Data <span class="string">transferred:</span>                <span class="number">0.54</span> MB（总共传输数据_）
Response <span class="string">time:</span>                    <span class="number">0.17</span> secs（响应时间）
Transaction <span class="string">rate:</span>                <span class="number">9.12</span> trans/sec（平均每秒完成的处理）
<span class="string">Throughput:</span>                        <span class="number">0.05</span> MB/sec（平均每秒传送的数据）
<span class="string">Concurrency:</span>                    <span class="number">1.58</span>（实际最高并发数）
Successful <span class="string">transactions:</span>        <span class="number">100</span>（成功处理次数）
Failed <span class="string">transactions:</span>            <span class="number">0</span>（失败处理次数）
Longest <span class="string">transaction:</span>            <span class="number">3.09</span>（每次传输花费的最长时间）
Shortest <span class="string">transaction:</span>            <span class="number">0.03</span>（每次传输花费的最短时间）
</code></pre><h1 id="siege参数说明">siege参数说明</h1><pre><code>Usage: siege [options]
       siege [options] URL
       siege -g URL
Options:
  -<span class="ruby"><span class="constant">V</span>, --version           （版本信息）
</span>  -<span class="ruby">h, --help              （帮助信息）
</span>  -<span class="ruby"><span class="constant">C</span>, --config            （显示配置）
</span>  -<span class="ruby">v, --verbose           （运行时能看到详细的运行信息）
</span>  -<span class="ruby">g, --get               （显示http头信息，用户debug）
</span>  -<span class="ruby">c, --concurrent=<span class="constant">NUM</span>    （一次请求的并发数目）
</span>  -<span class="ruby">i, --internet          （随机模拟用户点击）
</span>  -<span class="ruby">b, --benchmark         （基准测试，设置这个参数默认延迟时间为<span class="number">0</span>）
</span>  -<span class="ruby">t, --time=<span class="constant">NUMm</span>         （设置测试的时间比如--time=<span class="number">1</span>H, 测试时间一个小时）
</span>  -<span class="ruby">r, --reps=<span class="constant">NUM</span>          （压测次数）
</span>  -<span class="ruby">f, --file=<span class="constant">FILE</span>         （指定任务文件）
</span>  -<span class="ruby"><span class="constant">R</span>, --rc=<span class="constant">FILE</span>           （修改siegerc的文件位置，覆盖<span class="constant">SIEGERC</span>的环境变量）
</span>  -<span class="ruby">l, --log               （运行完之后的结果log位置）
</span>  -<span class="ruby">m, --mark=<span class="string">"text"</span>       （利用分隔符标记文件）
</span>  -<span class="ruby">d, --delay=<span class="constant">NUM</span>         （每次压测延迟的时间）
</span>  -<span class="ruby"><span class="constant">H</span>, --header=<span class="string">"text"</span>     （添加一个header头请求消息）
</span>  -<span class="ruby"><span class="constant">A</span>, --user-agent=<span class="string">"text"</span> （设置<span class="constant">User</span>-<span class="constant">Agent</span>）
</span>  -<span class="ruby"><span class="constant">T</span> --content-type       （指定http请求中的content-type字段内容）</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="siege的安装">siege的安装</h1><pre><code>wget <span class="string">http:</span><span class="comment">//soft.vpser.net/test/siege/siege-2.67]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ab压测工具的安装与使用]]></title>
    <link href="http://www.cxyteam.com/2015/12/17/ab%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/12/17/ab压测工具的安装与使用/</id>
    <published>2015-12-17T02:03:33.000Z</published>
    <updated>2015-12-17T07:11:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><pre><code>yum <span class="keyword">install</span> httpd-tools
</code></pre><h2 id="使用">使用</h2><pre><code>ab -kc 10 -n 10 http://hostname/path (<span class="keyword">*</span>命令表示连接100，并发请求数是100次<span class="keyword">*</span>)
</code></pre><h2 id="命令执行结果分析">命令执行结果分析</h2><pre><code>Server Software:
Server Hostname:        hostname<span class="comment">(*服务器域名*)</span>
Server Port:            <span class="number">443</span><span class="comment">(*服务器端口*)</span>
SSL/TLS Protocol:       TLSv1/SSLv3,ECDHE-RSA-AES128-GCM-SHA256,<span class="number">2048</span>,<span class="number">128</span>

Document Path:          /path<span class="comment">(*测试接口地址*)</span>
Document Length:        <span class="number">14904</span> bytes<span class="comment">(*测试数据大小*)</span>

Concurrency Level:      <span class="number">10</span><span class="comment">(*并发数*)</span>
Time taken <span class="keyword">for</span> tests:   <span class="number">0.403</span> seconds<span class="comment">(*整个测试持续时间*)</span>
Complete requests:      <span class="number">10</span><span class="comment">(*完成的请求数量*)</span>
Failed requests:        <span class="number">0</span><span class="comment">(*失败的请求*)</span>
<span class="keyword">Write</span> errors:           <span class="number">0</span><span class="comment">(*请求写入失败的次数*)</span>
Keep-Alive requests:    <span class="number">0</span><span class="comment">(*保持联机连接的请求数量。只有在命令行中使用-k，才能看到该属性值*)</span>
Total transferred:      <span class="number">151120</span> bytes<span class="comment">(*整个场景中的网络传输量*)</span>
HTML transferred:       <span class="number">149040</span> bytes<span class="comment">(*整个场景中的HTML内容传输量*)</span>
`Requests per second:    <span class="number">24.84</span> [#/sec] (mean)<span class="comment">(*表示当前测试的服务器每秒可以处理24.84个静态html的请求事务，后面的mean表示平均。这个数值表示当前机器的整体性能，值越大越好*)</span>`
`Time per request:       <span class="number">402.511</span> [ms] (mean)<span class="comment">(*单个并发的延迟时间，后面的mean表示平均。隔离开当前并发，单独完成一个请求需要的平均时间*)</span>`
`Time per request:       <span class="number">40.251</span> [ms] (mean, across all concurrent requests)<span class="comment">(*即上面的时间（Time per request）除以并发数 ,平均每个并发请求处理的时间*)</span>`
`Transfer rate:          <span class="number">366.64</span> [Kbytes/sec] received<span class="comment">(*平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题，也就是这些请求在单位时间从服务器获取的数据长度*)</span>`

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:       <span class="number">33</span>   <span class="number">46</span>  <span class="number">14.6</span>     <span class="number">41</span>      <span class="number">72</span>
Processing:    <span class="number">16</span>  <span class="number">113</span> <span class="number">119.2</span>     <span class="number">27</span>     <span class="number">268</span>
Waiting:       <span class="number">10</span>   <span class="number">37</span>  <span class="number">79.1</span>     <span class="number">12</span>     <span class="number">262</span>
Total:         <span class="number">49</span>  <span class="number">159</span> <span class="number">121.5</span>     <span class="number">99</span>     <span class="number">340</span>

Percentage <span class="keyword">of</span> the requests served within a certain time (ms)
  <span class="number">50</span>%     <span class="number">99</span>
  <span class="number">66</span>%    <span class="number">268</span>
  <span class="number">75</span>%    <span class="number">282</span>
  <span class="number">80</span>%    <span class="number">299</span>
  <span class="number">90</span>%    <span class="number">340</span>
  <span class="number">95</span>%    <span class="number">340</span>
  <span class="number">98</span>%    <span class="number">340</span>
  <span class="number">99</span>%    <span class="number">340</span>
 <span class="number">100</span>%    <span class="number">340</span> (longest request)
</code></pre><h2 id="ab命令参数">ab命令参数</h2><pre><code>Usage:
  ab [options] [http[s]:<span class="comment">//]hostname[:port]/path</span>
Options are:
  -n requests     <span class="comment">(*总的请求数目*)</span>
  -c concurrency  <span class="comment">(*一次请求并发数*)</span>
  -t timelimit    <span class="comment">(*测试进行的最大秒数*)</span>
  -b windowsize   <span class="comment">(*tcp连接的最大内存使用*)</span>
  -p postfile     <span class="comment">(*post的数据*)</span>
  -u putfile      <span class="comment">(*put的数据*)</span>
  -T content-<span class="keyword">type</span> <span class="comment">(*header的类型，比如'application/x-www-form-urlencoded'默认为Default is 'text/plain'*)</span>
  -v verbosity    <span class="comment">(*设置显示信息的详细程度 – 4或更大值会显示头信息， 3或更大值可以显示响应代码(404, 200等), 2或更大值可以显示警告和其他信息*)</span>
  -w              <span class="comment">(*将结果用html的table打印出来，默认它是白色背景的两列宽度的一张表*)</span>
  -i              <span class="comment">(*执行HEAD请求，而不是GET*)</span>
  -C attribute    <span class="comment">(*添加一个cookie信息*)</span><span class="keyword">Add</span> cookie, eg. <span class="string">'Apache=1234. (repeatable)
  -H attribute    (*添加head属性例如eg. '</span>Accept-Encoding: gzip<span class="string">'*)
  -A attribute    (*Add Basic WWW Authentication, the attributes are a colon separated username and password*)
  -P attribute    (*Add Basic Proxy Authentication, the attributes are a colon separated username and password*)
  -X proxy:port   (*使用代理的端口*)
  -V              (*显示版本信息并退出*)
  -k              (*使用http的KeepAlive属性*)
  -d              (*Do not show percentiles served table*)
  -S              (*Do not show confidence estimators and warnings*)
  -g filename     (*Output collected data to gnuplot format file*)
  -e filename     (*Output CSV file with percentages served*)
  -r              (*忽略socket错误*)
  -h              (*Display usage information (this message)*)
  -Z ciphersuite  (*Specify SSL/TLS cipher suite (See openssl ciphers)*)
  -f protocol     (*特殊的协议例如SSL2, SSL3, TLS1, or ALL*)</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装">安装</h2><pre><code>yum <span class="keyword">install</span> httpd-tools
</code></pre><h2 id="使用">使用</h2><pre><code>ab -kc 10 -n 1]]>
    </summary>
    
      <category term="Other" scheme="http://www.cxyteam.com/tags/Other/"/>
    
      <category term="Other" scheme="http://www.cxyteam.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis集群的安装与配置]]></title>
    <link href="http://www.cxyteam.com/2015/12/03/Redis%E9%9B%86%E7%BE%A4%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.cxyteam.com/2015/12/03/Redis集群的安装与配置/</id>
    <published>2015-12-03T10:23:49.000Z</published>
    <updated>2015-12-03T10:45:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Redis集群安装">Redis集群安装</h2><ul>
<li><code>wget &#39;http://download.redis.io/releases/redis-3.0.3.tar.gz&#39;</code>(<em>下载redis-3.0.tar.gz</em>)</li>
<li><code>tar zxvf redis-3.0.tar.gz</code>(<em>解压安装包</em>)</li>
<li><code>cd redis-3.0.0-beta3</code>（<em>进入解压后的文件夹</em>）</li>
<li><code>yum install tcl</code></li>
<li><code>make</code></li>
<li><code>cp redis.conf redis.6380.conf</code></li>
<li><code>vim redis.6380.conf</code></li>
<li><code>src/redis-server redis.6380.conf &amp;</code></li>
<li><code>ps aux | grep redis</code></li>
<li><code>src/redis-cli -h 172.16.9.111 -p 6379</code></li>
<li><code>yum install ruby</code></li>
<li><code>yum install rubygems</code></li>
<li><code>gem install redis</code></li>
<li><code>src/redis-trib.rb create --replicas 1 172.16.9.111:6380 172.16.9.111:6381 172.16.9.111:6382 172.16.9.104:6380 172.16.9.104:6381 172.16.9.104:6382</code></li>
<li><code>src/redis-cli -p 6380</code></li>
<li><code>src/redis-cli -c -p 6380</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Redis集群安装">Redis集群安装</h2><ul>
<li><code>wget &#39;http://download.redis.io/releases/redis-3.0.3.tar.gz&#39;</code>(<em>下载redis-3.0.t]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分页的思考]]></title>
    <link href="http://www.cxyteam.com/2015/11/04/%E5%88%86%E9%A1%B5%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://www.cxyteam.com/2015/11/04/分页的思考/</id>
    <published>2015-11-04T08:53:46.000Z</published>
    <updated>2015-11-04T17:00:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="需求">需求</h2><ul>
<li>交易记录条数过多，需要分页处理</li>
</ul>
<h2 id="坑">坑</h2><ul>
<li>当进行翻页的时候会有重复的数据数据出现。</li>
<li>原因：在查询的时候，有新的交易记录产生，会影响偏移条数的统计。mysql中使用的是limit $page<em>$length,$length的语句进行查询的，当他查询第一页前面20的时候返回的前面20条,当有新的1条交易记录产生的时候，实际上对应的第二页得数据应该是第22到第41条(</em>因为产生记录之前的第20条数据，已经顺移了一个位置*)，实际上显示的是第21到第40条，所以第21条数据应该是重复的</li>
</ul>
<h2 id="解决方案">解决方案</h2><ul>
<li>在进行分页的时候，传入当前页的最有一个记录的id然后在分页的sql变成where id&gt;? limit $lenght</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="需求">需求</h2><ul>
<li>交易记录条数过多，需要分页处理</li>
</ul>
<h2 id="坑">坑</h2><ul>
<li>当进行翻页的时候会有重复的数据数据出现。</li>
<li>原因：在查询的时候，有新的交易记录产生，会影响偏移条数的统]]>
    </summary>
    
      <category term="PHP" scheme="http://www.cxyteam.com/tags/PHP/"/>
    
      <category term="PHP" scheme="http://www.cxyteam.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[decrby的一个坑]]></title>
    <link href="http://www.cxyteam.com/2015/11/04/decrby%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
    <id>http://www.cxyteam.com/2015/11/04/decrby的一个坑/</id>
    <published>2015-11-04T04:56:11.000Z</published>
    <updated>2015-11-04T15:49:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="需求">需求</h2><ul>
<li>随着销售的进行，理财产品的总剩余额度需要进行记录</li>
</ul>
<h2 id="坑">坑</h2><ul>
<li>使用了redis进行落地存储，并使用decrby进行递减操作，结果数字到达一定的值以后不进行递减少了</li>
</ul>
<h2 id="选择理由">选择理由</h2><ul>
<li>销售总金额的变化频繁，所以采用redis进行存储</li>
<li>用decrby不用get，set依次操作的的理由是把数据的减少操作交给redis操作，内部有事务进行保障</li>
</ul>
<h2 id="解决方案">解决方案</h2><ul>
<li>还是使用decrby进行递减操作，只是金额以分为单位，保证decrby是整数类型</li>
</ul>
<h2 id="实验（redis终端）">实验（<em>redis终端</em>）</h2><ul>
<li><code>set money 100</code></li>
<li><code>decrby money 20</code></li>
<li><code>set money 100.01</code></li>
<li><code>decrby money 100</code></li>
</ul>
<h2 id="结论">结论</h2><ul>
<li>decrby有类型限制，只有整数类型的时候才能进行递减操作</li>
<li>文档的描述：如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误</li>
<li>导致记录错误的原因是：在销售的过程中，有的用户购买理财产品不是整元数，导致decrby需要进行小数操作</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="需求">需求</h2><ul>
<li>随着销售的进行，理财产品的总剩余额度需要进行记录</li>
</ul>
<h2 id="坑">坑</h2><ul>
<li>使用了redis进行落地存储，并使用decrby进行递减操作，结果数字到达一定的值以后不进行递减少了]]>
    </summary>
    
      <category term="Redis" scheme="http://www.cxyteam.com/tags/Redis/"/>
    
      <category term="Redis" scheme="http://www.cxyteam.com/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[float遇到的一个坑]]></title>
    <link href="http://www.cxyteam.com/2015/11/04/float%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
    <id>http://www.cxyteam.com/2015/11/04/float遇到的一个坑/</id>
    <published>2015-11-04T04:50:05.000Z</published>
    <updated>2015-11-04T06:36:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="需求">需求</h2><ul>
<li>数据库需要存储金钱的数值单位为元，保留两位小数，需要选择mysql数据类型</li>
</ul>
<h2 id="坑">坑</h2><ul>
<li>使用了float进行存储，结果导致了，内部的金额计算会有部分错误</li>
</ul>
<h2 id="选择理由">选择理由</h2><ul>
<li>decimal用于存储精确的小数，支持精确计算（5.0以后），会影响列到空间消耗</li>
<li>float使用4个字节存储</li>
<li>浮点类型存储同样返回的值，通常比decimal使用更少的空间</li>
<li>float已经修复了内部浮点数bug计算（<em>设计当初模糊的印象，没有去查证，实际是错的</em>）</li>
</ul>
<h2 id="解决方案">解决方案</h2><ul>
<li>使用decimal(15,2)进行存储</li>
</ul>
<h2 id="实验">实验</h2><ul>
<li><code>CREATE TABLE</code>account_float<code>(mon｀ey float(15,2) not null default &#39;0.00&#39;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></li>
<li><code>insert into account_float(money) values(1234456.56);</code></li>
<li><code>CREATE TABLE</code>account_decimal<code>(money decimal(15,2) not null default &#39;0.00&#39;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></li>
<li><code>insert into account_decimal(money) values(1234456.56);</code><br>`<h2 id="结论">结论</h2></li>
<li>金额等需要精确计算的数据一般都用decimal进行存储</li>
<li>导致记录错误的原因是：float和double会存在隐性类型转换，设置的float长度过长的话，mysql会自动将数据类型转换成double</li>
<li>float和double的精度是由尾数的位数来决定的。浮点数在内存中是按科学计数法来存储的，其整数部分始终是一个隐含着的“1”，由于它是不变的，故不能对精度造成影响。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="需求">需求</h2><ul>
<li>数据库需要存储金钱的数值单位为元，保留两位小数，需要选择mysql数据类型</li>
</ul>
<h2 id="坑">坑</h2><ul>
<li>使用了float进行存储，结果导致了，内部的金额计算会有部分错误</li>]]>
    </summary>
    
      <category term="Mysql" scheme="http://www.cxyteam.com/tags/Mysql/"/>
    
      <category term="Mysql" scheme="http://www.cxyteam.com/categories/Mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Strace命令使用]]></title>
    <link href="http://www.cxyteam.com/2015/11/04/Strace%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.cxyteam.com/2015/11/04/Strace命令使用/</id>
    <published>2015-11-03T16:00:59.000Z</published>
    <updated>2015-11-04T04:41:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="主要功能">主要功能</h2><ul>
<li>会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值，每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值</li>
</ul>
<h2 id="我的应用场景">我的应用场景</h2><ul>
<li><code>strace mysql</code>（<em>找不到配置文件的时候，可以使用它查看它打开文件的记录，了解到配置文件的路径.</em>）</li>
<li><code>ps aux | grep php-fpm</code>（<em>找出php-fpm的启动进程</em>） <code>strace -p 26999</code>（<em>26999为非root进程id</em>）（<em>在进行程序调试的时候不知道发生了什么错误，错误日志写在什么位置，或者程序在哪个未知位置执行终止了，都可以进行查看。</em>）</li>
<li><code>strace -o strace.txt -T -tt -e trace=all -p 3306</code>（<em>跟踪3306进程的所有系统调用（-e trace=all），并统计系统调用的花费时间，以及开始时间（并以可视化的时分秒格式显示），最后将记录结果存在strace.txt文件里面，当中断显示不全strace信息的时候</em>）</li>
</ul>
<h2 id="参数说明">参数说明</h2><pre><code> -<span class="ruby">c            <span class="comment">#统计每一系统调用的所执行的时间,次数和出错的次数等.</span>
</span> -<span class="ruby"><span class="constant">C</span>            <span class="comment">#Like -c but also print regular output while processes are running</span>
</span> -<span class="ruby">d            <span class="comment">#输出strace自身的关于标准错误的调试信息.</span>
</span> -<span class="ruby">f            <span class="comment">#跟踪由fork调用所产生的子进程.</span>
</span> -<span class="ruby">ff            <span class="comment">#如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. 此与-c不兼容</span>
</span> -<span class="ruby">h            <span class="comment">#输出简要的帮助信息.</span>
</span> -<span class="ruby">i            <span class="comment">#打印系统调用时候的入口指针.</span>
</span> -<span class="ruby">q            <span class="comment">#禁止输出关于脱离的消息.</span>
</span> -<span class="ruby">r            <span class="comment">#进入每一个系统调用时打印一个相对时间戳，一个系统调用的开始和下一个系统调用接替时，两者之间的时间.</span>
</span> -<span class="ruby">t            <span class="comment">#在输出中的每一行前加上时间信息.</span>
</span> -<span class="ruby">tt            <span class="comment">#时间信息精确到微妙</span>
</span> -<span class="ruby">ttt            <span class="comment">#时间信息精确到微妙，而且时间表示为unix时间戳</span>
</span> -<span class="ruby"><span class="constant">T</span>            <span class="comment">#显示每一调用所耗的时间.</span>
</span> -<span class="ruby">v            <span class="comment">#Print unabbreviated versions of environment, stat, termios, etc.  calls</span>
</span> -<span class="ruby"><span class="constant">V</span>            <span class="comment">#输出strace的版本信息.</span>
</span> -<span class="ruby">x            <span class="comment">#打印所有非ascii字符串以十六进制字符串格式显示。</span>
</span> -<span class="ruby">xx            <span class="comment">#所有字符串以十六进制形式输出.</span>
</span> -<span class="ruby">a column        <span class="comment">#设置返回值的输出位置.默认 为40.</span>
</span> -<span class="ruby">e expr        <span class="comment">#指定一个表达式,用来控制如何跟踪.格式如下:</span>
</span>[qualifier=][!]value1[,value2]...
qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: -eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. 注意有些shell使用!来执行历史记录里的命令,所以要使用反斜杠
 -<span class="ruby">e trace=set        <span class="comment">#只跟踪指定的系统调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all.</span>
</span> -<span class="ruby">e trace=file        <span class="comment">#只跟踪有关文件操作的系统调用.</span>
</span> -<span class="ruby">e trace=process    <span class="comment">#只跟踪有关进程控制的系统调用.</span>
</span> -<span class="ruby">e trace=network    <span class="comment">#跟踪与网络有关的所有系统调用.</span>
</span> -<span class="ruby">e strace=signal    <span class="comment">#跟踪所有与系统信号有关的 系统调用</span>
</span> -<span class="ruby">e trace=ipc        <span class="comment">#跟踪所有与进程通讯有关的系统调用</span>
</span> -<span class="ruby">e abbrev=set        <span class="comment">#设定 strace输出的系统调用的结果集.-v等与abbrev=none.默认为abbrev=all.</span>
</span> -<span class="ruby">e raw=set        <span class="comment">#将指 定的系统调用的参数以十六进制显示.</span>
</span> -<span class="ruby">e signal=set        <span class="comment">#指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号.</span>
</span> -<span class="ruby">e read=set        <span class="comment">#输出从指定文件中读出的数据.例如: -e read=3,5</span>
</span> -<span class="ruby">e write=set        <span class="comment">#输出写入到指定文件中的数据.</span>
</span> -<span class="ruby">o filename        <span class="comment">#将strace的输出写入文件filename</span>
</span> -<span class="ruby"><span class="constant">O</span> overhead        <span class="comment">#设置追踪系统的总开销（microseconds）</span>
</span> -<span class="ruby">p pid            <span class="comment">#跟踪指定的进程pid.</span>
</span> -<span class="ruby">s strsize        <span class="comment">#指定输出的字符串的最大长度.默认为32.文件名一直全部输出.</span>
</span> -<span class="ruby"><span class="constant">S</span> sortby        <span class="comment">#-c选项的输出以规定的标准显示为直方图</span>
</span> -<span class="ruby">u username        <span class="comment">#以username 的UID和GID执行被跟踪的命令</span></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="主要功能">主要功能</h2><ul>
<li>会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值，每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值</li>
</ul>
<h2 id="我的应用场景">我的应用场]]>
    </summary>
    
      <category term="Linux" scheme="http://www.cxyteam.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://www.cxyteam.com/categories/Linux/"/>
    
  </entry>
  
</feed>